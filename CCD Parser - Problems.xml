<channel version="3.12.0">
  <id>cdc68cb2-21f4-447e-b7b9-a0d120a91aed</id>
  <nextMetaDataId>2</nextMetaDataId>
  <name>CCD Parser - Problems</name>
  <description></description>
  <revision>6</revision>
  <sourceConnector version="3.12.0">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.12.0">
      <pluginProperties/>
      <sourceConnectorProperties version="3.12.0">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
    </properties>
    <transformer version="3.12.0">
      <elements>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
          <name>Problem</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <script>var problemSection = sourceMap.get(&apos;problemSection&apos;);
var _problemText = sourceMap.get(&apos;problemText&apos;);


var section = {};
if (problemSection != null) {
    section.Code = GetCE(problemSection.getCode());
    section.Title = GetST(problemSection.getTitle());

    var _entries = problemSection.getEntries();
    var entries = [];
    if (_entries != null) {
        var _entriesSize = _entries.size();
        if (_entriesSize &gt; 0) {
        		var _i = 0;
            	for (_i = 0; _i &lt; _entriesSize; _i++) {
                	var entry = {};
                	var _entry = _entries.get(_i);

                	if (_entry != null) {
                    	var act = {};
                    	var _act = _entry.getAct();
                    	if (_act != null) {
                    		act.StatusCode = GetCS(_act.getStatusCode());
                    		act.Informants = GetInformant12List(_act.getInformants());
                              act.Authors  = GetAuthorList(_act.getAuthors());
                        		var _Actentryrelationships = _act.getEntryRelationships();
                        		var Actentryrelationships = [];

                        		if (_Actentryrelationships != null) {
                            		var _ActentryrelationshipsSize = _Actentryrelationships.size();
                            		var _ActentryRelationshipCount = 0;
                            		for (_ActentryRelationshipCount = 0; _ActentryRelationshipCount &lt; _ActentryrelationshipsSize; _ActentryRelationshipCount++) 
                            		{
                                		var Actentryrelationship = {};
                                		var _Actentryrelationship = _Actentryrelationships.get(_ActentryRelationshipCount);
                                		var _ActentryrelationshipObservation = _Actentryrelationship.getObservation();
                                		if (_ActentryrelationshipObservation != null) {
                                    		var ActentryrelationshipObservation = {};
                                    		ActentryrelationshipObservation.Ids = GetIIList(_ActentryrelationshipObservation.getIds());
                                    		ActentryrelationshipObservation.Values = GetAnyList(_ActentryrelationshipObservation.getValues());

                                    		if(ActentryrelationshipObservation.Values[0].CD.OriginalText.Reference.TEL_URL != null &amp;&amp; ActentryrelationshipObservation.Values[0].CD.OriginalText.Reference.TEL_URL != undefined){
										var _referenceValueForCode = ActentryrelationshipObservation.Values[0].CD.OriginalText.Reference.TEL_URL.Value;
										ActentryrelationshipObservation.Values[0].CD.OriginalText.Reference.TEL_URL.Value = GetValueFromTable(_problemText,_referenceValueForCode);
									}
                                    		ActentryrelationshipObservation.Authors  = GetAuthorList(_ActentryrelationshipObservation.getAuthors());
                                    		ActentryrelationshipObservation.StatusCode = GetCS(_ActentryrelationshipObservation.getStatusCode());
                                    		ActentryrelationshipObservation.Code = GetCD(_ActentryrelationshipObservation.getCode());
                                    		ActentryrelationshipObservation.EffectiveTime = GetIVL_TS(_ActentryrelationshipObservation.getEffectiveTime());
                                    		ActentryrelationshipObservation.ClassCode = GetVocabInfo(_ActentryrelationshipObservation.getClassCode());
                                    		ActentryrelationshipObservation.MoodCode = GetVocabInfo(_ActentryrelationshipObservation.getMoodCode());

                                    		/// Start
										var _ActentryrelationshipObservationentryrelationships = _ActentryrelationshipObservation.getEntryRelationships();
                        						var ActentryrelationshipObservationentryrelationships = [];

                        						if (_ActentryrelationshipObservationentryrelationships != null) {
			                            			var _ActentryrelationshipObservationentryrelationshipsSize = _ActentryrelationshipObservationentryrelationships.size();
               			             			var _ActentryrelationshipObservationentryrelationshipsCount = 0;
                            						for (_ActentryrelationshipObservationentryrelationshipsCount = 0; _ActentryrelationshipObservationentryrelationshipsCount &lt; _ActentryrelationshipObservationentryrelationshipsSize; _ActentryrelationshipObservationentryrelationshipsCount++) {
                                					var ActentryrelationshipObservationentryrelationship = {};
                                					var _ActentryrelationshipObservationentryrelationship = _ActentryrelationshipObservationentryrelationships.get(_ActentryrelationshipObservationentryrelationshipsCount);
                                					var _ActentryrelationshipObservationentryrelationshipObservation = _ActentryrelationshipObservationentryrelationship.getObservation();
                                					if (_ActentryrelationshipObservationentryrelationshipObservation != null) {
                                    					var ActentryrelationshipObservationentryrelationshipObservation = {};
			                                    		ActentryrelationshipObservationentryrelationshipObservation.Ids = GetIIList(_ActentryrelationshipObservationentryrelationshipObservation.getIds());
			                                    		ActentryrelationshipObservationentryrelationshipObservation.Values = GetAnyList(_ActentryrelationshipObservationentryrelationshipObservation.getValues());
			                                    		ActentryrelationshipObservationentryrelationshipObservation.Authors  = GetAuthorList(_ActentryrelationshipObservationentryrelationshipObservation.getAuthors());
			                                    		ActentryrelationshipObservationentryrelationshipObservation.Code = GetCD(_ActentryrelationshipObservationentryrelationshipObservation.getCode());
			                                    		ActentryrelationshipObservationentryrelationshipObservation.StatusCode = GetCS(_ActentryrelationshipObservationentryrelationshipObservation.getStatusCode());
			                                    		ActentryrelationshipObservationentryrelationshipObservation.EffectiveTime = GetIVL_TS(_ActentryrelationshipObservationentryrelationshipObservation.getEffectiveTime());
			                                    		ActentryrelationshipObservationentryrelationshipObservation.ClassCode = GetVocabInfo(_ActentryrelationshipObservationentryrelationshipObservation.getClassCode());
			                                    		ActentryrelationshipObservationentryrelationshipObservation.MoodCode = GetVocabInfo(_ActentryrelationshipObservationentryrelationshipObservation.getMoodCode());
			
			                                    		ActentryrelationshipObservationentryrelationship.Observation = ActentryrelationshipObservationentryrelationshipObservation;
                                						}
                                						ActentryrelationshipObservationentryrelationship.TypeCode = GetVocabInfo(_Actentryrelationship.getTypeCode());
                                						ActentryrelationshipObservationentryrelationships.push(ActentryrelationshipObservationentryrelationship);
                            						}
                        						}
                                    		// End
                                    		ActentryrelationshipObservation.EntryRelationships = ActentryrelationshipObservationentryrelationships;
                                    		Actentryrelationship.Observation = ActentryrelationshipObservation;
                                		}

                                		var _ActentryrelationshipEncounter=_Actentryrelationship.getEncounter();
											if(_ActentryrelationshipEncounter!=null)
											{
												var ActentryrelationshipEncounter = {};
												ActentryrelationshipEncounter.MoodCode = GetVocabInfo(_ActentryrelationshipEncounter.getMoodCode());
												ActentryrelationshipEncounter.Ids = GetIIList(_ActentryrelationshipEncounter.getIds());
												ActentryrelationshipEncounter.Code = GetCD(_ActentryrelationshipEncounter.getCode());
												Actentryrelationship.encounter = ActentryrelationshipEncounter;
											}
                                	Actentryrelationship.TypeCode = GetVocabInfo(_Actentryrelationship.getTypeCode());
                                	Actentryrelationships.push(Actentryrelationship);
                            }
                        }

                         	act.EntryRelationships = Actentryrelationships;
                    	}
                    	entry.Act = act;
                         entry.TypeCode = GetVocabInfo(_entry.getTypeCode());
                	}

        entries.push(entry);
            }
        }
    }
    
    section.Entries = entries;
    section.ClassCode = GetVocabInfo(problemSection.getClassCode());
    section.MoodCode = GetVocabInfo(problemSection.getMoodCode());
}

channelMap.put(&apos;Problemsection&apos;, JSON.stringify(section));

problemSection = null;
_problemText = null;</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
      </elements>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64">PGNsaW5pY2FsRG9jdW1lbnQ+PC9jbGluaWNhbERvY3VtZW50Pg==</outboundTemplate>
      <inboundDataType>HL7V3</inboundDataType>
      <outboundDataType>HL7V3</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.12.0">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.12.0">
          <stripNamespaces>false</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.12.0">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.12.0">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.12.0">
          <stripNamespaces>false</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.12.0">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.12.0">
      <elements/>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.12.0">
      <metaDataId>1</metaDataId>
      <name>Destination 1</name>
      <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.12.0">
        <pluginProperties/>
        <destinationConnectorProperties version="3.12.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <channelId>none</channelId>
        <channelTemplate>${message.encodedData}</channelTemplate>
        <mapVariables/>
      </properties>
      <transformer version="3.12.0">
        <elements>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
            <sequenceNumber>0</sequenceNumber>
            <enabled>true</enabled>
            <script>//logger.info(&apos;problem Section-&gt;Start:&apos;+DateUtil.getCurrentDate(&apos;yyyyMMddhhmmss&apos;));
if($(&apos;Problemsection&apos;).length()&gt;2)
{

ConditionBundle($(&apos;Problemsection&apos;),sourceMap.get(&apos;problemText&apos;),$(&apos;patientid&apos;),sourceMap.get(&apos;bundleid&apos;));


}

channelMap.remove($(&apos;Problemsection&apos;));

//logger.info(&apos;problem Section-&gt;End:&apos;+DateUtil.getCurrentDate(&apos;yyyyMMddhhmmss&apos;));</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        </elements>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>HL7V3</inboundDataType>
        <outboundDataType>HL7V3</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.12.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.12.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.12.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.12.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.12.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.12.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.12.0">
        <elements/>
        <inboundDataType>HL7V3</inboundDataType>
        <outboundDataType>HL7V3</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.12.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.12.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.12.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.12.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.12.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.12.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.12.0">
        <elements/>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

org.openhealthtools.mdht.uml.cda.ccd.CCDPackage.eINSTANCE.eClass();

return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.12.0">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>PRODUCTION</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>CMFID</name>
        <type>STRING</type>
        <mappingName>cmfid</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.12.0">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1675707635574</time>
        <timezone>Asia/Calcutta</timezone>
      </lastModified>
      <pruningSettings>
        <archiveEnabled>true</archiveEnabled>
        <pruneErroredMessages>false</pruneErroredMessages>
      </pruningSettings>
    </metadata>
  </exportData>
</channel>