<codeTemplate version="3.12.0">
  <id>d0b0f04e-5478-4e70-988b-00e67434834a</id>
  <name>ConditionResource</name>
  <revision>36</revision>
  <lastModified>
    <time>1671644618775</time>
    <timezone>Asia/Calcutta</timezone>
  </lastModified>
  <contextSet>
    <delegate>
      <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
      <contextType>DESTINATION_DISPATCHER</contextType>
      <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
      <contextType>SOURCE_RECEIVER</contextType>
      <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
    </delegate>
  </contextSet>
  <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
    <type>FUNCTION</type>
    <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
function ConditionResource(arg1,txt,patientid) 
{
    importPackage(org.hl7.fhir.r4.model);
    var condition = new org.hl7.fhir.r4.model.Condition();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  
    

    if(arg1.hasOwnProperty(&apos;Informants&apos;))
    {
        if(arg1.Informants.length&gt;0)
        {
            var tempasserter=AuthortoPractictionerRole(arg1.Informants[0].AssignedEntity);
            if(tempasserter!= undefined)
            {
                condition.addContained(tempasserter);    
                condition.setAsserter(new Reference().setReference(&apos;#&apos;+new Resource(tempasserter.getId())));
            }

            var tempasserterperson=AuthortoPractictioner(arg1.Informants[0].AssignedEntity);
            if(tempasserterperson!= undefined)
            {
                condition.addContained(tempasserterperson);
            }
                   
            var tempasserterorg= AuthortoOrganization(arg1.Informants[0].AssignedEntity.Organizations[0]);
            if(tempasserterorg!= undefined)
            {
                condition.addContained(tempasserterorg);
            }   
        }

    }

    if(arg1.hasOwnProperty(&apos;Authors&apos;))
    {
    	if(arg1.Authors[0].Time.Value!=&apos;&apos;)
	   	{
	    	condition.setRecordedDateElement(new DateTimeType(formatdate(arg1.Authors[0].Time.Value)))
	   	}
	    
	    /Author Block Start/
	   	var temprecorder=AuthortoPractictionerRole(arg1.Authors[0].AssignedAuthor);
	   	if(temprecorder!= undefined)
	   	{
	    	condition.addContained(temprecorder);    
	      	condition.setRecorder(new Reference().setReference(&apos;#&apos;+new Resource(temprecorder.getId())));
	   	}


	   	var temprecorderperson=AuthortoPractictioner(arg1.Authors[0].AssignedAuthor);
	   	if(temprecorderperson!= undefined)
	   	{
	    	condition.addContained(temprecorderperson);
	   	}
	           
	    var temprecorderorg= AuthortoOrganization(arg1.Authors[0].AssignedAuthor.Organization);
	   	if(temprecorderorg!= undefined)
	   	{
	    	condition.addContained(temprecorderorg);
	   	}

	   /Author Block End/	
    }
    
    

    //looping through Entry Relationships
    for(_per=0;_per&lt;arg1.EntryRelationships.length;_per++)
    {
        var temp_er=arg1.EntryRelationships[_per];
        
        if(temp_er.TypeCode.Name==&apos;SUBJ&apos; &amp;&amp; temp_er.hasOwnProperty(&apos;Observation&apos;))
        {
            for(var _id=0;_id&lt;temp_er.Observation.Ids.length;_id++)
            {
                if(temp_er.Observation.Ids[_id].Extension!=&apos;&apos;)
                {
                    condition.addIdentifier().setSystem(GetSystem(temp_er.Observation.Ids[_id].Root)).setValue(temp_er.Observation.Ids[_id].Extension);   
                }
            
            }
            
        	if(txt!=&apos;&apos; &amp;&amp; GetNarrative(txt)!=null)
            {
                condition.setText(GetNarrative(txt))
            }

            condition.setSubject(new Reference().setReference(patientid));      
            
            var conditioncategory=GetMergedCodeList(temp_er.Observation.Code);
          
            for(var _cat=0;_cat&lt;conditioncategory.length;_cat++)
            {
                condition.addCategory(CodeableConcept(GetCoding(conditioncategory[_cat])));
            } 
            
            var encdate=GetEffectiveTimeInfo(temp_er.Observation);
    
            if(encdate.startdatetime!=&apos;&apos;)
            {
                condition.setOnset(new DateTimeType(formatdate(encdate.startdatetime)));
            }

            if(encdate.enddatetime!=&apos;&apos;)
            {
                condition.setAbatement(new DateTimeType(formatdate(encdate.enddatetime)));
                condition.setClinicalStatus(CodeableConcept(Coding(&apos;http://terminology.hl7.org/CodeSystem/condition-clinical&apos;,&apos;resolved&apos;,&apos;Resolved&apos;)));
            }        
        
            var conditioncode=GetMergedCodeList(temp_er.Observation.Values[0].CD);
            //logger.info(&apos;ConditionResource:conditioncode-&gt;&apos;+GetMergedCodeList(temp_er.Observation.Values[0].CD))
            if(conditioncode.length&gt;0)
            {
                condition.setCode(CodeableConcept(GetCoding(conditioncode[0])));
            }

            //loop for Entryrelationship within observation
            for(var _o_er=0;_o_er&lt;temp_er.Observation.EntryRelationships.length&gt;0;_o_er++)
            {
                var temp_er_er=temp_er.Observation.EntryRelationships[_o_er];

                if(temp_er_er.hasOwnProperty(&apos;Observation&apos;))
                {
                    //start of clinicalstatus
                    if(temp_er_er.Observation.Code.Code==&apos;33999-4&apos; &amp;&amp; encdate.enddatetime==&apos;&apos;)
                    {
                        condition.setClinicalStatus(new CodeableConcept().setCoding(GetMappedCodingList(temp_er_er.Observation.Values[0].CD,MapConditionClinicalStatus)));
                  	}//end of clinicalstatus
        
        
                    // age at onset
                    if(temp_er_er.Observation.Code.Code==&apos;445518008&apos; || temp_er_er.Observation.Code.Code==&apos;397659008&apos;)
                    {
                        if(temp_er_er.Observation.Values[0].PQ.Value!=&apos;&apos;  &amp;&amp; encdate.startdatetime==&apos;&apos;)
                        {
                            condition.setOnset(new Age().setValue(temp_er_er.Observation.Values[0].PQ.Value).setCode(temp_er_er.Observation.Values[0].PQ.Unit));    
                        }
                        
                    }// end of OnsetAge
        

                    if(temp_er_er.Observation.Code.Code==&apos;225773000&apos;)
                    {
                        //start of severity
                        var severitylist=GetMergedCodeList(temp_er_er.Observation.Values[0].CD);
                        for(var _s=0;_s&lt;severitylist.length;_s++)
                        {
                            condition.setSeverity(CodeableConcept(GetCoding(severitylist[_s])))
                        }
                    }//end of severity
                }// end of temp_er_er.hasOwnProperty(&apos;Observation&apos;)
            }//end of temp_er_er for loop
        }//end of if loop 
    }//end of _per

    condition.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(condition))));
    //var oCondition=JSON.parse(parser.encodeResourceToString(condition));
    
   // logger.info(&apos;ConditionResource-&gt;&apos;+parser.encodeResourceToString(condition));
    if(countkey(parser.encodeResourceToString(condition))&gt;2)
    {
        return condition
    }

    //return oCondition;
}

        
    
</code>
  </properties>
</codeTemplate>