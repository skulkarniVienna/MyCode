<codeTemplate version="3.12.0">
  <id>6f0f3d3a-b4ac-487b-ad13-61d30b8a94af</id>
  <name>DeviceResource</name>
  <revision>12</revision>
  <lastModified>
    <time>1671800027513</time>
    <timezone>Asia/Calcutta</timezone>
  </lastModified>
  <contextSet>
    <delegate>
      <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
      <contextType>SOURCE_RECEIVER</contextType>
      <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
      <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
      <contextType>DESTINATION_DISPATCHER</contextType>
    </delegate>
  </contextSet>
  <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
    <type>FUNCTION</type>
    <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
function DeviceResource(arg1,txt,patientid)
{
    importPackage(org.hl7.fhir.r4.model);
    var device = new org.hl7.fhir.r4.model.Device();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  

    for(var _id=0;_id&lt;arg1.Ids.length;_id++)
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            device.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }  
    }

    if(txt!=&apos;&apos; &amp;&amp; GetNarrative(txt)!=null)
    {
        device.setText(GetNarrative(txt))
    }

    device.setStatus(Device.FHIRDeviceStatus.valueOf(MapDeviceStatus(arg1.StatusCode.Code)));
    device.setPatient(new Reference().setReference(patientid));  

    var tempdate=GetEffectiveTimeInfo(arg1);
    if(tempdate.enddatetime!=&apos;&apos;)
    {
        device.setExpirationDateElement(new DateTimeType(formatdate(tempdate.enddatetime))) 
    }

    if(arg1.Quantity.Value!=&apos;&apos;)
    {
        var quantity=new Quantity();
        quantity.setValue(arg1.Quantity.Value);
        if(arg1.Quantity.Unit!=&apos;&apos; &amp;&amp; arg1.Quantity.Unit!=&apos;1&apos;)
        {
            quantity.setUnit(arg1.Quantity.Unit)
        }

        device.addProperty(new org.hl7.fhir.r4.model.Device.DevicePropertyComponent().addValueQuantity(quantity));
    }
    
    for(var _p=0;_p&lt;arg1.Participants.length;_p++)
    {
        var tempparticipant=arg1.Participants[_p];
        if(tempparticipant.TypeCode.Name==&apos;PRD&apos; || tempparticipant.TypeCode.Name==&apos;DEV&apos;)
        {
            var devicelist=GetMergedCodeList(tempparticipant.ParticipantRole.Device.Code);
            for(var _d=0;_d&lt;devicelist.length;_d++)
            {
                var devicename=new org.hl7.fhir.r4.model.Device.DeviceDeviceNameComponent();
                devicename.setName(devicelist[_d].DisplayName);
                devicename.setType(Device.DeviceNameType.OTHER);
                device.addDeviceName(devicename);

            }

            if(tempparticipant.ParticipantRole.Entity.Desc.Text!=&apos;&apos; || tempparticipant.ParticipantRole.Entity.Desc.Reference.TEL_URL.Value!=&apos;&apos;)
            {
                device.setManufacturer(tempparticipant.ParticipantRole.Entity.Desc.Text!=&apos;&apos;?jsonencode(tempparticipant.ParticipantRole.Entity.Desc.Text.trim()):jsonencode(tempparticipant.ParticipantRole.Entity.Desc.Reference.TEL_URL.Value.trim()));
            }
        }
    }

    for(var _er1=0;_er1&lt;arg1.EntryRelationships.length;_er1++)
    {
        var er1=arg1.EntryRelationships[_er1];
        if(er1.hasOwnProperty(&apos;Act&apos;))
        {
            
            if(er1.Act.Text.Text!=&apos;&apos;)
            {
                device.addNote(new Annotation().setText(jsonencode(er1.Act.Text.Text.trim())));
            }
            else if(er1.Act.Text.hasOwnProperty(&apos;Reference&apos;))
            {
                if(er1.Act.Text.Reference.TEL_URL.Value!=&apos;&apos;)
                {
                    device.addNote(new Annotation().setText(jsonencode(er1.Act.Text.Reference.TEL_URL.Value.trim())));
                }
            }
        }
    }

    device.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(device))));
 //   var oDevice=JSON.parse(parser.encodeResourceToString(device));
   // logger.info(&apos;DeviceResource-&gt;&apos;+parser.encodeResourceToString(device));

    return device;

}</code>
  </properties>
</codeTemplate>