<channel version="3.12.0">
  <id>8199c8b2-befa-4924-a390-526c4f3b1d31</id>
  <nextMetaDataId>2</nextMetaDataId>
  <name>CCD Parser - Result</name>
  <description></description>
  <revision>17</revision>
  <sourceConnector version="3.12.0">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.12.0">
      <pluginProperties/>
      <sourceConnectorProperties version="3.12.0">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
    </properties>
    <transformer version="3.12.0">
      <elements>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
          <name>Result</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <script>var resultSection = sourceMap.get(&apos;resultSection&apos;);
var _resultText = sourceMap.get(&apos;resultText&apos;);



var section = {};
if(resultSection != null) {
   section.Code = GetCE(resultSection.getCode());
   section.Title = GetST(resultSection.getTitle());

   var _entries = resultSection.getEntries();
   var entries = [];
   if(_entries != null) {
      var _entriesSize = _entries.size();
      var _i = 0;
      if(_entriesSize &gt; 0) {
         for(_i = 0;_i &lt; _entriesSize ; _i++) {
         var entry = {};
         var _entry = _entries.get(_i);

            if(_entry != null) 
            {
               var organizer = {};
               var _organizer = _entry.getOrganizer();
               if(_organizer != null) {
                  organizer.Ids = GetIIList(_organizer.getIds());
                  organizer.Code = GetCD(_organizer.getCode());
                  organizer.EffectiveTime = GetIVL_TS(_organizer.getEffectiveTime());
                  organizer.StatusCode = GetCS(_organizer.getStatusCode());
                  organizer.Authors = GetAuthorList(_organizer.getAuthors());
                  organizer.Specimens = GetSpecimenList(_organizer.getSpecimens());
                  organizer.Informants = GetInformant12List(_organizer.getInformants());
                  var components = [];
                  var _components = _organizer.getComponents();
                  if(_components != null) {
                     var _componentsSize = _components.size();
                     if(_componentsSize &gt; 1000){
                        _componentsSize = 1000;
                     }
                     var _compCount = 0;
                     for(_compCount = 0;_compCount &lt; _componentsSize ; _compCount++) {
                        var component = {};
                        var _component = _components.get(_compCount);
                        var _componentObservation = _component.getObservation();
                        if(_componentObservation != null) {
                           var componentObservation = {};
                           componentObservation.Ids = GetIIList(_componentObservation.getIds());
                           componentObservation.Code = GetCD(_componentObservation.getCode());

                           if(componentObservation.Code.OriginalText.Reference.TEL_URL!=null &amp;&amp; componentObservation.Code.OriginalText.Reference.TEL_URL!== undefined)
                           {
                              var _referenceValueForCode = componentObservation.Code.OriginalText.Reference.TEL_URL.Value;
                              componentObservation.Code.OriginalText.Reference.TEL_URL.Value = GetValueFromTable(_resultText,_referenceValueForCode); 
                           }
                           componentObservation.Authors = GetAuthorList(_componentObservation.getAuthors());
                           componentObservation.Values = GetAnyList(_componentObservation.getValues());
                           componentObservation.StatusCode = GetCS(_componentObservation.getStatusCode());
                           componentObservation.EffectiveTime = GetIVL_TS(_componentObservation.getEffectiveTime());
                           componentObservation.InterpretationCode = GetCEList(_componentObservation.getInterpretationCodes());
                           componentObservation.RefrenceRanges = GetReferenceRangeList(_componentObservation.getReferenceRanges());
                           componentObservation.Informants = GetInformant12List(_componentObservation.getInformants());
                           
                           var _entryrelationships = _componentObservation.getEntryRelationships();
                           var entryrelationships = [];
                           if(_entryrelationships != null) {
                              var _entryrelationshipsSize = _entryrelationships.size();
                     
                              var _entryRelationshipCount = 0;
                              for(_entryRelationshipCount = 0;_entryRelationshipCount &lt; _entryrelationshipsSize ; _entryRelationshipCount++) 
                              {
                                 var entryrelationship = {};
                                 var _entryrelationship = _entryrelationships.get(_entryRelationshipCount);
                                 var _entryrelationshipObservation = _entryrelationship.getObservation();
                                 if(_entryrelationshipObservation != null) {
                                    var entryrelationshipObservation = {};
                                    entryrelationshipObservation.Ids = GetIIList(_entryrelationshipObservation.getIds());
                                    entryrelationshipObservation.Code = GetCD(_entryrelationshipObservation.getCode());
                                    entryrelationshipObservation.Values = GetAnyList(_entryrelationshipObservation.getValues());
                                    entryrelationshipObservation.StatusCode = GetCS(_entryrelationshipObservation.getStatusCode());
                                    entryrelationshipObservation.EffectiveTime = GetIVL_TS(_entryrelationshipObservation.getEffectiveTime());
                                    entryrelationshipObservation.InterpretationCode = GetCEList(_entryrelationshipObservation.getInterpretationCodes());
                                    entryrelationshipObservation.RefrenceRanges = GetReferenceRangeList(_entryrelationshipObservation.getReferenceRanges());

                                    
                                    var _entryrelationshipObservationentryrelationships = _entryrelationshipObservation.getEntryRelationships();
                                          var EntryrelationshipObservationentryrelationships = [];

                                          if (_entryrelationshipObservationentryrelationships != null) {
                                             var _entryrelationshipObservationentryrelationshipsSize = _entryrelationshipObservationentryrelationships.size();
                                       var _count = 0;
                                             for (_count = 0; _count &lt; _entryrelationshipObservationentryrelationshipsSize; _count++) {
                                          var EntryrelationshipObservationentryrelationship = {};
                                          var _entryrelationshipObservationentryrelationship = _entryrelationshipObservationentryrelationships.get(_count);
                                          var _entryrelationshipObservationentryrelationshipObservation = _entryrelationshipObservationentryrelationship.getObservation();
                                          if (_entryrelationshipObservationentryrelationshipObservation != null) {
                                             var EntryrelationshipObservationentryrelationshipObservation = {};
                                             EntryrelationshipObservationentryrelationshipObservation.Ids = GetIIList(_entryrelationshipObservationentryrelationshipObservation.getIds());
                                             EntryrelationshipObservationentryrelationshipObservation.Values = GetAnyList(_entryrelationshipObservationentryrelationshipObservation.getValues());
                                             EntryrelationshipObservationentryrelationshipObservation.Authors  = GetAuthorList(_entryrelationshipObservationentryrelationshipObservation.getAuthors());
                                             EntryrelationshipObservationentryrelationshipObservation.Code = GetCD(_entryrelationshipObservationentryrelationshipObservation.getCode());
                                             EntryrelationshipObservationentryrelationshipObservation.EffectiveTime = GetIVL_TS(_entryrelationshipObservationentryrelationshipObservation.getEffectiveTime());
                                             EntryrelationshipObservationentryrelationshipObservation.ClassCode = GetVocabInfo(_entryrelationshipObservationentryrelationshipObservation.getClassCode());
                                             EntryrelationshipObservationentryrelationshipObservation.MoodCode = GetVocabInfo(_entryrelationshipObservationentryrelationshipObservation.getMoodCode());
                                             EntryrelationshipObservationentryrelationshipObservation.InterpretationCode = GetCEList(_entryrelationshipObservationentryrelationshipObservation.getInterpretationCodes());
                                             EntryrelationshipObservationentryrelationshipObservation.RefrenceRanges = GetReferenceRangeList(_entryrelationshipObservationentryrelationshipObservation.getReferenceRanges());
                                             
                                             EntryrelationshipObservationentryrelationship.Observation = EntryrelationshipObservationentryrelationshipObservation;
                                             }
                                             EntryrelationshipObservationentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipObservationentryrelationships.getTypeCode());
                                             EntryrelationshipObservationentryrelationships.push(EntryrelationshipObservationentryrelationship);
                                             }
                                          }
                                    
                                    entryrelationshipObservation.EntryRelationships = EntryrelationshipObservationentryrelationships;
                                    entryrelationship.Observation = entryrelationshipObservation;
                                 }
                                 
                                 

                                 var _entryrelationshipAct = _entryrelationship.getAct();
                                 if(_entryrelationshipAct!=null)
                                 {
                                    var entryrelationshipAct = {};
                                    entryrelationshipAct.Code = GetCD(_entryrelationshipAct.getCode());

                                    if(entryrelationshipAct.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; entryrelationshipAct.Code.OriginalText.Reference.TEL_URL != undefined)
                                    {
                                       var _referenceValueForCode = entryrelationshipAct.Code.OriginalText.Reference.TEL_URL.Value;
                                       entryrelationshipAct.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_resultText,_referenceValueForCode);
                                    }
                                    
                                    entryrelationshipAct.Text = GetED(_entryrelationshipAct.getText());
                                    

                                    if(entryrelationshipAct.Text.Reference.TEL_URL != null &amp;&amp; entryrelationshipAct.Text.Reference.TEL_URL != undefined)
                                    {
                                       var _referenceValueForText = entryrelationshipAct.Text.Reference.TEL_URL.Value;
                                      
                                       entryrelationshipAct.Text.Reference.TEL_URL.Value = GetValuebyId(_resultText,_referenceValueForText);
                                    }  

                                    entryrelationshipAct.ClassCode = GetVocabInfo(_entryrelationshipAct.getClassCode());
                                    entryrelationshipAct.MoodCode = GetVocabInfo(_entryrelationshipAct.getMoodCode());
                                    entryrelationship.Act = entryrelationshipAct;
                                 }


                                 var _entryrelationshipencounter = _entryrelationship.getEncounter();
                                                
                                 if (_entryrelationshipencounter != null)
                                 {
                                    var entryrelationshipEncounter = {};
                                    entryrelationshipEncounter.MoodCode = GetVocabInfo(_entryrelationshipencounter.getMoodCode());
                                    entryrelationshipEncounter.Ids = GetIIList(_entryrelationshipencounter.getIds());
                                    entryrelationshipEncounter.Code = GetCD(_entryrelationshipencounter.getCode());
                                    entryrelationship.encounter = entryrelationshipEncounter;
                                 }

                                 entryrelationship.TypeCode = GetVocabInfo(_entryrelationship.getTypeCode());
                                 entryrelationships.push(entryrelationship);

                              }
                           }

                           componentObservation.EntryRelationships = entryrelationships;
                           component.Observation = componentObservation;
                        }
                        components.push(component);
                     }
                  }
                  organizer.Components = components;
                  entry.Organizer = organizer; 
               }
               

               var procedure = {};
               var _procedure = _entry.getProcedure();
               if(_procedure != null)
               {
                           procedure.Ids = GetIIList(_procedure.getIds());
                           procedure.Code = GetCD(_procedure.getCode());

                           if(procedure.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; procedure.Code.OriginalText.Reference.TEL_URL != undefined){
                              var _referenceValueForCode = procedure.Code.OriginalText.Reference.TEL_URL.Value;
                              procedure.Code.OriginalText.Reference.TEL_URL.Value = GetValueFromTable(_resultText,_referenceValueForCode);
                           }

                           procedure.StatusCode = GetCS(_procedure.getStatusCode());
                           procedure.EffectiveTime = GetIVL_TS(_procedure.getEffectiveTime());
                           procedure.TargetSiteCodes = GetCDList(_procedure.getTargetSiteCodes());
                           procedure.PriorityCode = GetCE(_procedure.getPriorityCode());
                           procedure.MethodCodes = GetCEList(_procedure.getMethodCodes());
                           procedure.Authors = GetAuthorList(_procedure.getAuthors());
                           procedure.Participants = GetParticipant2List(_procedure.getParticipants());
                           procedure.Specimens = GetSpecimenList(_procedure.getSpecimens());
                           procedure.Performers = GetPerformer2List(_procedure.getPerformers());
                           
                           var _entryrelationships = _procedure.getEntryRelationships();
                           var entryrelationships = [];
                           if(_entryrelationships != null) {
                              var _entryrelationshipsSize = _entryrelationships.size();
                     
                              var _entryRelationshipCount = 0;
                              for(_entryRelationshipCount = 0;_entryRelationshipCount &lt; _entryrelationshipsSize ; _entryRelationshipCount++) {
                                 var entryrelationship = {};
                                 var _entryrelationship = _entryrelationships.get(_entryRelationshipCount);
                                 var _entryrelationshipObservation = _entryrelationship.getObservation();
                                 if(_entryrelationshipObservation != null) {
                                    var entryrelationshipObservation = {};
                                    entryrelationshipObservation.TemplateIds = GetIIList(_entryrelationshipObservation.getTemplateIds());
                                    entryrelationshipObservation.Ids = GetIIList(_entryrelationshipObservation.getIds());
                                    entryrelationshipObservation.Code = GetCE(_entryrelationshipObservation.getCode());
                                    entryrelationshipObservation.Values = GetAnyList(_entryrelationshipObservation.getValues());
                                    entryrelationshipObservation.StatusCode = GetCS(_entryrelationshipObservation.getStatusCode());
                                    entryrelationshipObservation.EffectiveTime = GetIVL_TS(_entryrelationshipObservation.getEffectiveTime());

                                    var _entryrelationshipObservationentryrelationships = _entryrelationshipObservation.getEntryRelationships();
                                          var EntryrelationshipObservationentryrelationships = [];

                                          if (_entryrelationshipObservationentryrelationships != null) {
                                             var _entryrelationshipObservationentryrelationshipsSize = _entryrelationshipObservationentryrelationships.size();
                                       var _count = 0;
                                             for (_count = 0; _count &lt; _entryrelationshipObservationentryrelationshipsSize; _count++) {
                                          var EntryrelationshipObservationentryrelationship = {};
                                          var _entryrelationshipObservationentryrelationship = _entryrelationshipObservationentryrelationships.get(_count);
                                          var _entryrelationshipObservationentryrelationshipObservation = _entryrelationshipObservationentryrelationship.getObservation();
                                          if (_entryrelationshipObservationentryrelationshipObservation != null) {
                                             var EntryrelationshipObservationentryrelationshipObservation = {};
                                             EntryrelationshipObservationentryrelationshipObservation.TemplateIds = GetIIList(_entryrelationshipObservationentryrelationshipObservation.getTemplateIds());
                                             EntryrelationshipObservationentryrelationshipObservation.Ids = GetIIList(_entryrelationshipObservationentryrelationshipObservation.getIds());
                                             EntryrelationshipObservationentryrelationshipObservation.Values = GetAnyList(_entryrelationshipObservationentryrelationshipObservation.getValues());
                                             EntryrelationshipObservationentryrelationshipObservation.Authors  = GetAuthorList(_entryrelationshipObservationentryrelationshipObservation.getAuthors());
                                             EntryrelationshipObservationentryrelationshipObservation.Code = GetCE(_entryrelationshipObservationentryrelationshipObservation.getCode());
                                             EntryrelationshipObservationentryrelationshipObservation.EffectiveTime = GetIVL_TS(_entryrelationshipObservationentryrelationshipObservation.getEffectiveTime());
                                             EntryrelationshipObservationentryrelationshipObservation.ClassCode = GetVocabInfo(_entryrelationshipObservationentryrelationshipObservation.getClassCode());
                                             EntryrelationshipObservationentryrelationshipObservation.MoodCode = GetVocabInfo(_entryrelationshipObservationentryrelationshipObservation.getMoodCode());
            
                                             EntryrelationshipObservationentryrelationship.Observation = EntryrelationshipObservationentryrelationshipObservation;
                                             }
                                             EntryrelationshipObservationentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipObservationentryrelationships.getTypeCode());
                                             EntryrelationshipObservationentryrelationships.push(EntryrelationshipObservationentryrelationship);
                                             }
                                          }
                                                entryrelationshipObservation.EntryRelationships = EntryrelationshipObservationentryrelationships;
                                    entryrelationship.Observation = entryrelationshipObservation;
                                 }

                                 var _entryrelationshipEncounter = _entryrelationship.getEncounter();
                                 if(_entryrelationshipEncounter != null) {
                                    var entryrelationshipEncounter = {};
                                    entryrelationshipEncounter.Ids = GetIIList(_entryrelationshipEncounter.getIds());
                                    entryrelationshipEncounter.Code = GetCE(_entryrelationshipEncounter.getCode());
                                    
                                    var _entryrelationshipEncounterentryrelationships = _entryrelationshipEncounter.getEntryRelationships();
                                          var EntryrelationshipEncounterentryrelationships = [];

                                          if (_entryrelationshipEncounterentryrelationships != null) {
                                             var _entryrelationshipEncounterentryrelationshipsSize = _entryrelationshipEncounterentryrelationships.size();
                                       var _count = 0;
                                             for (_count = 0; _count &lt; _entryrelationshipEncounterentryrelationshipsSize; _count++) {
                                          var EntryrelationshipEncounterentryrelationship = {};
                                          var _entryrelationshipEncounterentryrelationship = _entryrelationshipEncounterentryrelationships.get(_count);
                                          var _entryrelationshipEncounterentryrelationshipEncounter = _entryrelationshipEncounterentryrelationship.getEncounter();
                                          if (_entryrelationshipEncounterentryrelationshipEncounter != null) {
                                             var EntryrelationshipEncounterentryrelationshipEncounter = {};
                                             EntryrelationshipEncounterentryrelationshipEncounter.Ids = GetIIList(_entryrelationshipEncounterentryrelationshipEncounter.getIds());
                                             EntryrelationshipEncounterentryrelationshipEncounter.Values = GetAnyList(_entryrelationshipEncounterentryrelationshipEncounter.getValues());
                                             EntryrelationshipEncounterentryrelationshipEncounter.ClassCode = GetVocabInfo(_entryrelationshipEncounterentryrelationshipEncounter.getClassCode());
                                             EntryrelationshipEncounterentryrelationshipEncounter.MoodCode = GetVocabInfo(_entryrelationshipEncounterentryrelationshipEncounter.getMoodCode());
            
                                             EntryrelationshipEncounterentryrelationship.Encounter = EntryrelationshipEncounterentryrelationshipEncounter;
                                             }
                                             EntryrelationshipEncounterentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipEncounterentryrelationships.getTypeCode());
                                             EntryrelationshipEncounterentryrelationships.push(EntryrelationshipEncounterentryrelationship);
                                             }
                                          }
                                                entryrelationshipEncounter.EntryRelationships = EntryrelationshipEncounterentryrelationships;
                                    entryrelationship.Encounter = entryrelationshipEncounter;
                                 }

                                 
                                 var _entryrelationshipAct = _entryrelationship.getAct();
                                 if(_entryrelationshipAct != null) {
                                    var entryrelationshipAct = {};
                                    entryrelationshipAct.Ids = GetIIList(_entryrelationshipAct.getIds());
                                    entryrelationshipAct.Code = GetCE(_entryrelationshipAct.getCode());
                                    entryrelationshipAct.Text = GetED(_entryrelationshipAct.getText());
                                    
                                    var _entryrelationshipActentryrelationships = _entryrelationshipAct.getEntryRelationships();
                                          var EntryrelationshipActentryrelationships = [];

                                          if (_entryrelationshipActentryrelationships != null) {
                                             var _entryrelationshipActentryrelationshipsSize = _entryrelationshipActentryrelationships.size();
                                       var _count = 0;
                                             for (_count = 0; _count &lt; _entryrelationshipActentryrelationshipsSize; _count++) {
                                          var EntryrelationshipActentryrelationship = {};
                                          var _entryrelationshipActentryrelationship = _entryrelationshipActentryrelationships.get(_count);
                                          var _entryrelationshipActentryrelationshipAct = _entryrelationshipActentryrelationship.getAct();
                                          if (_entryrelationshipActentryrelationshipAct != null) {
                                             var EntryrelationshipActentryrelationshipAct = {};
                                             EntryrelationshipActentryrelationshipAct.Ids = GetIIList(_entryrelationshipActentryrelationshipAct.getIds());
                                             EntryrelationshipActentryrelationshipAct.Text = GetED(_entryrelationshipActentryrelationshipAct.getText());
                                             EntryrelationshipActentryrelationshipAct.ClassCode = GetVocabInfo(_entryrelationshipActentryrelationshipAct.getClassCode());
                                             EntryrelationshipActentryrelationshipAct.MoodCode = GetVocabInfo(_entryrelationshipActentryrelationshipAct.getMoodCode());
            
                                             EntryrelationshipActentryrelationship.Act = EntryrelationshipActentryrelationshipAct;
                                             }
                                             EntryrelationshipActentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipActentryrelationships.getTypeCode());
                                             EntryrelationshipActentryrelationships.push(EntryrelationshipActentryrelationship);
                                             }
                                          }
                                                entryrelationshipAct.EntryRelationships = EntryrelationshipActentryrelationships;
                                    entryrelationship.Act = entryrelationshipAct;
                                 }
                                 
                                 var _entryrelationshipsubstanceAdministration = _entryrelationship.getSubstanceAdministration();
                                 if(_entryrelationshipsubstanceAdministration != null) {
                                    var entryrelationshipsubstanceAdministration = {};
                                    entryrelationshipsubstanceAdministration.Ids = GetIIList(_entryrelationshipsubstanceAdministration.getIds());
                                    entryrelationshipsubstanceAdministration.Code = GetCE(_entryrelationshipsubstanceAdministration.getCode());
                                    entryrelationshipsubstanceAdministration.Text = GetED(_entryrelationshipsubstanceAdministration.getText());
                                    
                                    var _entryrelationshipsubstanceAdministrationentryrelationships = _entryrelationshipsubstanceAdministration.getEntryRelationships();
                                    var EntryrelationshipsubstanceAdministrationentryrelationships = [];

                                       if (_entryrelationshipsubstanceAdministrationentryrelationships != null) {
                                       var _entryrelationshipsubstanceAdministrationentryrelationshipsSize = _entryrelationshipsubstanceAdministrationentryrelationships.size();
                                    var _count = 0;
                                          for (_count = 0; _count &lt; _entryrelationshipsubstanceAdministrationentryrelationshipsSize; _count++) {
                                       var EntryrelationshipsubstanceAdministrationentryrelationship = {};
                                       var _entryrelationshipsubstanceAdministrationentryrelationship = _entryrelationshipsubstanceAdministrationentryrelationships.get(_count);
                                       var _entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration = _entryrelationshipsubstanceAdministrationentryrelationship.getsubstanceAdministration();
                                       if (_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration != null) {
                                          var EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration = {};
                                          EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Ids = GetIIList(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getIds());
                                          EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Code = GetCE(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getCode());
                                          EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Text = GetED(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getText());
                                                      
                                          EntryrelationshipsubstanceAdministrationentryrelationship.substanceAdministration = EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration;
                                       }
                                       EntryrelationshipsubstanceAdministrationentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipObservationentryrelationships.getTypeCode());
                                       EntryrelationshipsubstanceAdministrationentryrelationships.push(EntryrelationshipsubstanceAdministrationentryrelationship);
                                          }
                                       }
                                    
                                       entryrelationshipsubstanceAdministration.EntryRelationships = EntryrelationshipsubstanceAdministrationentryrelationships;
                                       entryrelationship.substanceAdministration = entryrelationshipsubstanceAdministration;
                                 }

                                 entryrelationship.TypeCode = _entryrelationship.getTypeCode();
                                 entryrelationships.push(entryrelationship);
                              }
                           }

                           procedure.EntryRelationships = entryrelationships;
                           entry.Procedure = procedure;
               }
               
               
            }

            entries.push(entry);
            /*
            var resultentry={};
            resultentry.entry=entry;
            resultentry.bundleid=sourceMap.get(&apos;bundleid&apos;);
            resultentry.patientid=sourceMap.get(&apos;patientid&apos;);
            resultentry.code=section.Code;
            
            
            router.routeMessage(&apos;Result Entry Parser&apos;, JSON.stringify(resultentry));
            */
         }  
      } 
   }
   section.Entries = entries;
   
   section.ClassCode=GetVocabInfo(resultSection.getClassCode());
   section.MoodCode=GetVocabInfo(resultSection.getMoodCode());
}

channelMap.put(&apos;Resultsection&apos;,JSON.stringify(section));
resultSection=null;
_resultText=null;</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
      </elements>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64">PGNsaW5pY2FsRG9jdW1lbnQ+PC9jbGluaWNhbERvY3VtZW50Pg==</outboundTemplate>
      <inboundDataType>HL7V3</inboundDataType>
      <outboundDataType>HL7V3</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.12.0">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.12.0">
          <stripNamespaces>false</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.12.0">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.12.0">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.12.0">
          <stripNamespaces>false</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.12.0">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.12.0">
      <elements/>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.12.0">
      <metaDataId>1</metaDataId>
      <name>Destination 1</name>
      <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.12.0">
        <pluginProperties/>
        <destinationConnectorProperties version="3.12.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <channelId>none</channelId>
        <channelTemplate>${message.encodedData}</channelTemplate>
        <mapVariables/>
      </properties>
      <transformer version="3.12.0">
        <elements>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
            <sequenceNumber>0</sequenceNumber>
            <enabled>true</enabled>
            <script>//logger.info(&apos;Result Section-&gt;Start:&apos;+DateUtil.getCurrentDate(&apos;yyyyMMddhhmmss&apos;));
if($(&apos;Resultsection&apos;).length()&gt;2)
{
	ResultBundle($(&apos;Resultsection&apos;),sourceMap.get(&apos;resultText&apos;),sourceMap.get(&apos;patientid&apos;),sourceMap.get(&apos;bundleid&apos;));
	
}

//logger.info(&apos;Result Section-&gt;End:&apos;+DateUtil.getCurrentDate(&apos;yyyyMMddhhmmss&apos;));</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        </elements>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>HL7V3</inboundDataType>
        <outboundDataType>HL7V3</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.12.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.12.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.12.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.12.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.12.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.12.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.12.0">
        <elements/>
        <inboundDataType>HL7V3</inboundDataType>
        <outboundDataType>HL7V3</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.12.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.12.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.12.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.12.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.12.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.12.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.12.0">
        <elements/>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

org.openhealthtools.mdht.uml.cda.ccd.CCDPackage.eINSTANCE.eClass();

return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.12.0">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>RAW</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>CMFID</name>
        <type>STRING</type>
        <mappingName>cmfid</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.12.0">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1669215909724</time>
        <timezone>Asia/Calcutta</timezone>
      </lastModified>
      <pruningSettings>
        <archiveEnabled>true</archiveEnabled>
        <pruneErroredMessages>false</pruneErroredMessages>
      </pruningSettings>
    </metadata>
    <codeTemplateLibraries>
      <codeTemplateLibrary version="3.12.0">
        <id>9e687b52-d7c6-41bf-8ca7-80fd7b0998b8</id>
        <name>CCDA_Helper</name>
        <revision>27</revision>
        <lastModified>
          <time>1669130240356</time>
          <timezone>Asia/Calcutta</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>false</includeNewChannels>
        <enabledChannelIds>
          <string>40a447a8-89f7-494c-b224-5880c7e86c73</string>
          <string>617546b5-34e3-4e61-9b1d-5c40909c3787</string>
          <string>92472400-a82a-4805-b3fe-f92b5980aa2f</string>
          <string>b9b54c9b-eda4-43c9-8109-fa41bd6cc8fb</string>
          <string>601011b3-f0e9-4bbc-9cf4-dfa658c79e09</string>
          <string>abf8a28b-b96e-439d-ae18-e79e27a26915</string>
          <string>efd79df6-4275-42e1-b342-4c186eb0dccc</string>
          <string>dd76bbd8-85b9-4718-b8e2-bdcbb018a611</string>
          <string>264cf267-3368-4571-87d8-c0562c3a6912</string>
          <string>8199c8b2-befa-4924-a390-526c4f3b1d31</string>
          <string>cdc68cb2-21f4-447e-b7b9-a0d120a91aed</string>
        </enabledChannelIds>
        <disabledChannelIds>
          <string>41380607-1411-4b46-a8a7-460267132a58</string>
          <string>a8209ef7-0a7f-440b-9cdf-8cf0b7b1ab3d</string>
          <string>268c87ee-b6cc-435b-a498-3484197be2ca</string>
          <string>c51960a1-1265-4d64-8c3f-5db07bb89f7c</string>
          <string>e77c34d0-0846-4d33-8455-6032d1c8fbc8</string>
          <string>beba7b91-73a8-4056-8d22-ecd0109d8675</string>
          <string>7ce93031-5a1b-421b-bc6f-8de76ee2cba1</string>
          <string>aba9f80e-e0c2-4b14-b365-9f5f416d51e5</string>
          <string>5220c4fd-f531-43ff-b9ce-27a4cc8bfa52</string>
          <string>6485566a-e026-44c1-98cf-f7c62a948022</string>
          <string>33599d3c-8359-4fab-b161-9d99484c8247</string>
          <string>02ac2b89-fb25-4fdb-b91f-d3db2de6f3d6</string>
          <string>abdefaaf-d511-480e-9e7f-beeb9c320b63</string>
          <string>301fad6a-2981-4e1d-868c-8dc98f755f2d</string>
        </disabledChannelIds>
        <codeTemplates>
          <codeTemplate version="3.12.0">
            <id>343cb7d5-ac2d-4f13-b452-9d629c957631</id>
            <name>GetAct</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999896</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetAct(_actInfo) {
	var _Act = {};
	if(_actInfo != null) {
		_Act.RealmCodes = GetCSList(_actInfo.getRealmCodes());
		_Act.TemplateIds = GetIIList(_actInfo.getTemplateIds());
		_Act.Ids  = GetIIList(_actInfo.getIds());
		_Act.Code  = GetCD(_actInfo.getCode());
		_Act.Text = GetED(_actInfo.getText());
		_Act.StatusCode = GetCS(_actInfo.getStatusCode());
		_Act.EffectiveTime=GetIVL_TS(_actInfo.getEffectiveTime());
		_Act.PriorityCode=GetCE(_actInfo.getPriorityCode());
		_Act.LanguageCode=GetCS(_actInfo.getLanguageCode());
		_Act.Subject =GetSubject(_actInfo.getSubject());
		_Act.Specimens=GetSpecimenList(_actInfo.getSpecimens()); //Umesh
		_Act.Performer2s=GetPerformer2List(_actInfo.getPerformers()); //Umesh
		_Act.Authors=GetAuthorList(_actInfo.getAuthors());
		_Act.Informant12s=GetInformant12List(_actInfo.getInformants());
		_Act.Participant2s=GetParticipant2List(_actInfo.getParticipants()); //Umesh
		_Act.EntryRelationships=GetEntryRelationshipList(_actInfo.getEntryRelationships());// create function
		_Act.References=GetReferenceList(_actInfo.getReferences());//Umesh		
		_Act.Preconditions=GetPreconditionList(_actInfo.getPreconditions());//Umesh
		_Act.NullFlavor = GetNullFlavor(_actInfo.getNullFlavor());
		_Act.ActClassDocumentEntryAct = GetVocabInfo(_actInfo.getClassCode());
		_Act.DocumentActMood  = GetVocabInfo(_actInfo.getMoodCode());
		_Act.NegationInd=_actInfo.getNegationInd();
	}
	return _Act;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>96bfde10-11a6-4bc5-a56e-12d2c6786a7b</id>
            <name>GetAD</name>
            <revision>1</revision>
            <lastModified>
              <time>1665308000258</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetAD(_ADInfo) {
	var _AD = {};
	if(_ADInfo != null) {
		
			_AD.UsablePeriods  = GetSXCM_TSList(_ADInfo.getUseablePeriods());
			_AD.PostalAddress  = GetAddressUseList(_ADInfo.getUses());
			_AD.Delimeters = GetADXPList(_ADInfo.getDelimiters());
			_AD.Countries = GetADXPList(_ADInfo.getCountries());
			_AD.States = GetADXPList(_ADInfo.getStates());
			_AD.Counties = GetADXPList(_ADInfo.getCounties());
			_AD.Cities  = GetADXPList(_ADInfo.getCities());
			_AD.PostalCodes = GetADXPList(_ADInfo.getPostalCodes());
			_AD.StreetAddressLines  = GetADXPList(_ADInfo.getStreetAddressLines());
			_AD.HouseNumbers  = GetADXPList(_ADInfo.getHouseNumbers());
			_AD.HouseNumberNumerics  = GetADXPList(_ADInfo.getHouseNumberNumerics());
			_AD.Directions  = GetADXPList(_ADInfo.getDirections());
			_AD.StreetNames  = GetADXPList(_ADInfo.getStreetNames());
			_AD.StreetNameBases  = GetADXPList(_ADInfo.getStreetNameBases());
			_AD.StreetNameTypes  = GetADXPList(_ADInfo.getStreetNameTypes());
			_AD.AdditionalLocators  = GetADXPList(_ADInfo.getAdditionalLocators());
			_AD.UnitIDs  = GetADXPList(_ADInfo.getUnitIDs());
			_AD.UnitTypes = GetADXPList(_ADInfo.getUnitTypes());
			_AD.CareOfs = GetADXPList(_ADInfo.getCareOfs());
			_AD.CensusTracts = GetADXPList(_ADInfo.getCensusTracts());
			_AD.deliveryAddressLines = GetADXPList(_ADInfo.getDeliveryAddressLines());
			_AD.DeliveryInstallationTypes  = GetADXPList(_ADInfo.getDeliveryInstallationTypes());
			_AD.DeliveryInstallationAreas = GetADXPList(_ADInfo.getDeliveryInstallationAreas());
			_AD.DeliveryInstallationQualifiers = GetADXPList(_ADInfo.getDeliveryInstallationQualifiers());
			_AD.DeliveryModes  = GetADXPList(_ADInfo.getDeliveryModes());
			_AD.DeliveryModeIdentifiers  = GetADXPList(_ADInfo.getDeliveryModeIdentifiers());
			_AD.BuildingNumberSuffixes  = GetADXPList(_ADInfo.getBuildingNumberSuffixes());
			_AD.PostBoxes = GetADXPList(_ADInfo.getPostBoxes());
			_AD.Precincts  = GetADXPList(_ADInfo.getPrecincts());
			_AD.Text  = _ADInfo.getText();
	} else {
			_AD.UsablePeriods  = GetSXCM_TSList(null);
			_AD.PostalAddress  = GetAddressUseList(null);
			_AD.Delimeters = GetADXPList(null);
			_AD.Countries = GetADXPList(null);
			_AD.States = GetADXPList(null);
			_AD.Counties = GetADXPList(null);
			_AD.Cities  = GetADXPList(null);
			_AD.PostalCodes = GetADXPList(null);
			_AD.StreetAddressLines  = GetADXPList(null);
			_AD.HouseNumbers  = GetADXPList(null);
			_AD.HouseNumberNumerics  = GetADXPList(null);
			_AD.Directions  = GetADXPList(null);
			_AD.StreetNames  = GetADXPList(null);
			_AD.StreetNameBases  = GetADXPList(null);
			_AD.StreetNameTypes  = GetADXPList(null);
			_AD.AdditionalLocators  = GetADXPList(null);
			_AD.UnitIDs  = GetADXPList(null);
			_AD.UnitTypes = GetADXPList(null);
			_AD.CareOfs = GetADXPList(null);
			_AD.CensusTracts = GetADXPList(null);
			_AD.deliveryAddressLines = GetADXPList(null);
			_AD.DeliveryInstallationTypes  = GetADXPList(null);
			_AD.DeliveryInstallationAreas = GetADXPList(null);
			_AD.DeliveryInstallationQualifiers = GetADXPList(null);
			_AD.DeliveryModes  = GetADXPList(null);
			_AD.DeliveryModeIdentifiers  = GetADXPList(null);
			_AD.BuildingNumberSuffixes  = GetADXPList(null);
			_AD.PostBoxes = GetADXPList(null);
			_AD.Precincts  = GetADXPList(null);
			_AD.Text  = &quot;&quot;;
	}
	return _AD;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>67985610-b104-4806-a8a3-79e0460795d8</id>
            <name>GetAddressPartType</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996985</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetAddressPartType(_PartTypeInfo) {
	var _AddressPartType = {};
	if(_PartTypeInfo != null) {
		
			if(_PartTypeInfo.getValue() != null) {
				_AddressPartType.Value = _PartTypeInfo.getValue();
			} else {
				_AddressPartType.Value = &quot;&quot;;
			}

			if(_PartTypeInfo.getName() != null) {
				_AddressPartType.Name = _PartTypeInfo.getName();
			} else {
				_AddressPartType.Name = &quot;&quot;;
			}

			if(_PartTypeInfo.getLiteral() != null) {
				_AddressPartType.Literal = _PartTypeInfo.getLiteral();
			} else {
				_AddressPartType.Literal = &quot;&quot;;
			}		
	} else {
		_AddressPartType.Value = &quot;&quot;;
		_AddressPartType.Name = &quot;&quot;;
		_AddressPartType.Literal = &quot;&quot;;
	}
	return _AddressPartType;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>87d1b212-fcf4-458d-a8cd-9844973bc6d3</id>
            <name>GetAddressUseList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307994893</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetAddressUseList(_AddressUses) {
	var _Address = []
	if(_AddressUses != null) {
		var _AddressUsesize = _AddressUses.size();
		var _i = 0;
		if(_AddressUsesize &gt; 0) {
			for(;_i&lt; _AddressUsesize ; _i++) {

			var _address = _AddressUses.get(_i);
			var address  = GetVocabInfo(_address);
			_Address.push(address);
		}	
		} else {
			var address  = GetVocabInfo(null);
			_Address.push(address);
		}
			
	} else {
		var address  = GetVocabInfo(null);
			_Address.push(address);
	}
	return _Address;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>4b98ec1f-03ca-4a98-b88a-e555f895b477</id>
            <name>GetADList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997386</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetADList(_ADListInfo) {
	var _ADLIst = [];
	if(_ADListInfo != null) {
		
		var _ADListInfoSize = _ADListInfo.size();
		var _i = 0;

		if(_ADListInfoSize &gt; 0) {
			for(;_i&lt; _ADListInfoSize ; _i++) {
			var _AD = {};
			var _ADInfo = _ADListInfo.get(_i);

			_AD.UsablePeriods  = GetSXCM_TSList(_ADInfo.getUseablePeriods());
			_AD.PostalAddress  = GetAddressUseList(_ADInfo.getUses());
			_AD.Delimeters = GetADXPList(_ADInfo.getDelimiters());
			_AD.Countries = GetADXPList(_ADInfo.getCountries());
			_AD.States = GetADXPList(_ADInfo.getStates());
			_AD.Counties = GetADXPList(_ADInfo.getCounties());
			_AD.Cities  = GetADXPList(_ADInfo.getCities());
			_AD.PostalCodes = GetADXPList(_ADInfo.getPostalCodes());
			_AD.StreetAddressLines  = GetADXPList(_ADInfo.getStreetAddressLines());
			_AD.HouseNumbers  = GetADXPList(_ADInfo.getHouseNumbers());
			_AD.HouseNumberNumerics  = GetADXPList(_ADInfo.getHouseNumberNumerics());
			_AD.Directions  = GetADXPList(_ADInfo.getDirections());
			_AD.StreetNames  = GetADXPList(_ADInfo.getStreetNames());
			_AD.StreetNameBases  = GetADXPList(_ADInfo.getStreetNameBases());
			_AD.StreetNameTypes  = GetADXPList(_ADInfo.getStreetNameTypes());
			_AD.AdditionalLocators  = GetADXPList(_ADInfo.getAdditionalLocators());
			_AD.UnitIDs  = GetADXPList(_ADInfo.getUnitIDs());
			_AD.UnitTypes = GetADXPList(_ADInfo.getUnitTypes());
			_AD.CareOfs = GetADXPList(_ADInfo.getCareOfs());
			_AD.CensusTracts = GetADXPList(_ADInfo.getCensusTracts());
			_AD.deliveryAddressLines = GetADXPList(_ADInfo.getDeliveryAddressLines());
			_AD.DeliveryInstallationTypes  = GetADXPList(_ADInfo.getDeliveryInstallationTypes());
			_AD.DeliveryInstallationAreas = GetADXPList(_ADInfo.getDeliveryInstallationAreas());
			_AD.DeliveryInstallationQualifiers = GetADXPList(_ADInfo.getDeliveryInstallationQualifiers());
			_AD.DeliveryModes  = GetADXPList(_ADInfo.getDeliveryModes());
			_AD.DeliveryModeIdentifiers  = GetADXPList(_ADInfo.getDeliveryModeIdentifiers());
			_AD.BuildingNumberSuffixes  = GetADXPList(_ADInfo.getBuildingNumberSuffixes());
			_AD.PostBoxes = GetADXPList(_ADInfo.getPostBoxes());
			_AD.Precincts  = GetADXPList(_ADInfo.getPrecincts());
			
			_ADLIst.push(_AD);
			
		}	
		} else {
			var _AD = {};
			

			_AD.UsablePeriods  = GetSXCM_TSList(null);
			_AD.PostalAddress  = GetAddressUseList(null);
			_AD.Delimeters = GetADXPList(null);
			_AD.Countries = GetADXPList(null);
			_AD.States = GetADXPList(null);
			_AD.Counties = GetADXPList(null);
			_AD.Cities  = GetADXPList(null);
			_AD.PostalCodes = GetADXPList(null);
			_AD.StreetAddressLines  = GetADXPList(null);
			_AD.HouseNumbers  = GetADXPList(null);
			_AD.HouseNumberNumerics  = GetADXPList(null);
			_AD.Directions  = GetADXPList(null);
			_AD.StreetNames  = GetADXPList(null);
			_AD.StreetNameBases  = GetADXPList(null);
			_AD.StreetNameTypes  = GetADXPList(null);
			_AD.AdditionalLocators  = GetADXPList(null);
			_AD.UnitIDs  = GetADXPList(null);
			_AD.UnitTypes = GetADXPList(null);
			_AD.CareOfs = GetADXPList(null);
			_AD.CensusTracts = GetADXPList(null);
			_AD.deliveryAddressLines = GetADXPList(null);
			_AD.DeliveryInstallationTypes  = GetADXPList(null);
			_AD.DeliveryInstallationAreas = GetADXPList(null);
			_AD.DeliveryInstallationQualifiers = GetADXPList(null);
			_AD.DeliveryModes  = GetADXPList(null);
			_AD.DeliveryModeIdentifiers  = GetADXPList(null);
			_AD.BuildingNumberSuffixes  = GetADXPList(null);
			_AD.PostBoxes = GetADXPList(null);
			_AD.Precincts  = GetADXPList(null);
			
			_ADLIst.push(_AD);
		}
		
		
	} else {
		var _AD = {};
			

			_AD.UsablePeriods  = GetSXCM_TSList(null);
			_AD.PostalAddress  = GetAddressUseList(null);
			_AD.Delimeters = GetADXPList(null);
			_AD.Countries = GetADXPList(null);
			_AD.States = GetADXPList(null);
			_AD.Counties = GetADXPList(null);
			_AD.Cities  = GetADXPList(null);
			_AD.PostalCodes = GetADXPList(null);
			_AD.StreetAddressLines  = GetADXPList(null);
			_AD.HouseNumbers  = GetADXPList(null);
			_AD.HouseNumberNumerics  = GetADXPList(null);
			_AD.Directions  = GetADXPList(null);
			_AD.StreetNames  = GetADXPList(null);
			_AD.StreetNameBases  = GetADXPList(null);
			_AD.StreetNameTypes  = GetADXPList(null);
			_AD.AdditionalLocators  = GetADXPList(null);
			_AD.UnitIDs  = GetADXPList(null);
			_AD.UnitTypes = GetADXPList(null);
			_AD.CareOfs = GetADXPList(null);
			_AD.CensusTracts = GetADXPList(null);
			_AD.deliveryAddressLines = GetADXPList(null);
			_AD.DeliveryInstallationTypes  = GetADXPList(null);
			_AD.DeliveryInstallationAreas = GetADXPList(null);
			_AD.DeliveryInstallationQualifiers = GetADXPList(null);
			_AD.DeliveryModes  = GetADXPList(null);
			_AD.DeliveryModeIdentifiers  = GetADXPList(null);
			_AD.BuildingNumberSuffixes  = GetADXPList(null);
			_AD.PostBoxes = GetADXPList(null);
			_AD.Precincts  = GetADXPList(null);
			
			_ADLIst.push(_AD);
	}
	return _ADLIst;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>09a22153-7363-4d22-afe4-bad1454c02b5</id>
            <name>GetADXPList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307994664</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetADXPList(_ADXPs) {
	var _AddressPartTypes = []
	if(_ADXPs != null) {
		var _ADXPsize = _ADXPs.size();
		var _i = 0;
		if(_ADXPsize &gt; 0) {
			for(;_i&lt; _ADXPsize ; _i++) {
			var ADXP = {};
			var _addressPart = _ADXPs.get(_i);
			if(_addressPart != null) {
				ADXP.AddressPartType  = GetAddressPartType(_addressPart.getPartType());
				ADXP.ADXP_ST = GetST(_addressPart);
				_AddressPartTypes.push(ADXP);	
			}

			
		}	
		} else {
			var ADXP = {};
			
				ADXP.AddressPartType  = GetAddressPartType(null);
				ADXP.ADXP_ST = GetST(null);
				_AddressPartTypes.push(ADXP);	
				
		}
			
	} else {
		var ADXP = {};
			
				ADXP.AddressPartType  = GetAddressPartType(null);
				ADXP.ADXP_ST = GetST(null);
				_AddressPartTypes.push(ADXP);	
			
	}
	
	return _AddressPartTypes;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>2f67b47e-1c9c-4c6f-bd44-1eee63c20023</id>
            <name>GetAny</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307994683</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetAny(_AnyInfo) {
	var _Any = {};
	if(_AnyInfo != null) {
		if(_AnyInfo instanceof org.openhealthtools.mdht.uml.hl7.datatypes.CD) {
			_Any.CD = GetCD(_AnyInfo);
		} else {
			_Any.CD = GetCD(null);
		}

		if(_AnyInfo instanceof org.openhealthtools.mdht.uml.hl7.datatypes.CE) {
			_Any.CE = GetCE(_AnyInfo);
		} else {
			_Any.CE = GetCE(null);
		}

		if(_AnyInfo instanceof org.openhealthtools.mdht.uml.hl7.datatypes.PQ) {
			_Any.PQ = GetPQ(_AnyInfo);
		} else {
			_Any.PQ = GetPQ(null);
		}

		if(_AnyInfo instanceof org.openhealthtools.mdht.uml.hl7.datatypes.ST) {
			_Any.ST = GetST(_AnyInfo);
		} else {
			_Any.ST = GetPQ(null);
		}

		if(_AnyInfo instanceof org.openhealthtools.mdht.uml.hl7.datatypes.IVL_PQ) {
			_Any.IVL_PQ = GetIVL_PQ(_AnyInfo);
		} else {
			_Any.IVL_PQ = GetIVL_PQ(null);
		}

		if(_AnyInfo instanceof org.openhealthtools.mdht.uml.hl7.datatypes.REAL) {
			_Any.REAL = GetREAL(_AnyInfo);
		} else {
			_Any.REAL = GetREAL(null);
		}
		
		
		_Any.NullFlavor  = GetNullFlavor(_AnyInfo.getNullFlavor());
	return _Any;
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>d407d30f-f860-46d7-a158-57a8e323af96</id>
            <name>GetAnyList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999228</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetAnyList(_AnyListInfo) {
	var _AnyList = []
	if(_AnyListInfo != null) {
		var _AnyListInfosize = _AnyListInfo.size();
		var _i = 0;
		
		for(;_i&lt; _AnyListInfosize ; _i++) {
			var _Any = _AnyListInfo.get(_i);

			var Any  = GetAny(_Any);
			if(Any != null) {
				_AnyList.push(Any);	
			}
		}	
	}
	return _AnyList;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>f852a5e5-4b9b-47e4-8fd3-979f1f739658</id>
            <name>GetAssignedAuthor</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998819</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetAssignedAuthor(_AssignedAuthorInfo) {
	var _AssignedAuthor = {};
	if(_AssignedAuthorInfo != null) {
		_AssignedAuthor.RealmCodes = GetCSList(_AssignedAuthorInfo.getRealmCodes());
		_AssignedAuthor.InfrastructureRootTypeId = GetII(_AssignedAuthorInfo.getTypeId());
		_AssignedAuthor.TemplateIds = GetIIList(_AssignedAuthorInfo.getTemplateIds());
		_AssignedAuthor.Ids = GetIIList(_AssignedAuthorInfo.getIds());
		_AssignedAuthor.Code = GetCE(_AssignedAuthorInfo.getCode());
		_AssignedAuthor.Address = GetADList(_AssignedAuthorInfo.getAddrs());
		_AssignedAuthor.Telecoms = GetTELList(_AssignedAuthorInfo.getTelecoms());
		_AssignedAuthor.Person = GetPerson(_AssignedAuthorInfo.getAssignedPerson());
		_AssignedAuthor.AuthoringDevice = GetAuthoringDevice(_AssignedAuthorInfo.getAssignedAuthoringDevice());
		_AssignedAuthor.Organization = GetOrganization(_AssignedAuthorInfo.getRepresentedOrganization());
		_AssignedAuthor.NullFlavor  = GetNullFlavor(_AssignedAuthorInfo.getNullFlavor());
		_AssignedAuthor.RoleClassAssignedEntity = GetVocabInfo(_AssignedAuthorInfo.getClassCode());
	} else {
		_AssignedAuthor.RealmCodes = GetCSList(null);
		_AssignedAuthor.InfrastructureRootTypeId = GetII(null);
		_AssignedAuthor.TemplateIds = GetIIList(null);
		_AssignedAuthor.Ids = GetIIList(null);
		_AssignedAuthor.Code = GetCE(null);
		_AssignedAuthor.Address = GetADList(null);
		_AssignedAuthor.Telecoms = GetTELList(null);
		_AssignedAuthor.Person = GetPerson(null);
		_AssignedAuthor.AuthoringDevice = GetAuthoringDevice(null);
		_AssignedAuthor.Organization = GetOrganization(null);
		_AssignedAuthor.NullFlavor  = GetNullFlavor(null);
		_AssignedAuthor.RoleClassAssignedEntity = GetVocabInfo(null);
		
	}
	return _AssignedAuthor;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>1499b36e-628c-4f87-a0b7-bae52ef849fc</id>
            <name>GetAssignedCustodian</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996410</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetAssignedCustodian(_AssignedCustodianInfo) {
	var _AssignedCustodian = {};
	if(_AssignedCustodianInfo != null) {
		_AssignedCustodian.RealmCodes = GetCSList(_AssignedCustodianInfo.getRealmCodes());
		_AssignedCustodian.InfrastructureRootTypeId = GetII(_AssignedCustodianInfo.getTypeId());
		_AssignedCustodian.TemplateIds = GetIIList(_AssignedCustodianInfo.getTemplateIds());
		_AssignedCustodian.CustodianOrganization  = GetCustodianOrganization(_AssignedCustodianInfo.getRepresentedCustodianOrganization());
		_AssignedCustodian.NullFlavor  = GetNullFlavor(_AssignedCustodianInfo.getNullFlavor());
		_AssignedCustodian.RoleClassAssignedEntity  = GetVocabInfo(_AssignedCustodianInfo.getClassCode());
	}
	return _AssignedCustodian;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>544d9aed-ede7-482e-adf0-0c8d74cce5e9</id>
            <name>GetAssignedEntity</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999588</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetAssignedEntity(_AssignedEntityInfo) {
	var _AssignedEntity = {};
	if(_AssignedEntityInfo != null) {
		_AssignedEntity.RealmCodes = GetCSList(_AssignedEntityInfo.getRealmCodes());
		_AssignedEntity.InfrastructureRootTypeId = GetII(_AssignedEntityInfo.getTypeId());
		_AssignedEntity.TemplateIds = GetIIList(_AssignedEntityInfo.getTemplateIds());
		_AssignedEntity.Ids = GetIIList(_AssignedEntityInfo.getIds());
		_AssignedEntity.Code = GetCE(_AssignedEntityInfo.getCode());
		_AssignedEntity.Address  = GetADList(_AssignedEntityInfo.getAddrs());
		_AssignedEntity.Telecoms  = GetTELList(_AssignedEntityInfo.getTelecoms());
		_AssignedEntity.SDTCPatient  = GetSDTCPatient(_AssignedEntityInfo.getSDTCPatient());
		_AssignedEntity.Person  = GetPerson(_AssignedEntityInfo.getAssignedPerson());
		_AssignedEntity.Organizations  = GetOrganizationList(_AssignedEntityInfo.getRepresentedOrganizations());
		_AssignedEntity.NullFlavor  = GetNullFlavor(_AssignedEntityInfo.getNullFlavor());
		_AssignedEntity.RoleClassAssignedEntity  = GetNullFlavor(_AssignedEntityInfo.getClassCode());
	} else {
		_AssignedEntity.RealmCodes = GetCSList(null);
		_AssignedEntity.InfrastructureRootTypeId = GetII(null);
		_AssignedEntity.TemplateIds = GetIIList(null);
		_AssignedEntity.Ids = GetIIList(null);
		_AssignedEntity.Code = GetCE(null);
		_AssignedEntity.Address  = GetADList(null);
		_AssignedEntity.Telecoms  = GetTELList(null);
		_AssignedEntity.SDTCPatient  = GetSDTCPatient(null);
		_AssignedEntity.Person  = GetPerson(null);
		_AssignedEntity.Organizations  = GetOrganizationList(null);
		_AssignedEntity.NullFlavor  = GetNullFlavor(null);
		_AssignedEntity.RoleClassAssignedEntity  = GetNullFlavor(null);
	}
	return _AssignedEntity;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>cec1bc6a-bd44-4b2b-b923-4c2084558c3b</id>
            <name>GetAssociatedEntity</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997775</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetAssociatedEntity(_AssociatedEntityInfo) {
	var _AssociatedEntities = {};
	if(_AssociatedEntityInfo != null) {
		_AssociatedEntities.RealmCodes = GetCSList(_AssociatedEntityInfo.getRealmCodes());
		_AssociatedEntities.InfrastructureRootTypeId = GetII(_AssociatedEntityInfo.getTypeId());
		_AssociatedEntities.TemplateIds = GetIIList(_AssociatedEntityInfo.getTemplateIds());
		_AssociatedEntities.Ids = GetIIList(_AssociatedEntityInfo.getIds());
		_AssociatedEntities.Code = GetCE(_AssociatedEntityInfo.getCode());
		_AssociatedEntities.Addrs = GetADList(_AssociatedEntityInfo.getAddrs());
		_AssociatedEntities.Telecoms = GetTELList(_AssociatedEntityInfo.getTelecoms());
		_AssociatedEntities.Person = GetPerson(_AssociatedEntityInfo.getAssociatedPerson());
		_AssociatedEntities.Organization = GetOrganization(_AssociatedEntityInfo.getScopingOrganization());
		_AssociatedEntities.SDTCPatient = GetSDTCPatient(_AssociatedEntityInfo.getSDTCPatient());
		_AssociatedEntities.NullFlavor  = GetNullFlavor(_AssociatedEntityInfo.getNullFlavor());
		_AssociatedEntities.RoleClassAssociative = GetNullFlavor(_AssociatedEntityInfo.getClassCode());
	} else {
		_AssociatedEntities.RealmCodes = GetCSList(null);
		_AssociatedEntities.InfrastructureRootTypeId = GetII(null);
		_AssociatedEntities.TemplateIds = GetIIList(null);
		_AssociatedEntities.Ids = GetIIList(null);
		_AssociatedEntities.Code = GetCE(null);
		_AssociatedEntities.Addrs = GetADList(null);
		_AssociatedEntities.Telecoms = GetTELList(null);
		_AssociatedEntities.Person = GetPerson(null);
		_AssociatedEntities.Organization = GetOrganization(null);
		_AssociatedEntities.SDTCPatient = GetSDTCPatient(null);
		_AssociatedEntities.NullFlavor  = GetNullFlavor(null);
		_AssociatedEntities.RoleClassAssociative = GetNullFlavor(null);
	}
	return _AssociatedEntities;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>a9fd85ac-2227-43df-b06c-93d2ad7dd359</id>
            <name>GetAuthenticator</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999303</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetAuthenticator(_AuthenticatorInfo) {
	var _Authenticators = {};
	if(_AuthenticatorInfo != null) {
		_Authenticators.RealmCodes = GetCSList(_AuthenticatorInfo.getRealmCodes());
		_Authenticators.InfrastructureRootTypeId = GetII(_AuthenticatorInfo.getTypeId());
		_Authenticators.TemplateIds = GetIIList(_AuthenticatorInfo.getTemplateIds());
		_Authenticators.Time = GetTS(_AuthenticatorInfo.getTime());
		_Authenticators.SignatureCode = GetCS(_AuthenticatorInfo.getSignatureCode());
		_Authenticators.AssignedEntity = GetAssignedEntity(_AuthenticatorInfo.getAssignedEntity());
		_Authenticators.NullFlavor  = GetNullFlavor(_AuthenticatorInfo.getNullFlavor());
		_Authenticators.ParticipationType = GetNullFlavor(_AuthenticatorInfo.getTypeCode());
	} else {
		_Authenticators.RealmCodes = GetCSList(null);
		_Authenticators.InfrastructureRootTypeId = GetII(null);
		_Authenticators.TemplateIds = GetIIList(null);
		_Authenticators.Time = GetTS(null);
		_Authenticators.SignatureCode = GetCS(null);
		_Authenticators.AssignedEntity = GetAssignedEntity(null);
		_Authenticators.NullFlavor  = GetNullFlavor(null);
		_Authenticators.ParticipationType = GetNullFlavor(null);
	}
	return _Authenticators;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>1336a304-45e2-46e6-a65a-93c6dfac6cc0</id>
            <name>GetAuthenticatorList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307995313</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetAuthenticatorList(_AuthenticatorInfo) {
	var _Authenticators = []
	if(_AuthenticatorInfo != null) {
		var _AuthenticatorInfosize = _AuthenticatorInfo.size();
		var _i = 0;
		if(_AuthenticatorInfosize &gt; 0) {
			for(;_i&lt; _AuthenticatorInfosize ; _i++) {

			var _Authenticator = _AuthenticatorInfo.get(_i);

			var Authenticator  = GetAuthenticator(_Authenticator);
			if(Authenticator != null) {
				_Authenticators.push(Authenticator);
			}
		}	
		} else {
			var Authenticator  = GetAuthenticator(null);
			if(Authenticator != null) {
				_Authenticators.push(Authenticator);
			}	
		}
	} else {
		var Authenticator  = GetAuthenticator(null);
			if(Authenticator != null) {
				_Authenticators.push(Authenticator);
			}
	}
	
	return _Authenticators;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>1a7eec3f-867c-4a67-a282-6deec9bdb1f2</id>
            <name>GetAuthor</name>
            <revision>1</revision>
            <lastModified>
              <time>1665308000289</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetAuthor(_authorInfo) {
	var _Author = {};
	if(_authorInfo != null) {
		_Author.RealmCodes = GetCSList(_authorInfo.getRealmCodes());
		_Author.TemplateIds = GetIIList(_authorInfo.getTemplateIds());
		_Author.FunctionCode  = GetCE(_authorInfo.getFunctionCode());
		_Author.Time  = GetTS(_authorInfo.getTime());
		_Author.AssignedAuthor = GetAssignedAuthor(_authorInfo.getAssignedAuthor());
		_Author.NullFlavor = GetNullFlavor(_authorInfo.getNullFlavor());
		_Author.ParticipationType = GetVocabInfo(_authorInfo.getTypeCode());
		_Author.ContextControlCode = GetContextControlCode(_authorInfo.getContextControlCode());
	} else {
		_Author.RealmCodes = GetCSList(null);
		_Author.TemplateIds = GetIIList(null);
		_Author.FunctionCode  = GetCE(null);
		_Author.Time  = GetTS(null);
		_Author.AssignedAuthor = GetAssignedAuthor(null);
		_Author.NullFlavor = GetNullFlavor(null);
		_Author.ParticipationType = GetVocabInfo(null);
		_Author.ContextControlCode = GetContextControlCode(null);
	}
	return _Author;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>72f7eeab-e379-4cb3-978c-13f50b8bc4e7</id>
            <name>GetAuthoringDevice</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997865</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetAuthoringDevice(_AuthoringDeviceInfo) {
	var _AuthoringDevice = {};
	if(_AuthoringDeviceInfo != null) {
		_AuthoringDevice.RealmCodes = GetCSList(_AuthoringDeviceInfo.getRealmCodes());
		_AuthoringDevice.InfrastructureRootTypeId = GetII(_AuthoringDeviceInfo.getTypeId());
		_AuthoringDevice.TemplateIds = GetIIList(_AuthoringDeviceInfo.getTemplateIds());
		_AuthoringDevice.Code = GetCE(_AuthoringDeviceInfo.getCode());
		_AuthoringDevice.ManufacturerModelName = GetSC(_AuthoringDeviceInfo.getManufacturerModelName());
		_AuthoringDevice.SoftwareName = GetSC(_AuthoringDeviceInfo.getSoftwareName());
		_AuthoringDevice.MaintainedEntities = GetMaintainedEntityList(_AuthoringDeviceInfo.getAsMaintainedEntities());
		_AuthoringDevice.NullFlavor  = GetNullFlavor(_AuthoringDeviceInfo.getNullFlavor());
		_AuthoringDevice.EntityClassDevice = GetVocabInfo(_AuthoringDeviceInfo.getClassCode());
		_AuthoringDevice.EntityDeterminer = GetVocabInfo(_AuthoringDeviceInfo.getDeterminerCode());
		
	} else {
		_AuthoringDevice.RealmCodes = GetCSList(null);
		_AuthoringDevice.InfrastructureRootTypeId = GetII(null);
		_AuthoringDevice.TemplateIds = GetIIList(null);
		_AuthoringDevice.Code = GetCE(null);
		_AuthoringDevice.ManufacturerModelName = GetSC(null);
		_AuthoringDevice.SoftwareName = GetSC(null);
		_AuthoringDevice.MaintainedEntities = GetMaintainedEntityList(null);
		_AuthoringDevice.NullFlavor  = GetNullFlavor(null);
		_AuthoringDevice.EntityClassDevice = GetVocabInfo(null);
		_AuthoringDevice.EntityDeterminer = GetVocabInfo(null);
	}
	return _AuthoringDevice;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>149badfc-a53f-4fd0-b846-8c30f5b09f95</id>
            <name>GetAuthorization</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996325</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetAuthorization(_AuthorizationInfo) {
	var _Authorizations = {};
	if(_AuthorizationInfo != null) {
		_Authorizations.RealmCodes = GetCSList(_AuthorizationInfo.getRealmCodes());
		_Authorizations.InfrastructureRootTypeId = GetII(_AuthorizationInfo.getTypeId());
		_Authorizations.TemplateIds = GetIIList(_AuthorizationInfo.getTemplateIds());
		_Authorizations.Consent = GetConsent(_AuthorizationInfo.getConsent());
		_Authorizations.NullFlavor  = GetNullFlavor(_AuthorizationInfo.getNullFlavor());
		_Authorizations.ActRelationshipType = GetNullFlavor(_AuthorizationInfo.getTypeCode());
	} else {
		_Authorizations.RealmCodes = GetCSList(null);
		_Authorizations.InfrastructureRootTypeId = GetII(null);
		_Authorizations.TemplateIds = GetIIList(null);
		_Authorizations.Consent = GetConsent(null);
		_Authorizations.NullFlavor  = GetNullFlavor(null);
		_Authorizations.ActRelationshipType = GetNullFlavor(null);
	}
	return _Authorizations;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>aa5865c0-401e-48a8-93db-d25e4c8ed931</id>
            <name>GetAuthorizationList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997419</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetAuthorizationList(_AuthorizationInfo) {
	var _Authorizations = []
	if(_AuthorizationInfo != null) {
		var _AuthorizationInfosize = _AuthorizationInfo.size();
		var _i = 0;
		if(_AuthorizationInfosize &gt; 0) {
			for(;_i&lt; _AuthorizationInfosize ; _i++) {

			var _Authorization = _AuthorizationInfo.get(_i);

			var Authorization  = GetAuthorization(_Authorization);
			if(Authorization != null) {
				_Authorizations.push(Authorization);
			}
		}	
		} else {
			var Authorization  = GetAuthorization(null);
			if(Authorization != null) {
				_Authorizations.push(Authorization);
			}	
		}
	} else {
		var Authorization  = GetAuthorization(null);
			if(Authorization != null) {
				_Authorizations.push(Authorization);
			}
	}
	
	return _Authorizations;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>136163d6-dab2-49a2-8199-e32cabd915f8</id>
            <name>GetAuthorList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307995362</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetAuthorList(_AuthorInfo) {
	var _Authors = []
	if(_AuthorInfo != null) {
		var _AuthorInfosize = _AuthorInfo.size();
		var _i = 0;

		if(_AuthorInfosize &gt; 0) {
			for(;_i&lt; _AuthorInfosize ; _i++) {

			var _author = _AuthorInfo.get(_i);

			var author  = GetAuthor(_author);
			if(author != null) {
				_Authors.push(author);
			}
		}	
		} else {
				var author  = GetAuthor(null);
			if(author != null) {
				_Authors.push(author);
			}
		}
			
	} else {
		var author  = GetAuthor(null);
			if(author != null) {
				_Authors.push(author);
			}
	}
	
	return _Authors;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>0c3b5e00-9e26-49fb-b086-e24de77f5282</id>
            <name>GetBirthPlace</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998031</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetBirthPlace(_birthPlaceInfo) {
	var _BirthPlace = {};
	if(_birthPlaceInfo != null) {
		_BirthPlace.RealmCodes = GetCSList(_birthPlaceInfo.getRealmCodes());
		_BirthPlace.TemplateIds  = GetIIList(_birthPlaceInfo.getTemplateIds());
		_BirthPlace.Place  = GetPlace(_birthPlaceInfo.getPlace());
		_BirthPlace.NullFlavor  = GetNullFlavor(_birthPlaceInfo.getNullFlavor());
		_BirthPlace.RoleClass  = GetVocabInfo(_birthPlaceInfo.getClassCode());
	}
	return _BirthPlace;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>77d98657-de19-42e1-a025-75d0a66b7f4f</id>
            <name>GetBL</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998171</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetBL(_BLInfo) {
	var _BL = {};
	if(_BLInfo != null) {
		
			if(_BLInfo.getValue() != null) {
				_BL.Value = _BLInfo.getValue();
			} else {
				_BL.Value = &quot;&quot;;
			}
	} else {
			_BL.Value = &quot;&quot;;
	}
	return _BL;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>47190d20-825b-45b7-ba90-40594a107417</id>
            <name>GetCD</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997488</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetCD(_CDInfo) {
		var _CD = {};
		if(_CDInfo != null) {
			
				_CD.OriginalText = GetED(_CDInfo.getOriginalText());
				_CD.Qualifiers = GetCRList(_CDInfo.getQualifiers());
				_CD.Translations = GetCDList(_CDInfo.getTranslations());
				
				if(_CDInfo.getCode() != null) {
					_CD.Code = _CDInfo.getCode();
				} else {
					_CD.Code = &quot;&quot;;
				}
	
				if(_CDInfo.getCodeSystem() != null) {
					_CD.CodeSystem = _CDInfo.getCodeSystem();
				} else {
					_CD.CodeSystem = &quot;&quot;;
				}
				
				if(_CDInfo.getCodeSystemName() != null) {
					_CD.CodeSystemName = _CDInfo.getCodeSystemName();
				} else {
					_CD.CodeSystemName = &quot;&quot;;
				}
	
				if(_CDInfo.getCodeSystemVersion() != null) {
					_CD.CodeSystemVersion = _CDInfo.getCodeSystemVersion();
				} else {
					_CD.CodeSystemVersion = &quot;&quot;;
				}
				
				if(_CDInfo.getDisplayName() != null) {
					_CD.DisplayName = _CDInfo.getDisplayName();
				} else {
					_CD.DisplayName = &quot;&quot;;
				}
				
				/*if(_CDInfo.getSDTCValueSet() != null) {
					_CD.SDTCValueSet = _CDInfo.getSDTCValueSet();
				} else {
					_CD.SDTCValueSet = &quot;&quot;;
				}
				
				if(_CDInfo.getSDTCValueSetVersion() != null) {
					_CD.SDTCValueSetVersion = _CDInfo.getSDTCValueSetVersion();
				} else {
					_CD.SDTCValueSetVersion = &quot;&quot;;
				}
				*/
		} else {
			_CD.Code = &quot;&quot;;
			_CD.CodeSystem = &quot;&quot;;
			_CD.CodeSystemName = &quot;&quot;;
			_CD.CodeSystemVersion = &quot;&quot;;
			_CD.DisplayName = &quot;&quot;;
			_CD.OriginalText = GetED(null);
		}
		return _CD;
	}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>a7242811-8a72-42a6-ba49-71e59ba68b1e</id>
            <name>GetCDList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999376</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetCDList(_CDListInfo) {
	var _CDList = []
	if(_CDListInfo != null) {
		var _CDListInfosize = _CDListInfo.size();
		var _i = 0;
		
		for(;_i&lt; _CDListInfosize ; _i++) {
			var _CD = _CDListInfo.get(_i);

			var CD  = GetCD(_CD);
			if(CD != null) {
				_CDList.push(CD);	
			}
		}	
	}
	return _CDList;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>46e31a94-d15b-4e7e-aa30-fa9a4ccda20d</id>
            <name>GetCE</name>
            <revision>2</revision>
            <lastModified>
              <time>1666428377430</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetCE(_codeInfo) {
	var _Code = {};
	if(_codeInfo != null) {

			_Code.OriginalText = GetED(_codeInfo.getOriginalText());
			_Code.Qualifiers = GetCRList(_codeInfo.getQualifiers());
			_Code.Translations = GetCDList(_codeInfo.getTranslations());
		
			if(_codeInfo.getCode() != null) {
				_Code.Code = _codeInfo.getCode();
			} else {
				_Code.Code = &quot;&quot;;
			}

			if(_codeInfo.getCodeSystem() != null) {
				_Code.CodeSystem = _codeInfo.getCodeSystem();
			} else {
				_Code.CodeSystem = &quot;&quot;;
			}

			if(_codeInfo.getCodeSystemName() != null) {
				_Code.CodeSystemName = _codeInfo.getCodeSystemName();
			} else {
				_Code.CodeSystemName = &quot;&quot;;
			}

			if(_codeInfo.getCodeSystemVersion() != null) {
				_Code.CodeSystemVersion = _codeInfo.getCodeSystemVersion();
			} else {
				_Code.CodeSystemVersion = &quot;&quot;;
			}

			if(_codeInfo.getDisplayName() != null) {
				_Code.DisplayName = _codeInfo.getDisplayName();
			} else {
				_Code.DisplayName = &quot;&quot;;
			}
	} else {
		_Code.Code = &quot;&quot;;
		_Code.CodeSystem = &quot;&quot;;
		_Code.CodeSystemName = &quot;&quot;;
		_Code.CodeSystemVersion = &quot;&quot;;
		_Code.DisplayName = &quot;&quot;;
	}
	
	return _Code;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>a3712fff-1bbe-4a9d-a0d0-89c5d908480d</id>
            <name>GetCEList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997850</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetCEList(_CEListInfo) {
	var _CEList = []
	if(_CEListInfo != null) {
		var _CEListInfosize = _CEListInfo.size();
		var _i = 0;

		if(_CEListInfosize &gt; 0) {
			for(;_i&lt; _CEListInfosize ; _i++) {
			var _CE = _CEListInfo.get(_i);

			var CE  = GetCE(_CE);
			if(CE != null) {
				_CEList.push(CE);	
			}
		}	
		} else {
			var CE  = GetCE(null);
			if(CE != null) {
				_CEList.push(CE);	
			}
		}
	} else {
		var CE  = GetCE(null);
			if(CE != null) {
				_CEList.push(CE);	
			}
	}
	return _CEList;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>5071cfcd-3b4a-4924-9112-b17fffefac8a</id>
            <name>GetClinicalDocument</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998010</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetClinicalDocument(_document) {
	var _clinicalDocument = {};

	_clinicalDocument.RealmCodes = GetCSList(_document.getRealmCodes());
	_clinicalDocument.InfrastructureRootTypeId = GetII(_document.getTypeId());
	_clinicalDocument.TemplateIds = GetIIList(_document.getTemplateIds());
	_clinicalDocument.Id = GetII(_document.getId());
	_clinicalDocument.Code = GetCE(_document.getCode());
	_clinicalDocument.Title = GetST(_document.getTitle());
	_clinicalDocument.Effective = GetTS(_document.getEffectiveTime());
	_clinicalDocument.ConfidentialityCode = GetCE(_document.getConfidentialityCode());
	_clinicalDocument.LanguageCode = GetCS(_document.getLanguageCode());
	_clinicalDocument.SetId = GetII(_document.getSetId());
	_clinicalDocument.VersionNumber = GetINT(_document.getVersionNumber());
	_clinicalDocument.CopyTime = GetTS(_document.getCopyTime());
	_clinicalDocument.RecordTargets = GetRecordTargetList(_document.getRecordTargets());
	_clinicalDocument.Authors = GetAuthorList(_document.getAuthors());
	_clinicalDocument.DataEnterer = GetDataEnterer(_document.getDataEnterer());
	_clinicalDocument.Informant12s = GetInformant12List(_document.getInformants());
	_clinicalDocument.Custodian = GetCustodian(_document.getCustodian());
	_clinicalDocument.Participant1s = GetParticipant1List(_document.getParticipants());
	_clinicalDocument.InformationRecipients = GetInformationRecipientList(_document.getInformationRecipients());
	_clinicalDocument.LegalAuthenticator = GetLegalAuthenticator(_document.getLegalAuthenticator());
	_clinicalDocument.Authenticators = GetAuthenticatorList(_document.getAuthenticators());
	_clinicalDocument.InFulfillmentOfs = GetInfulfillmentOfList(_document.getInFulfillmentOfs());
	_clinicalDocument.DocumentationOfs = GetDocumentationOfList(_document.getDocumentationOfs());
	_clinicalDocument.RelatedDocuments = GetRelatedDocumentList(_document.getRelatedDocuments());
	_clinicalDocument.Authorizations = GetAuthorizationList(_document.getAuthorizations());
	_clinicalDocument.Component1 = GetComponent1(_document.getComponentOf());
	//_clinicalDocument.Component2 = GetComponent2(_document.getComponent());
	_clinicalDocument.NullFlavor = GetNullFlavor(_document.getNullFlavor());
	_clinicalDocument.ActClinicalDocument = GetVocabInfo(_document.getClassCode());
	_clinicalDocument.ActMood = GetVocabInfo(_document.getMoodCode());
	
	return _clinicalDocument;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>12b73131-a362-41b1-b0b0-4a6c1c1f67b1</id>
            <name>GetComponent1</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996873</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetComponent1(_component1Info) {
	var _Component1s = {};
	if(_component1Info != null) {
		_Component1s.RealmCodes = GetCSList(_component1Info.getRealmCodes());
		_Component1s.TypeId  = GetII(_component1Info.getTypeId());
		_Component1s.TemplateIds  = GetIIList(_component1Info.getTemplateIds());
		_Component1s.EncompassingEncounter=GetEncompassingEncounter(_component1Info.getEncompassingEncounter());//Template Needed
		_Component1s.NullFlavor  = GetNullFlavor(_component1Info.getNullFlavor());
		_Component1s.TypeCode=GetVocabInfo(_component1Info.getTypeCode());
	}
		
	return _Component1s;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>d5c78e42-f0d4-4231-8fac-4b059c26abde</id>
            <name>GetComponent2</name>
            <revision>1</revision>
            <lastModified>
              <time>1665308000032</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetComponent2(_component2Info) {
	var _Component2s = {};
	if(_component2Info != null) {
		_Component2s.RealmCodes = GetCSList(_component2Info.getRealmCodes());
		_Component2s.TypeId  = GetII(_component2Info.getTypeId());
		_Component2s.TemplateIds  = GetIIList(_component2Info.getTemplateIds());
		_Component2s.NonXMLBody=GetNonXMLBody(_component2Info.getNonXMLBody());//Template Needed
		_Component2s.StructuredBody=GetStructuredBody(_component2Info.getStructuredBody());//Template Needed
		_Component2s.NullFlavor  = GetNullFlavor(_component2Info.getNullFlavor());
		_Component2s.TypeCode=GetVocabInfo(_component2Info.TypeCode());
		_Component2s.ContextConductionInd=_component2Info.getContextConductionInd();
	}
		
	return _Component2s;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>a51d8fe1-7036-4883-895b-abc8bf88d110</id>
            <name>GetComponent3</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998881</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetComponent3(_component3Info) {
	var _Component3s = {};
	if(_component3Info != null) {
		_Component3s.RealmCodes = GetCSList(_component3Info.getRealmCodes());
		_Component3s.TypeId  = GetII(_component3Info.getTypeId());
		_Component3s.TemplateIds  = GetIIList(_component3Info.getTemplateIds());
		//_Component3s.Section=GetSection(_component3Info.getSection());//Template Needed
		_Component3s.NullFlavor  = GetNullFlavor(_component3Info.getNullFlavor());
		_Component3s.TypeCode=GetVocabInfo(_component3Info.getTypeCode());
		_Component3s.ContextConductionInd=_component3Info.getContextConductionInd();
	}
		
	return _Component3s;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>c61510f6-5e5a-4ad5-99d3-bdb4cd598ce0</id>
            <name>GetComponent3List</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999759</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetComponent3List(_Component3Info) {
	var _Component3s = []
	if(_Component3Info != null) {
		var _Component3Infosize = _Component3Info.size();
		var _i = 0;
		
		for(;_i&lt; _Component3Infosize ; _i++) {

			var _Component3 = _Component3Info.get(_i);

			var Component3  = GetComponent3(_Component3);
			if(Component3 != null) {
				_Component3s.push(Component3);
			}
		}	
	} else {
			var Component3  = GetComponent3(null);
			if(Component3 != null) {
				_Component3s.push(Component3);
			}
	}
	
	return _Component3s;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>42c06b94-6770-4c2d-a8cd-254807fb2596</id>
            <name>GetComponent4</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996898</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetComponent4(_component4Info) {
	var _Component4s = {};
	if(_component4Info != null) {
		_Component4s.RealmCodes = GetCSList(_component4Info.getRealmCodes());
		_Component4s.TypeId  = GetII(_component4Info.getTypeId());
		_Component4s.TemplateIds  = GetIIList(_component4Info.getTemplateIds());
		_Component4s.SequenceNumber=GetINT(_component4Info.getSequenceNumber());//Template Needed
		_Component4s.SeperatableInd  = GetBL(_component4Info.getSeperatableInd());
		_Component4s.Act  = GetAct(_component4Info.getAct());
		_Component4s.Encounter=GetEncounter(_component4Info.getEncounter());
		_Component4s.Observation  = GetObservation(_component4Info.getObservation());
		_Component4s.ObservationMedia  = GetObservationMedia(_component4Info.getObservationMedia());
		_Component4s.Organizer=GetOrganizer(_component4Info.getOrganizer());
		//_Component4s.Procedure  = GetProcedure(_component4Info.getProcedure());
		//_Component4s.RegionOfInterest  = GetRegionOfInterest(_component4Info.getRegionOfInterest());
		//_Component4s.SubstanceAdministration=GetSubstanceAdministration(_component4Info.getSubstanceAdministration());
		//_Component4s.Supply=GetSupply(_component4Info.getSupply());
		_Component4s.NullFlavor  = GetNullFlavor(_component4Info.getNullFlavor());
		_Component4s.TypeCode=GetVocabInfo(_component4Info.getTypeCode());
		_Component4s.ContextConductionInd=_component4Info.getContextConductionInd();
	}
		
	return _Component4s;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>b9b63bf7-cbde-4058-92e3-79c4173d2830</id>
            <name>GetComponent4List</name>
            <revision>1</revision>
            <lastModified>
              <time>1665308000087</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetComponent4List(_Component4Info) {
	var _Component4s = []
	if(_Component4Info != null) {
		var _Component4Infosize = _Component4Info.size();
		var _i = 0;
		
		for(;_i&lt; _Component4Infosize ; _i++) {

			var _Component4 = _Component4Info.get(_i);

			var Component4  = GetComponent4(_Component4);
			if(Component4 != null) {
				_Component4s.push(Component4);
			}
		}	
	} else {
			var Component4  = GetComponent4(null);
			if(Component4 != null) {
				_Component4s.push(Component4);
			}
	}
	
	return _Component4s;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>843f7b13-b40b-4e45-8514-df70e6ab0682</id>
            <name>GetComponent5</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998970</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetComponent5(_component5Info) {
	var _Component5s = {};
	if(_component5Info != null) {
		_Component5s.RealmCodes = GetCSList(_component5Info.getRealmCodes());
		_Component5s.TypeId  = GetII(_component5Info.getTypeId());
		_Component5s.TemplateIds  = GetIIList(_component5Info.getTemplateIds());
		//_Component5s.Section=GetSection(_component5Info.getSection());//Template Needed
		_Component5s.NullFlavor  = GetNullFlavor(_component5Info.getNullFlavor());
		_Component5s.TypeCode=GetVocabInfo(_component5Info.TypeCode());
		_Component5s.ContextConductionInd=_component5Info.getContextConductionInd();
	}
		
	return _Component5s;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>f3054a88-13dc-4fc5-b5a5-ba2fb2cf7bdd</id>
            <name>GetComponent5List</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998596</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetComponent5List(_Component5Info) {
	var _Component5s = []
	if(_Component5Info != null) {
		var _Component5Infosize = _Component5Info.size();
		var _i = 0;
		
		for(;_i&lt; _Component5Infosize ; _i++) {

			var _Component5 = _Component5Info.get(_i);

			var Component5  = GetComponent5(_Component5);
			if(Component5 != null) {
				_Component5s.push(Component5);
			}
		}	
	} else {
			var Component5  = GetComponent5(null);
			if(Component5 != null) {
				_Component5s.push(Component5);
			}
	}
	
	return _Component5s;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>650e9739-0c61-47d6-9d11-bb6b6dec3964</id>
            <name>GetConsent</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307995784</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetConsent(_ConsentInfo) {
	var _Consents = {};
	if(_ConsentInfo != null) {
		_Consents.RealmCodes = GetCSList(_ConsentInfo.getRealmCodes());
		_Consents.InfrastructureRootTypeId = GetII(_ConsentInfo.getTypeId());
		_Consents.TemplateIds = GetIIList(_ConsentInfo.getTemplateIds());
		_Consents.Ids = GetIIList(_ConsentInfo.getIds());
		_Consents.Code = GetCE(_ConsentInfo.getCode());
		_Consents.StatusCode = GetCS(_ConsentInfo.getStatusCode());
		_Consents.NullFlavor  = GetNullFlavor(_ConsentInfo.getNullFlavor());
		_Consents.ActClass = GetNullFlavor(_ConsentInfo.getClassCode());
		_Consents.ActMood = GetNullFlavor(_ConsentInfo.getMoodCode());
	} else {
		_Consents.RealmCodes = GetCSList(null);
		_Consents.InfrastructureRootTypeId = GetII(null);
		_Consents.TemplateIds = GetIIList(null);
		_Consents.Ids = GetIIList(null);
		_Consents.Code = GetCE(null);
		_Consents.StatusCode = GetCS(null);
		_Consents.NullFlavor  = GetNullFlavor(null);
		_Consents.ActClass = GetNullFlavor(null);
		_Consents.ActMood = GetNullFlavor(null);
	}
	return _Consents;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>288ebcbe-a625-4332-94fa-cae9d75a2e01</id>
            <name>GetConsumable</name>
            <revision>1</revision>
            <lastModified>
              <time>1665308000273</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetConsumable(_ConsumableInfo) {
	var _Consumables = {};
	if(_ConsumableInfo != null) {
		_Consumables.RealmCodes = GetCSList(_ConsumableInfo.getRealmCodes());
		_Consumables.InfrastructureRootTypeId = GetII(_ConsumableInfo.getTypeId());
		_Consumables.TemplateIds = GetIIList(_ConsumableInfo.getTemplateIds());
		_Consumables.ManufacturedProduct = GetManufacturedProduct(_ConsumableInfo.getManufacturedProduct());
		_Consumables.NullFlavor  = GetNullFlavor(_ConsumableInfo.getNullFlavor());
		_Consumables.ParticipationType = GetVocabInfo(_ConsumableInfo.getTypeCode());
	} else {
		_Consumables.RealmCodes = GetCSList(null);
		_Consumables.InfrastructureRootTypeId = GetII(null);
		_Consumables.TemplateIds = GetIIList(null);
		_Consumables.ManufacturedProduct = GetManufacturedProduct(null);
		_Consumables.NullFlavor  = GetNullFlavor(null);
		_Consumables.ParticipationType = GetVocabInfo(null);
	}
	return _Consumables;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>16d9b133-4a3b-4fec-881b-b71ce562a290</id>
            <name>GetContextControlCode</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999438</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetContextControlCode(_contextInfo) {
	var _ContextControlCode = {};
	if(_contextInfo != null) {
		
			if(_contextInfo.getValue() != null) {
				_ContextControlCode.Value = _contextInfo.getValue();
			} else {
				_ContextControlCode.Value = &quot;&quot;;
			}

			if(_contextInfo.getName() != null) {
				_ContextControlCode.Name = _contextInfo.getName();
			} else {
				_ContextControlCode.Name = &quot;&quot;;
			}

			if(_contextInfo.getLiteral() != null) {
				_ContextControlCode.Literal = _contextInfo.getLiteral();
			} else {
				_ContextControlCode.Literal = &quot;&quot;;
			}		
	} else {
		_ContextControlCode.Value = &quot;&quot;;
		_ContextControlCode.Name = &quot;&quot;;
		_ContextControlCode.Literal = &quot;&quot;;
	}
		
	return _ContextControlCode;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>e932690e-d71f-449e-a04c-e62d37416797</id>
            <name>GetCR</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307994815</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetCR(_CRInfo) {
	var _CR = {};
	if(_CRInfo != null) {
		
			_CR.Name = GetCE(_CRInfo.getName());
			_CR.Value = GetCD(_CRInfo.getValue());
			
	}
	return _CR;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>916e5e93-4b65-4586-9154-70804a08e9f8</id>
            <name>GetCriterion</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307994571</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetCriterion(_CriterionInfo) {
	var _Criterions = {};
	if(_CriterionInfo != null) {
		_Criterions.RealmCodes = GetCSList(_CriterionInfo.getRealmCodes());
		_Criterions.InfrastructureRootTypeId = GetII(_CriterionInfo.getTypeId());
		_Criterions.TemplateIds = GetIIList(_CriterionInfo.getTemplateIds());
		_Criterions.Code = GetCD(_CriterionInfo.getCode());
		_Criterions.Text = GetED(_CriterionInfo.getText());
		_Criterions.Value = GetAny(_CriterionInfo.getValue());
		_Criterions.NullFlavor  = GetNullFlavor(_CriterionInfo.getNullFlavor());
		_Criterions.ActClassObservation = GetVocabInfo(_CriterionInfo.getClassCode());
		_Criterions.ActMood = GetVocabInfo(_CriterionInfo.getMoodCode());
		
	} else {
		_Criterions.RealmCodes = GetCSList(null);
		_Criterions.InfrastructureRootTypeId = GetII(null);
		_Criterions.TemplateIds = GetIIList(null);
		_Criterions.Code = GetCD(null);
		_Criterions.Text = GetED(null);
		_Criterions.Value = GetAny(null);
		_Criterions.NullFlavor  = GetNullFlavor(null);
		_Criterions.ActClassObservation = GetVocabInfo(null);
		_Criterions.ActMood = GetVocabInfo(null);
		
	}
	return _Criterions;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>df8ff457-b1c6-4e78-b191-cf16e552c103</id>
            <name>GetCRList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997338</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetCRList(_CRListInfo) {
	var _CRList = []
	if(_CRListInfo != null) {
		var _CRListInfosize = _CRListInfo.size();
		var _i = 0;
		
		for(;_i&lt; _CRListInfosize ; _i++) {
			var _CR = _CRListInfo.get(_i);

			var CR  = GetCR(_CR);
			if(CR != null) {
				_CRList.push(CR);	
			}
		}	
	}
	return _CRList;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>336a6de3-0974-45cb-86d4-cd701557ac10</id>
            <name>GetCS</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998065</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetCS(_csInfo) {
	var _CS = {};
	if(_csInfo != null) {
		
			if(_csInfo.getCode() != null) {
				_CS.Code = _csInfo.getCode();
			} else {
				_CS.Code = &quot;&quot;;
			}

			if(_csInfo.getCodeSystem() != null) {
				_CS.CodeSystem = _csInfo.getCodeSystem();
			} else {
				_CS.CodeSystem = &quot;&quot;;
			}

			if(_csInfo.getCodeSystemName() != null) {
				_CS.CodeSystemName = _csInfo.getCodeSystemName();
			} else {
				_CS.CodeSystemName = &quot;&quot;;
			}

			if(_csInfo.getCodeSystemVersion() != null) {
				_CS.CodeSystemVersion = _csInfo.getCodeSystemVersion();
			} else {
				_CS.CodeSystemVersion = &quot;&quot;;
			}

			if(_csInfo.getDisplayName() != null) {
				_CS.DisplayName = _csInfo.getDisplayName();
			} else {
				_CS.DisplayName = &quot;&quot;;
			}
	} else {
		_CS.Code = &quot;&quot;;
		_CS.CodeSystem = &quot;&quot;;
		_CS.CodeSystemName = &quot;&quot;;
		_CS.CodeSystemVersion = &quot;&quot;;
		_CS.DisplayName = &quot;&quot;;
	}
	
	return _CS;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>d755bd13-01f3-48fe-af38-79daebfb42d2</id>
            <name>GetCSList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997499</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetCSList(_CSListInfo) {
	var _CSList = []
	if(_CSListInfo != null) {
		
		var _CSListInfosize = _CSListInfo.size();
		var _i = 0;
		
		if(_CSListInfosize &gt; 0) {
			for(;_i&lt; _CSListInfosize ; _i++) {
			var _CS = _CSListInfo.get(_i);

			var CS  = GetCS(_CS);
			if(CS != null) {
				_CSList.push(CS);	
			}
		}	
		} else {
			var CS  = GetCS(null);
			_CSList.push(CS);
		}
			
	} else {
		var CS  = GetCS(null);
		_CSList.push(CS);
	}
	return _CSList;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>55bd89ff-42c1-47fb-b854-b37d2d9f5373</id>
            <name>GetCustodian</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307995258</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetCustodian(_CustodianInfo) {
	var _Custodian = {};
	if(_CustodianInfo != null) {
		_Custodian.RealmCodes = GetCSList(_CustodianInfo.getRealmCodes());
		_Custodian.InfrastructureRootTypeId = GetII(_CustodianInfo.getTypeId());
		_Custodian.TemplateIds = GetIIList(_CustodianInfo.getTemplateIds());
		_Custodian.AssignedCustodian  = GetAssignedCustodian(_CustodianInfo.getAssignedCustodian());
		_Custodian.NullFlavor  = GetNullFlavor(_CustodianInfo.getNullFlavor());
		_Custodian.ParticipationType  = GetVocabInfo(_CustodianInfo.getTypeCode());
	}
	return _Custodian;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>cc7d857b-e7a0-4ff2-ae22-9050065986b2</id>
            <name>GetCustodianOrganization</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307995913</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetCustodianOrganization(_CustodianOrganizationInfo) {
	var _CustodianOrganization = {};
	if(_CustodianOrganizationInfo != null) {
		_CustodianOrganization.RealmCodes = GetCSList(_CustodianOrganizationInfo.getRealmCodes());
		_CustodianOrganization.InfrastructureRootTypeId = GetII(_CustodianOrganizationInfo.getTypeId());
		_CustodianOrganization.TemplateIds = GetIIList(_CustodianOrganizationInfo.getTemplateIds());
		_CustodianOrganization.Ids = GetIIList(_CustodianOrganizationInfo.getIds());
		_CustodianOrganization.Name = GetEN(_CustodianOrganizationInfo.getName());
		_CustodianOrganization.Telecom = GetTEL(_CustodianOrganizationInfo.getTelecom());
		_CustodianOrganization.Address = GetAD(_CustodianOrganizationInfo.getAddr());
		_CustodianOrganization.NullFlavor  = GetNullFlavor(_CustodianOrganizationInfo.getNullFlavor());
		_CustodianOrganization.EntityClassOrganization  = GetVocabInfo(_CustodianOrganizationInfo.getClassCode());
		_CustodianOrganization.EntityDeterminer  = GetVocabInfo(_CustodianOrganizationInfo.getDeterminerCode());
		_CustodianOrganization.Names  = GetENList(_CustodianOrganizationInfo.getNames());
		_CustodianOrganization.Telecoms  = GetTELList(_CustodianOrganizationInfo.getTelecoms());
		_CustodianOrganization.Addresses  = GetADList(_CustodianOrganizationInfo.getAddrs());
		
		
	}
	return _CustodianOrganization;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>a74c3478-c822-4bd4-82a7-8e23d48e5752</id>
            <name>GetDataEnterer</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999363</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetDataEnterer(_DataEntererInfo) {
	var _DataEnterer = {};

	if(_DataEntererInfo != null){
		channelMap.put(&apos;_DataEntererInfo&apos;,_DataEntererInfo);
		_DataEnterer.RealmCodes = GetCSList(_DataEntererInfo.getRealmCodes());
		_DataEnterer.TemplateIds = GetIIList(_DataEntererInfo.getTemplateIds());
		_DataEnterer.Time = GetTS(_DataEntererInfo.getTime());
		_DataEnterer.AssignedEntity = GetAssignedEntity(_DataEntererInfo.getAssignedEntity());
		_DataEnterer.NullFlavor  = GetNullFlavor(_DataEntererInfo.getNullFlavor());
		_DataEnterer.ParticipationType = GetVocabInfo(_DataEntererInfo.getTypeCode());
		_DataEnterer.ContextControlCode = GetContextControlCode(_DataEntererInfo.getContextControlCode());
	} else {
		_DataEnterer.RealmCodes = GetCSList(null);
		_DataEnterer.TemplateIds = GetIIList(null);
		_DataEnterer.Time = GetTS(null);
		_DataEnterer.AssignedEntity = GetAssignedEntity(null);
		_DataEnterer.NullFlavor  = GetNullFlavor(null);
		_DataEnterer.ParticipationType = GetVocabInfo(null);
		_DataEnterer.ContextControlCode = GetContextControlCode(null);
	}
	
	return _DataEnterer;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>7a28cc9d-fa58-466d-8b2d-4323abe3de26</id>
            <name>GetDevice</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307994873</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetDevice(_DeviceInfo) {
	var _Devices = {};
	if(_DeviceInfo != null) {
		_Devices.RealmCodes = GetCSList(_DeviceInfo.getRealmCodes());
		_Devices.InfrastructureRootTypeId = GetII(_DeviceInfo.getTypeId());
		_Devices.TemplateIds = GetIIList(_DeviceInfo.getTemplateIds());
		_Devices.Code = GetCE(_DeviceInfo.getCode());
		_Devices.ManufacturerModelName = GetSC(_DeviceInfo.getManufacturerModelName());
		_Devices.SoftwareName = GetSC(_DeviceInfo.getSoftwareName());
		_Devices.NullFlavor  = GetNullFlavor(_DeviceInfo.getNullFlavor());
		_Devices.EntityClassDevice = GetNullFlavor(_DeviceInfo.getClassCode());
		_Devices.EntityDeterminer = GetNullFlavor(_DeviceInfo.getDeterminerCode());
	} else {
		_Devices.RealmCodes = GetCSList(null);
		_Devices.InfrastructureRootTypeId = GetII(null);
		_Devices.TemplateIds = GetIIList(null);
		_Devices.Code = GetCE(null);
		_Devices.ManufacturerModelName = GetSC(null);
		_Devices.SoftwareName = GetSC(null);
		_Devices.NullFlavor  = GetNullFlavor(null);
		_Devices.EntityClassDevice = GetNullFlavor(null);
		_Devices.EntityDeterminer = GetNullFlavor(null);
	}
	return _Devices;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>907be42a-7706-4e7f-b599-2ecffa141cf2</id>
            <name>GetDocumentationOf</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998210</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetDocumentationOf(_DocumentationOfInfo) {
	var _DocumentationOfs = {};
	if(_DocumentationOfInfo != null) {
		_DocumentationOfs.RealmCodes = GetCSList(_DocumentationOfInfo.getRealmCodes());
		_DocumentationOfs.InfrastructureRootTypeId = GetII(_DocumentationOfInfo.getTypeId());
		_DocumentationOfs.TemplateIds = GetIIList(_DocumentationOfInfo.getTemplateIds());
		_DocumentationOfs.ServiceEvent = GetServiceEvent(_DocumentationOfInfo.getServiceEvent());
		_DocumentationOfs.NullFlavor  = GetNullFlavor(_DocumentationOfInfo.getNullFlavor());
		_DocumentationOfs.ActRelationshipType = GetNullFlavor(_DocumentationOfInfo.getTypeCode());
	} else {
		_DocumentationOfs.RealmCodes = GetCSList(null);
		_DocumentationOfs.InfrastructureRootTypeId = GetII(null);
		_DocumentationOfs.TemplateIds = GetIIList(null);
		_DocumentationOfs.ServiceEvent = GetServiceEvent(null);
		_DocumentationOfs.NullFlavor  = GetNullFlavor(null);
		_DocumentationOfs.ActRelationshipType = GetNullFlavor(null);
	}
	return _DocumentationOfs;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>afea8760-98cf-4498-b8ad-d98211816cbd</id>
            <name>GetDocumentationOfList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996183</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
	function GetDocumentationOfList(_DocumentationOfInfo) {
		var _DocumentationOfs = []
		if(_DocumentationOfInfo != null) {
			var _DocumentationOfInfosize = _DocumentationOfInfo.size();
			var _i = 0;
			if(_DocumentationOfInfosize &gt; 0) {
				for(;_i&lt; _DocumentationOfInfosize ; _i++) {

				var _DocumentationOf = _DocumentationOfInfo.get(_i);

				var DocumentationOf  = GetDocumentationOf(_DocumentationOf);
				if(DocumentationOf != null) {
					_DocumentationOfs.push(DocumentationOf);
				}
			}	
			} else {
				var DocumentationOf  = GetDocumentationOf(null);
				if(DocumentationOf != null) {
					_DocumentationOfs.push(DocumentationOf);
				}	
			}
		} else {
			var DocumentationOf  = GetDocumentationOf(null);
				if(DocumentationOf != null) {
					_DocumentationOfs.push(DocumentationOf);
				}
		}
		
		return _DocumentationOfs;
	}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>1567d6ae-88d5-43b9-93bc-7d5e75b9e894</id>
            <name>GetED</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996232</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetED(_EDInfo) {
	var _ED = {};
	if(_EDInfo != null) {
		
			_ED.Thumbnail = GetED(_EDInfo.getThumbnail());
			
			if(_EDInfo.getMediaType() != null) {
				_ED.MediaType = _EDInfo.getMediaType();
			} else {
				_ED.MediaType = &quot;&quot;;
			}

			if(_EDInfo.getLanguage() != null) {
				_ED.Language = _EDInfo.getLanguage();
			} else {
				_ED.Language = &quot;&quot;;
			}
			
			_ED.CompressionAlgorithm = GetVocabInfo(_EDInfo.getCompression());
			_ED.IntegrityCheckAlgorithm = GetVocabInfo(_EDInfo.getIntegrityCheckAlgorithm());
			

			if(_EDInfo.getText() != null) {
				_ED.Text = _EDInfo.getText();
			} else {
				_ED.Text = &quot;&quot;;
			}

			
			if(_EDInfo.getReference() != null) {
				_ED.Reference = GetTEL(_EDInfo.getReference());
			} else {
				_ED.Reference = &quot;&quot;;
			}
			
			/*
			if(_EDInfo.getCDATA() != null) {
				_ED.CDATA = _EDInfo.getCDATA();
			} else {
				_ED.CDATA = &quot;&quot;;
			}*/
	} else{
		_ED.MediaType = &quot;&quot;;
		_ED.Language = &quot;&quot;;
		_ED.CompressionAlgorithm = GetVocabInfo(null);
		_ED.IntegrityCheckAlgorithm = GetVocabInfo(null);
		_ED.Text = &quot;&quot;;
		var _tel = {};
		_tel.TEL_URL  = GetURL(null);
		_ED.Reference = _tel;
	}
	return _ED;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>d5172681-3766-4b16-a0bf-ff858da83309</id>
            <name>GetEIVL_event</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996153</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetEIVL_event(_EIVL_eventInfo) {
	var _EIVL_event = {};

	if(_EIVL_eventInfo != null){
		_EIVL_event.CE = GetCE(_EIVL_eventInfo);
	} else {
		_EIVL_event.CE = GetCE(null);
	}
	return _EIVL_event;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>315b00f9-1aa4-48ee-8022-34f05dd1b9f5</id>
            <name>GetEIVL_TS</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996528</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetEIVL_TS(_EIVL_TSInfo) {
	var _EIVL_TS = {};

	if(_EIVL_TSInfo != null){
		_EIVL_TS.Offset = GetIVL_PQ(_EIVL_TSInfo.getOffset());
	} else {
		_EIVL_TS.Offset = GetIVL_PQ(null);
	}

	_EIVL_TS.Event = GetEIVL_event(_EIVL_TSInfo.getEvent());
	
	return _EIVL_TS;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>d783b010-08d6-43dd-aff0-e65b902e3d9b</id>
            <name>GetEN</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998465</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetEN(_ENInfo) {
	var _EN = {};
	if(_ENInfo != null) {
		
			_EN.EntityNameUses = GetVocabInfoList(_ENInfo.getUses());
			_EN.ValidTime = GetIVL_TS(_ENInfo.getValidTime());	
			_EN.Delimiters = GetENXPList(_ENInfo.getDelimiters());
			_EN.Families = GetENXPList(_ENInfo.getFamilies());
			_EN.Givens = GetENXPList(_ENInfo.getGivens());
			_EN.Prefixes = GetENXPList(_ENInfo.getPrefixes());
			_EN.Suffixes = GetENXPList(_ENInfo.getSuffixes());
			
			if(_ENInfo.getText() != null) {
				_EN.Text = _ENInfo.getText();
			} else {
				_EN.Text = &quot;&quot;;
			}			
	}
	return _EN;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>f6094e95-7b6c-42d8-a8f4-d83ae80f3c51</id>
            <name>GetEncompassingEncounter</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998673</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetEncompassingEncounter(_EncompassingEncounterInfo) {
	var _EncompassingEncounters = {};
	if(_EncompassingEncounterInfo != null) {
		_EncompassingEncounters.RealmCodes = GetCSList(_EncompassingEncounterInfo.getRealmCodes());
		_EncompassingEncounters.InfrastructureRootTypeId = GetII(_EncompassingEncounterInfo.getTypeId());
		_EncompassingEncounters.TemplateIds = GetIIList(_EncompassingEncounterInfo.getTemplateIds());
		_EncompassingEncounters.Code = GetCE(_EncompassingEncounterInfo.getCode());
		_EncompassingEncounters.Ids = GetIIList(_EncompassingEncounterInfo.getIds());
		_EncompassingEncounters.EffectiveTime = GetIVL_TS(_EncompassingEncounterInfo.getEffectiveTime());
		_EncompassingEncounters.DischargeDispositionCode = GetCE(_EncompassingEncounterInfo.getDischargeDispositionCode());
		_EncompassingEncounters.ResponsibleParty = GetResponsibleParty(_EncompassingEncounterInfo.getResponsibleParty());
		_EncompassingEncounters.EncounterParticipants = GetEncounterParticipantList(_EncompassingEncounterInfo.getEncounterParticipants());
		_EncompassingEncounters.Location = GetLocation(_EncompassingEncounterInfo.getLocation())
		_EncompassingEncounters.NullFlavor  = GetNullFlavor(_EncompassingEncounterInfo.getNullFlavor());
		_EncompassingEncounters.ActClass = GetNullFlavor(_EncompassingEncounterInfo.getClassCode());
		_EncompassingEncounters.ActMood = GetNullFlavor(_EncompassingEncounterInfo.getMoodCode());
	} else {
		_EncompassingEncounters.RealmCodes = GetCSList(null);
		_EncompassingEncounters.InfrastructureRootTypeId = GetII(null);
		_EncompassingEncounters.TemplateIds = GetIIList(null);
		_EncompassingEncounters.Code = GetCE(null);
		_EncompassingEncounters.Ids = GetIIList(null);
		_EncompassingEncounters.EffectiveTime = GetIVL_TS(null);
		_EncompassingEncounters.DischargeDispositionCode = GetCE(null);
		_EncompassingEncounters.ResponsibleParty = GetResponsibleParty(null);
		_EncompassingEncounters.EncounterParticipants = GetEncounterParticipantList(null);
		_EncompassingEncounters.Location = GetLocation(null)
		_EncompassingEncounters.NullFlavor  = GetNullFlavor(null);
		_EncompassingEncounters.ActClass = GetNullFlavor(null);
		_EncompassingEncounters.ActMood = GetNullFlavor(null);
	}
	return _EncompassingEncounters;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>322f25e6-8dde-4781-8b5f-521f6662664b</id>
            <name>GetEncounter</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997599</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetEncounter(_encounterInfo) {
	var _Encounters = {};
	if(_encounterInfo != null) {
		_Encounters.RealmCodes = GetCSList(_encounterInfo.getRealmCodes());
		_Encounters.TypeId  = GetII(_encounterInfo.getTypeId());
		_Encounters.TemplateIds  = GetIIList(_encounterInfo.getTemplateIds());
		_Encounters.Ids  = GetIIList(_encounterInfo.getIds());
		_Encounters.Code=GetCD(_encounterInfo.getCode());
		_Encounters.Text=GetED(_encounterInfo.getText());
		_Encounters.StatusCode=GetCS(_encounterInfo.getStatusCode());
		_Encounters.EffectiveTime=GetIVL_TS(_encounterInfo.getEffectiveTime());
		_Encounters.PriorityCode=GetCE(_encounterInfo.getPriorityCode());
		_Encounters.Subject=GetSubject(_encounterInfo.getSubject());
		_Encounters.Specimen=GetSpecimenList(_encounterInfo.getSpecimens());
		_Encounters.Performer2=GetPerformer2List(_encounterInfo.getPerformers());

		_Encounters.Author=GetAuthorList(_encounterInfo.getAuthors());
		_Encounters.Informant12=GetInformant12List(_encounterInfo.getInformants());

		_Encounters.Participant2=GetParticipant2List(_encounterInfo.getParticipants());
		_Encounters.EntryRelationship=GetEntryRelationshipList(_encounterInfo.getEntryRelationships());//template needed

		_Encounters.Reference=GetReferenceList(_encounterInfo.getReferences());
		_Encounters.Precondition=GetPreconditionList(_encounterInfo.getPreconditions());//template needed
		
		_Encounters.NullFlavor  = GetNullFlavor(_encounterInfo.getNullFlavor());
		_Encounters.ClassCode  = GetVocabInfo(_encounterInfo.getClassCode());

		_Encounters.MoodCode  = GetVocabInfo(_encounterInfo.getMoodCode());
		//_Encounters.SDTCDischargeDispositionCodes = GetCEList(_encounterInfo.getSDTCDischargeDispositionCodes());
	}
	return _Encounters;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>5b7a9776-520f-4c7f-94ab-a8bfbefa1d01</id>
            <name>GetEncounterParticipant</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996358</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetEncounterParticipant(_EncounterParticipantInfo) {
	var _EncounterParticipants = {};
	if(_EncounterParticipantInfo != null) {
		_EncounterParticipants.RealmCodes = GetCSList(_EncounterParticipantInfo.getRealmCodes());
		_EncounterParticipants.InfrastructureRootTypeId = GetII(_EncounterParticipantInfo.getTypeId());
		_EncounterParticipants.TemplateIds = GetIIList(_EncounterParticipantInfo.getTemplateIds());
		_EncounterParticipants.IVL_TS = GetIVL_TS(_EncounterParticipantInfo.getTime());
		_EncounterParticipants.AssignedEntity = GetAssignedEntity(_EncounterParticipantInfo.getAssignedEntity());
		_EncounterParticipants.NullFlavor  = GetNullFlavor(_EncounterParticipantInfo.getNullFlavor());
		_EncounterParticipants.x_EncounterParticipant = GetNullFlavor(_EncounterParticipantInfo.getTypeCode());
	} else {
		_EncounterParticipants.RealmCodes = GetCSList(null);
		_EncounterParticipants.InfrastructureRootTypeId = GetII(null);
		_EncounterParticipants.TemplateIds = GetIIList(null);
		_EncounterParticipants.IVL_TS = GetIVL_TS(null);
		_EncounterParticipants.AssignedEntity = GetAssignedEntity(null);
		_EncounterParticipants.NullFlavor  = GetNullFlavor(null);
		_EncounterParticipants.x_EncounterParticipant = GetNullFlavor(null);
	}
	return _EncounterParticipants;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>f9e7a41c-904c-4cf1-8922-88ed94176b89</id>
            <name>GetEncounterParticipantList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998278</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetEncounterParticipantList(_EncounterParticipantInfo) {
	var _EncounterParticipants = []
	if(_EncounterParticipantInfo != null) {
		var _EncounterParticipantInfosize = _EncounterParticipantInfo.size();
		var _i = 0;
		if(_EncounterParticipantInfosize &gt; 0) {
			for(;_i&lt; _EncounterParticipantInfosize ; _i++) {

			var _EncounterParticipant = _EncounterParticipantInfo.get(_i);

			var EncounterParticipant  = GetEncounterParticipant(_EncounterParticipant);
			if(EncounterParticipant != null) {
				_EncounterParticipants.push(EncounterParticipant);
			}
		}	
		} else {
			var EncounterParticipant  = GetEncounterParticipant(null);
			if(EncounterParticipant != null) {
				_EncounterParticipants.push(EncounterParticipant);
			}
		}
			
	} else {
			var EncounterParticipant  = GetEncounterParticipant(null);
			if(EncounterParticipant != null) {
				_EncounterParticipants.push(EncounterParticipant);
			}
	}
	
	return _EncounterParticipants;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>d037b817-6704-442e-a39b-2181d3d783b2</id>
            <name>GetENList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997008</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetENList(_ENListInfo) {
	var _ENList = []
	if(_ENListInfo != null) {
		var _ENListInfosize = _ENListInfo.size();
		var _i = 0;
		
		for(;_i&lt; _ENListInfosize ; _i++) {
			var _EN = _ENListInfo.get(_i);

			var EN  = GetEN(_EN);
			if(EN != null) {
				_ENList.push(EN);	
			}
		}	
	}
	return _ENList;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>169bada6-1105-454b-80ce-c7e2589f3422</id>
            <name>GetEntity</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996791</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetEntity(_EntityInfo) {
	var _Entities = {};
	if(_EntityInfo != null) {
		_Entities.RealmCodes = GetCSList(_EntityInfo.getRealmCodes());
		_Entities.InfrastructureRootTypeId = GetII(_EntityInfo.getTypeId());
		_Entities.TemplateIds = GetIIList(_EntityInfo.getTemplateIds());
		_Entities.Ids = GetIIList(_EntityInfo.getIds());
		_Entities.Code = GetCE(_EntityInfo.getCode());
		_Entities.Desc = GetED(_EntityInfo.getDesc());
		_Entities.NullFlavor  = GetNullFlavor(_EntityInfo.getNullFlavor());
		_Entities.EntityClassRoot = GetNullFlavor(_EntityInfo.getClassCode());
		_Entities.EntityDeterminer = GetNullFlavor(_EntityInfo.getDeterminerCode());
	} else {
		_Entities.RealmCodes = GetCSList(null);
		_Entities.InfrastructureRootTypeId = GetII(null);
		_Entities.TemplateIds = GetIIList(null);
		_Entities.Ids = GetIIList(null);
		_Entities.Code = GetCE(null);
		_Entities.Desc = GetED(null);
		_Entities.NullFlavor  = GetNullFlavor(null);
		_Entities.EntityClassRoot = GetNullFlavor(null);
		_Entities.EntityDeterminer = GetNullFlavor(null);
	}
	return _Entities;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>f6ea91bb-7f9e-47fa-9925-130738b1c03d</id>
            <name>GetEntry</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999390</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetEntry(_EntryInfo) {
	var _Entry = {};
	if(_EntryInfo != null) {
		_Entry.RealmCodes = GetCSList(_EntryInfo.getRealmCodes());
		_Entry.InfrastructureRootTypeId = GetII(_EntryInfo.getTypeId());
		_Entry.TemplateIds = GetIIList(_EntryInfo.getTemplateIds());
		_Entry.Act = GetAct(_EntryInfo.getAct(),_level);
		_Entry.Encounter = GetEncounter(_EntryInfo.getEncounter());
		_Entry.Observation = GetObservation(_EntryInfo.getObservation());
		_Entry.ObservationMedia = GetObservationMedia(_EntryInfo.getObservationMedia());
		_Entry.Organizer = GetOrganizer(_EntryInfo.getOrganizer());
		//_Entry.Procedure = GetProcedure(_EntryInfo.getProcedure());
		//_Entry.RegionOfInterest = GetRegionOfInterest(_EntryInfo.getRegionOfInterest());
		//_Entry.SubstanceAdministration = GetSubstanceAdministration(_EntryInfo.getSubstanceAdministration());
		//_Entry.Supply = GetSupply(_EntryInfo.getSupply());
		_Entry.NullFlavor = GetNullFlavor(_EntryInfo.getNullFlavor());
		_Entry.x_ActRelationshipEntry = GetVocabInfo(_EntryInfo.getTypeCode());
		_Entry.ContextConductionInd = _EntryInfo.getContextConductionInd();
	}/* else {
		_Entry.RealmCodes = GetCSList(null);
		_Entry.InfrastructureRootTypeId = GetII(null);
		_Entry.TemplateIds = GetIIList(null);
		_Entry.Act = GetAct(null);
		_Entry.Encounter = GetEncounter(null);
		_Entry.Observation = GetObservation(null);
		_Entry.ObservationMedia = GetObservationMedia(null);
		_Entry.Organizer = GetOrganizer(null);
		_Entry.Procedure = GetProcedure(null);
		_Entry.RegionOfInterest = GetRegionOfInterest(null);
		_Entry.SubstanceAdministration = GetSubstanceAdministration(null);
		_Entry.Supply = GetSupply(null);
		_Entry.NullFlavor = GetNullFlavor(null);
		_Entry.x_ActRelationshipEntry = GetVocabInfo(null);
		_Entry.ContextConductionInd = &quot;&quot;;
	}*/
	return _Entry;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>ae0ff93f-cb3a-4c47-af3b-8ebc60f8e63a</id>
            <name>GetEntryList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665308000124</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetEntryList(_EntryInfo) {
	var _Entrys = []
	if(_EntryInfo != null) {
		var _EntryInfosize = _EntryInfo.size();
		var _i = 0;
		if(_EntryInfosize &gt; 0) {
			for(;_i&lt; _EntryInfosize ; _i++) {

			var _Entry = _EntryInfo.get(_i);

			var Entry  = GetEntry(_Entry);
			if(Entry != null) {
				_Entrys.push(Entry);
			}
		}	
		} else {
			/*var Entry  = GetEntry(null);
			if(Entry != null) {
				_Entrys.push(Entry);
			}*/
		}
			
	} else {
/*			var Entry  = GetEntry(null);
			if(Entry != null) {
				_Entrys.push(Entry);
			}*/
	}
	
	return _Entrys;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>bbfe41d0-d59c-4bc8-a2e5-66b80b41af91</id>
            <name>GetEntryRelationship</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999622</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetEntryRelationship(_EntryRelationshipInfo) {
	var _EntryRelationship = {};
	if(_EntryRelationshipInfo != null &amp;&amp; _level &lt; 3) {
		_EntryRelationship.RealmCodes = GetCSList(_EntryRelationshipInfo.getRealmCodes());
		_EntryRelationship.InfrastructureRootTypeId = GetII(_EntryRelationshipInfo.getTypeId());
		_EntryRelationship.TemplateIds = GetIIList(_EntryRelationshipInfo.getTemplateIds());
		_EntryRelationship.SequenceNumber = GetINT(_EntryRelationshipInfo.getSequenceNumber());
		_EntryRelationship.SeperatableInd = GetBL(_EntryRelationshipInfo.getSeperatableInd());
		_EntryRelationship.Act = GetAct(_EntryRelationshipInfo.getAct());
		_EntryRelationship.Encounter = GetEncounter(_EntryRelationshipInfo.getEncounter());
		_EntryRelationship.Observation = GetObservation(_EntryRelationshipInfo.getObservation());
		_EntryRelationship.ObservationMedia = GetObservationMedia(_EntryRelationshipInfo.getObservationMedia());
		_EntryRelationship.Organizer = GetOrganizer(_EntryRelationshipInfo.getOrganizer());
		//_EntryRelationship.Procedure = GetProcedure(_EntryRelationshipInfo.getProcedure());
		//_EntryRelationship.RegionOfInterest = GetRegionOfInterest(_EntryRelationshipInfo.getRegionOfInterest());
		//_EntryRelationship.SubstanceAdministration = GetSubstanceAdministration(_EntryRelationshipInfo.getSubstanceAdministration());
		//_EntryRelationship.Supply = GetSupply(_EntryRelationshipInfo.getSupply());
		
		_EntryRelationship.NullFlavor = GetNullFlavor(_EntryRelationshipInfo.getNullFlavor());
		_EntryRelationship.x_ActRelationshipEntryRelationship = GetVocabInfo(_EntryRelationshipInfo.getTypeCode());
		_EntryRelationship.ContextConductionInd = _EntryRelationshipInfo.getContextConductionInd();
		
	} /*else {
		_EntryRelationship.RealmCodes = GetCSList(null);
		_EntryRelationship.InfrastructureRootTypeId = GetII(null);
		_EntryRelationship.TemplateIds = GetIIList(null);
		_EntryRelationship.SequenceNumber = GetINT(null);
		_EntryRelationship.SeperatableInd = GetBL(null);
		_EntryRelationship.Act = GetAct(null);
		_EntryRelationship.Encounter = GetEncounter(null);
		_EntryRelationship.Observation = GetObservation(null);
		_EntryRelationship.ObservationMedia = GetObservationMedia(null);
		_EntryRelationship.Organizer = GetOrganizer(null);
		_EntryRelationship.Procedure = GetProcedure(null);
		_EntryRelationship.RegionOfInterest = GetRegionOfInterest(null);
		_EntryRelationship.SubstanceAdministration = GetSubstanceAdministration(null);
		_EntryRelationship.Supply = GetSupply(null);
		_EntryRelationship.NullFlavor = GetNullFlavor(null);
		_EntryRelationship.x_ActRelationshipEntryRelationship = GetVocabInfo(null);
		_EntryRelationship.ContextConductionInd = &quot;&quot;;
	}*/
	return _EntryRelationship;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>9ecbb1e3-e800-4e72-88db-437ae04d1272</id>
            <name>GetEntryRelationshipList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998661</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetEntryRelationshipList(_EntryRelationshipInfo) {
	var _EntryRelationships = []
	if(_EntryRelationshipInfo != null) {
		var _EntryRelationshipInfosize = _EntryRelationshipInfo.size();
		var _i = 0;
		if(_EntryRelationshipInfosize &gt; 0) {
			for(;_i&lt; _EntryRelationshipInfosize ; _i++) {

			var _EntryRelationship = _EntryRelationshipInfo.get(_i);

			var EntryRelationship  = GetEntryRelationship(_EntryRelationship);
			if(EntryRelationship != null) {
				_EntryRelationships.push(EntryRelationship);
			}
		}	
		} else {
			/*var EntryRelationship  = GetEntryRelationship(null);
			if(EntryRelationship != null) {
				_EntryRelationships.push(EntryRelationship);
			}*/
		}
			
	} else {
			/*var EntryRelationship  = GetEntryRelationship(null);
			if(EntryRelationship != null) {
				_EntryRelationships.push(EntryRelationship);
			}*/
	}
	
	return _EntryRelationships;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>9ec88f8e-05d6-438e-adb3-093401f4efbe</id>
            <name>GetENXPList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999289</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetENXPList(_ENXPsInfo) {
	var _ENXPs = []
	if(_ENXPsInfo != null) {
		var _ENXPsInfosize = _ENXPsInfo.size();
		var _i = 0;

		if(_ENXPsInfosize &gt; 0) {
			for(;_i&lt; _ENXPsInfosize ; _i++) {
			var ENXP = {};
			var _ENXP = _ENXPsInfo.get(_i);
			if(_ENXP != null) {
				ENXP.EntityNamePartType = GetVocabInfo(_ENXP.getPartType());
				ENXP.EntityNamePartQualifier = GetVocabInfoList(_ENXP.getQualifiers());
				ENXP.ENXP_ST = GetST(_ENXP);
			
				_ENXPs.push(ENXP);	
			} else {
				ENXP.EntityNamePartType = GetVocabInfo(null);
				ENXP.EntityNamePartQualifier = GetVocabInfoList(null);
				ENXP.ENXP_ST = GetST(null);
			
				_ENXPs.push(ENXP);	
			}
			
		}	
		} else {
			var ENXP = {};
			ENXP.EntityNamePartType = GetVocabInfo(null);
				ENXP.EntityNamePartQualifier = GetVocabInfoList(null);
				ENXP.ENXP_ST = GetST(null);
			
				_ENXPs.push(ENXP);
		}
		
			
	} else {
		var ENXP = {};
			ENXP.EntityNamePartType = GetVocabInfo(null);
				ENXP.EntityNamePartQualifier = GetVocabInfoList(null);
				ENXP.ENXP_ST = GetST(null);
			
				_ENXPs.push(ENXP);
	}
		
	return _ENXPs;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>2406961f-e94f-480e-8c2b-19bc1bc3c480</id>
            <name>GetExternalAct</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998224</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetExternalAct(_externalActInfo) {
	var _ExternalAct = {};

	if(_externalActInfo != null) {
	_ExternalAct.RealmCodes = GetCSList(_externalActInfo.getRealmCodes());
	_ExternalAct.InfrastructureRootTypeId = GetII(_externalActInfo.getTypeId());
	_ExternalAct.TemplateIds = GetIIList(_externalActInfo.getTemplateIds());
	_ExternalAct.Ids = GetIIList(_externalActInfo.getIds());
	_ExternalAct.Code = GetCE(_externalActInfo.getCode());
	_ExternalAct.Text = GetED(_externalActInfo.getText());
	_ExternalAct.NullFlavor = GetNullFlavor(_externalActInfo.getNullFlavor());
	_ExternalAct.ActClassRoot = GetVocabInfo(_externalActInfo.getClassCode());
	_ExternalAct.ActMood = GetVocabInfo(_externalActInfo.getMoodCode());
	}
	return _ExternalAct;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>68baa340-5380-4db7-8673-d01bf96313de</id>
            <name>GetExternalDocument</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307995032</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetExternalDocument(_ExternalDocumentInfo) {
	var _ExternalDocument = {};

	if(_ExternalDocumentInfo != null) {
	_ExternalDocument.RealmCodes = GetCSList(_ExternalDocumentInfo.getRealmCodes());
	_ExternalDocument.InfrastructureRootTypeId = GetII(_ExternalDocumentInfo.getTypeId());
	_ExternalDocument.TemplateIds = GetIIList(_ExternalDocumentInfo.getTemplateIds());
	_ExternalDocument.Ids = GetIIList(_ExternalDocumentInfo.getIds());
	_ExternalDocument.Code = GetCE(_ExternalDocumentInfo.getCode());
	_ExternalDocument.Text = GetED(_ExternalDocumentInfo.getText());
	_ExternalDocument.SetId = GetII(_ExternalDocumentInfo.getSetId());
	_ExternalDocument.VersionNumber = GetINT(_ExternalDocumentInfo.getVersionNumber());
	_ExternalDocument.NullFlavor = GetNullFlavor(_ExternalDocumentInfo.getNullFlavor());
	_ExternalDocument.ActClassDocument = GetVocabInfo(_ExternalDocumentInfo.getClassCode());
	_ExternalDocument.ActMood = GetVocabInfo(_ExternalDocumentInfo.getMoodCode());
	}
	return _ExternalDocument;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>7b935102-4915-462b-898a-f0f21570671c</id>
            <name>GetExternalObservation</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996468</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetExternalObservation(_ExternalObservationInfo) {
	var _ExternalObservation = {};

	if(_ExternalObservationInfo != null) {
	_ExternalObservation.RealmCodes = GetCSList(_ExternalObservationInfo.getRealmCodes());
	_ExternalObservation.InfrastructureRootTypeId = GetII(_ExternalObservationInfo.getTypeId());
	_ExternalObservation.TemplateIds = GetIIList(_ExternalObservationInfo.getTemplateIds());
	_ExternalObservation.Ids = GetIIList(_ExternalObservationInfo.getIds());
	_ExternalObservation.Code = GetCE(_ExternalObservationInfo.getCode());
	_ExternalObservation.Text = GetED(_ExternalObservationInfo.getText());
	_ExternalObservation.NullFlavor = GetNullFlavor(_ExternalObservationInfo.getNullFlavor());
	_ExternalObservation.ActClassObservation = GetVocabInfo(_ExternalObservationInfo.getClassCode());
	_ExternalObservation.ActMood = GetVocabInfo(_ExternalObservationInfo.getMoodCode());
	}
	return _ExternalObservation;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>50719256-bf5d-4b5b-b201-f52c3bf5dd7a</id>
            <name>GetExternalProcedure</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998112</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetExternalProcedure(_ExternalProcedureInfo) {
	var _ExternalProcedure = {};

	if(_ExternalProcedureInfo != null) {
	_ExternalProcedure.RealmCodes = GetCSList(_ExternalProcedureInfo.getRealmCodes());
	_ExternalProcedure.InfrastructureRootTypeId = GetII(_ExternalProcedureInfo.getTypeId());
	_ExternalProcedure.TemplateIds = GetIIList(_ExternalProcedureInfo.getTemplateIds());
	_ExternalProcedure.Ids = GetIIList(_ExternalProcedureInfo.getIds());
	_ExternalProcedure.Code = GetCE(_ExternalProcedureInfo.getCode());
	_ExternalProcedure.Text = GetED(_ExternalProcedureInfo.getText());
	_ExternalProcedure.NullFlavor = GetNullFlavor(_ExternalProcedureInfo.getNullFlavor());
	_ExternalProcedure.ActClass = GetVocabInfo(_ExternalProcedureInfo.getClassCode());
	_ExternalProcedure.ActMood = GetVocabInfo(_ExternalProcedureInfo.getMoodCode());
	}
	return _ExternalProcedure;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>1d05083e-2c09-4d38-a3c1-5d8df67faf3e</id>
            <name>GetFeatureMap</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307995542</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetFeatureMap(_featureMapInfo) {
	channelMap.put(&apos;_featureMapInfo&apos;,_featureMapInfo);
	var _FeatureMap = [];
	if(_featureMapInfo != null) {
		var _i = 0;
		var _limit = _featureMapInfo.size();
		for(_i = _limit - 1;_i &gt;=0; _i--) {
			var _entry = _featureMapInfo.get(_i);
			if(_entry != null) {
				var featureMap = {};
				if (_entry.getEStructuralFeature() instanceof org.eclipse.emf.ecore.EReference) {
					featureMap.name = _entry.getEStructuralFeature().getName();
                    	var _anyType = _entry.getValue();
					//featureMap.AnyType = GetFeatureMap(_anyType.getAny());
					featureMap.AnyTypeFeatureMap = GetFeatureMap(_anyType.getMixed());
                } else {
						if (_entry.getValue() != null) {
                        var _value = _entry.getValue().toString();
                        _value = _value.replace(&quot;\n\t&quot;,&quot;&quot;);
                        _value = _value.replace(&quot;\t&quot;,&quot;&quot;);
                        _value = _value.replace(&quot;\t&quot;,&quot;&quot;);
                        _value = _value.replace(&quot;\t&quot;,&quot;&quot;);
                        _value = _value.replace(&quot;\t&quot;,&quot;&quot;);
                        _value = _value.replace(&quot;\t&quot;,&quot;&quot;);
                        _value = _value.replace(&quot;\t&quot;,&quot;&quot;);
                        _value = _value.replace(&quot;\t&quot;,&quot;&quot;);
                        _value = _value.replace(&quot;\t&quot;,&quot;&quot;);
                        _value = _value.replace(&quot;\t&quot;,&quot;&quot;);
                        if(_value != &quot;&quot;){
                        	featureMap.value = _value;	
                        }
                    }
				}
				
				if(JSON.stringify(featureMap) != &quot;{}&quot;){
					_FeatureMap.push(featureMap);	
				}
				
			}
		}
	} else {
		_FeatureMap = [];
	}
	
	return _FeatureMap;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>3b497635-5cf1-4bb3-b122-30c5298a1090</id>
            <name>GetGuardianList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999319</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetGuardianList(_guardianInfo) {
	var _Guardians = [];
	if(_guardianInfo != null) {
		var _guardianInfoSize = _guardianInfo.size();
		var _i = 0;
		if(_guardianInfoSize &gt; 0) {
			for(;_i&lt; _guardianInfoSize ; _i++) {
			var Guardian = {};
			var _guardian = _guardianInfo.get(_i);

			if(_guardian != null) {
				Guardian.TemplateIds = GetIIList(_guardian.getTemplateIds());
				Guardian.Ids = GetIIList(_guardian.getIds());
				Guardian.Code = GetCE(_guardian.getCode());
				Guardian.Address = GetADList(_guardian.getAddrs());
				Guardian.Telecoms = GetTELList(_guardian.getTelecoms());
				Guardian.Person = GetPerson(_guardian.getGuardianPerson());
				Guardian.Organization = GetOrganization(_guardian.getGuardianOrganization());
				Guardian.NullFlavor = GetNullFlavor(_guardian.getNullFlavor());
				Guardian.RoleClass = GetVocabInfo(_guardian.getClassCode());
				_Guardians.push(Guardian);
			} else {
				Guardian.TemplateIds = GetIIList(null);
				Guardian.Ids = GetIIList(null);
				Guardian.Code = GetCE(null);
				Guardian.Address = GetADList(null);
				Guardian.Telecoms = GetTELList(null);
				Guardian.Person = GetPerson(null);
				Guardian.Organization = GetOrganization(null);
				Guardian.NullFlavor = GetNullFlavor(null);
				Guardian.RoleClass = GetVocabInfo(null);
				_Guardians.push(Guardian);
			}
		}	
		} else {
			var Guardian = {};
		Guardian.TemplateIds = GetIIList(null);
				Guardian.Ids = GetIIList(null);
				Guardian.Code = GetCE(null);
				Guardian.Address = GetADList(null);
				Guardian.Telecoms = GetTELList(null);
				Guardian.Person = GetPerson(null);
				Guardian.Organization = GetOrganization(null);
				Guardian.NullFlavor = GetNullFlavor(null);
				Guardian.RoleClass = GetVocabInfo(null);
				_Guardians.push(Guardian);	
		}
		
	} else {
		var Guardian = {};
		Guardian.TemplateIds = GetIIList(null);
				Guardian.Ids = GetIIList(null);
				Guardian.Code = GetCE(null);
				Guardian.Address = GetADList(null);
				Guardian.Telecoms = GetTELList(null);
				Guardian.Person = GetPerson(null);
				Guardian.Organization = GetOrganization(null);
				Guardian.NullFlavor = GetNullFlavor(null);
				Guardian.RoleClass = GetVocabInfo(null);
				_Guardians.push(Guardian);
	}
	return _Guardians;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>6f35fd61-eb84-4fc0-a8b2-45d28102ebf7</id>
            <name>GetHealthCareFacility</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999247</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetHealthCareFacility(_HealthCareFacilityInfo) {
	var _HealthCareFacilities = {};
	if(_HealthCareFacilityInfo != null) {
		_HealthCareFacilities.RealmCodes = GetCSList(_HealthCareFacilityInfo.getRealmCodes());
		_HealthCareFacilities.InfrastructureRootTypeId = GetII(_HealthCareFacilityInfo.getTypeId());
		_HealthCareFacilities.TemplateIds = GetIIList(_HealthCareFacilityInfo.getTemplateIds());
		_HealthCareFacilities.Ids = GetIIList(_HealthCareFacilityInfo.getIds());
		_HealthCareFacilities.Code = GetCE(_HealthCareFacilityInfo.getCode());
		//_HealthCareFacilities.Place = GetLocation(_HealthCareFacilityInfo.getLocation());
		//_HealthCareFacilities.Organization = GetOrganization(_HealthCareFacilityInfo.getServiceProviderOrganization());
		_HealthCareFacilities.NullFlavor  = GetNullFlavor(_HealthCareFacilityInfo.getNullFlavor());
		_HealthCareFacilities.RoleClassServiceDeliveryLocation = GetNullFlavor(_HealthCareFacilityInfo.getClassCode());
	} else {
		_HealthCareFacilities.RealmCodes = GetCSList(null);
		_HealthCareFacilities.InfrastructureRootTypeId = GetII(null);
		_HealthCareFacilities.TemplateIds = GetIIList(null);
		_HealthCareFacilities.Ids = GetIIList(null);
		_HealthCareFacilities.Code = GetCE(null);
		//_HealthCareFacilities.Place = GetLocation(null);
		//_HealthCareFacilities.Organization = GetOrganization(null);
		_HealthCareFacilities.NullFlavor  = GetNullFlavor(null);
		_HealthCareFacilities.RoleClassServiceDeliveryLocation = GetNullFlavor(null);
	}
	return _HealthCareFacilities;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>cfd43366-86a6-4eba-b38e-f54d2019049b</id>
            <name>GethtmlTableValue</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996307</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GethtmlTableValue(sectionText) 
{
	// TODO: Enter code here
	var referenceValue=_referenceValue.replace(&apos;#&apos;,&apos;&apos;)

	importPackage(org.jsoup) // initialize package
	var contents = sectionText;

	var doc = Jsoup.parse(contents); // Parse and store in doc

	var notes=doc.getElementById(referenceValue).text();


	return notes;


}


/*
	In the code where you see GetValueFromTable function been called, you can replace it with this function. Takes the same 2 argument.
	
	Download jsoup-1.13.1.jar from https://jsoup.org/download 
*/</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>f74c5b81-0d98-4fec-9a03-010e025c6fc8</id>
            <name>GetII</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998894</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetII(_IdInfo) {
	var _Id = {};
	if(_IdInfo != null) {
		
			if(_IdInfo.getRoot() != null) {
				_Id.Root = _IdInfo.getRoot();
			} else {
				_Id.Root = &quot;&quot;;
			}

			if(_IdInfo.getExtension() != null) {
				_Id.Extension = _IdInfo.getExtension();
			} else {
				_Id.Extension = &quot;&quot;;
			}

			if(_IdInfo.getAssigningAuthorityName() != null) {
				_Id.AssigningAuthorityName = _IdInfo.getAssigningAuthorityName();
			} else {
				_Id.AssigningAuthorityName = &quot;&quot;;
			}

			if(_IdInfo.getDisplayable() != null) {
				_Id.Displayable = _IdInfo.getDisplayable();
			} else {
				_Id.Displayable = &quot;&quot;;
			}
	} else {
		_Id.Root = &quot;&quot;;
		_Id.Extension = &quot;&quot;;
		_Id.AssigningAuthorityName = &quot;&quot;;
		_Id.Displayable = &quot;&quot;;
	}
	
	return _Id;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>09795060-a0fd-4954-8687-f814ce97f70d</id>
            <name>GetIIList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997979</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetIIList(_templateInfo) {
	var _TemplateIds = [];
	if(_templateInfo != null) {
		var _sectionTemplateIdSize = _templateInfo.size();
		var _i = 0;

		if(_sectionTemplateIdSize &gt; 0) {
			for(;_i&lt; _sectionTemplateIdSize ; _i++) {
			var templateId = {};
			var _templateId = _templateInfo.get(_i);

			if(_templateId != null) {
				if(_templateId.getRoot() != null) {
				templateId.Root = _templateId.getRoot();
			} else {
				templateId.Root = &quot;&quot;;
			}

			if(_templateId.getExtension() != null) {
				templateId.Extension = _templateId.getExtension();
			} else {
				templateId.Extension = &quot;&quot;;
			}

			if(_templateId.getAssigningAuthorityName() != null) {
				templateId.AssigningAuthorityName = _templateId.getAssigningAuthorityName();
			} else {
				templateId.AssigningAuthorityName = &quot;&quot;;
			}

			if(_templateId.getDisplayable() != null) {
				templateId.Displayable = _templateId.getDisplayable();
			} else {
				templateId.Displayable = &quot;&quot;;
			}
			_TemplateIds.push(templateId);
			}
		}	
		} else {
			
		var templateId = {};
		templateId.Root = &quot;&quot;;
		templateId.Extension = &quot;&quot;;
		templateId.AssigningAuthorityName = &quot;&quot;;
		templateId.Displayable = &quot;&quot;;
		_TemplateIds.push(templateId);
		
		}
		
		
		
	} else {
		var templateId = {};
		templateId.Root = &quot;&quot;;
		templateId.Extension = &quot;&quot;;
		templateId.AssigningAuthorityName = &quot;&quot;;
		templateId.Displayable = &quot;&quot;;
		_TemplateIds.push(templateId);
	}

	return _TemplateIds;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>c940648a-ebb1-45b7-b7ce-c15fb8713060</id>
            <name>GetInformant12</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998185</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetInformant12(_Informant12Info) {
	var _Informant12 = {};
	if(_Informant12Info != null) {
		_Informant12.RealmCodes	= GetCSList(_Informant12Info.getRealmCodes());
		_Informant12.TemplateIds = GetIIList(_Informant12Info.getTemplateIds());
		_Informant12.AssignedEntity  = GetAssignedEntity(_Informant12Info.getAssignedEntity());
		_Informant12.RelatedEntity  = GetRelatedEntity(_Informant12Info.getRelatedEntity());
		_Informant12.NullFlavor = GetNullFlavor(_Informant12Info.getNullFlavor());
		_Informant12.TypeCode = GetVocabInfo(_Informant12Info.getTypeCode());
		_Informant12.ContextControlCode = GetContextControlCode(_Informant12Info.getContextControlCode());
	} else {
		_Informant12.RealmCodes	= GetCSList(null);
		_Informant12.TemplateIds = GetIIList(null);
		_Informant12.AssignedEntity  = GetAssignedEntity(null);
		_Informant12.RelatedEntity  = GetRelatedEntity(null);
		_Informant12.NullFlavor = GetNullFlavor(null);
		_Informant12.TypeCode = GetVocabInfo(null);
		_Informant12.ContextControlCode = GetContextControlCode(null);
	}
	return _Informant12;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>4e5300b9-3d92-4d46-94d9-ff3de26c9dae</id>
            <name>GetInformant12List</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999186</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetInformant12List(_Informant12Info) {
	var _Informant12s = []
	if(_Informant12Info != null) {
		var _Informant12Infosize = _Informant12Info.size();
		var _i = 0;
		if(_Informant12Infosize &gt; 0) {
			for(;_i&lt; _Informant12Infosize ; _i++) {

			var _Informant12 = _Informant12Info.get(_i);

			var Informant12  = GetInformant12(_Informant12);
			if(Informant12 != null) {
				_Informant12s.push(Informant12);
			}
		}	
		} else {
			var Informant12  = GetInformant12(null);
			if(Informant12 != null) {
				_Informant12s.push(Informant12);
			}	
		}
	} else {
		var Informant12  = GetInformant12(null);
			if(Informant12 != null) {
				_Informant12s.push(Informant12);
			}
	}
	
	return _Informant12s;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>ebcd094d-8ac0-4ca5-b9c3-d310077d051f</id>
            <name>GetInformationRecipient</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997326</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetInformationRecipient(_InformationRecipientInfo) {
	var _InformationRecipient = {};
	if(_InformationRecipientInfo != null) {
		_InformationRecipient.RealmCodes = GetCSList(_InformationRecipientInfo.getRealmCodes());
		_InformationRecipient.InfrastructureRootTypeId = GetII(_InformationRecipientInfo.getTypeId());
		_InformationRecipient.TemplateIds = GetIIList(_InformationRecipientInfo.getTemplateIds());
		_InformationRecipient.IntendedRecipient = GetIntendedRecipient(_InformationRecipientInfo.getIntendedRecipient());
		_InformationRecipient.NullFlavor  = GetNullFlavor(_InformationRecipientInfo.getNullFlavor());
		_InformationRecipient.x_InformationRecipient = GetNullFlavor(_InformationRecipientInfo.getTypeCode());
	} else {
		_InformationRecipient.RealmCodes = GetCSList(null);
		_InformationRecipient.InfrastructureRootTypeId = GetII(null);
		_InformationRecipient.TemplateIds = GetIIList(null);
		_InformationRecipient.IntendedRecipient = GetIntendedRecipient(null);
		_InformationRecipient.NullFlavor  = GetNullFlavor(null);
		_InformationRecipient.x_InformationRecipient = GetNullFlavor(null);
	}
	return _InformationRecipient;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>f9918d94-264e-42d8-b356-225d3705acf8</id>
            <name>GetInformationRecipientList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996069</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetInformationRecipientList(_InformationRecipientInfo) {
	var _InformationRecipients = []
	if(_InformationRecipientInfo != null) {
		var _InformationRecipientInfosize = _InformationRecipientInfo.size();
		var _i = 0;
		if(_InformationRecipientInfosize &gt; 0) {
			for(;_i&lt; _InformationRecipientInfosize ; _i++) {

			var _InformationRecipient = _InformationRecipientInfo.get(_i);

			var InformationRecipient  = GetInformationRecipient(_InformationRecipient);
			if(InformationRecipient != null) {
				_InformationRecipients.push(InformationRecipient);
			}
		}	
		} else {
			var InformationRecipient  = GetInformationRecipient(null);
			if(InformationRecipient != null) {
				_InformationRecipients.push(InformationRecipient);
			}	
		}
	} else {
		var InformationRecipient  = GetInformationRecipient(null);
			if(InformationRecipient != null) {
				_InformationRecipients.push(InformationRecipient);
			}
	}
	
	return _InformationRecipients;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>fdea0d9c-846f-4430-9542-e7495e9cd4d9</id>
            <name>GetInfulfillmentOf</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997123</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetInfulfillmentOf(_InfulfillmentOfInfo) {
	var _InfulfillmentOfs = {};
	if(_InfulfillmentOfInfo != null) {
		_InfulfillmentOfs.RealmCodes = GetCSList(_InfulfillmentOfInfo.getRealmCodes());
		_InfulfillmentOfs.InfrastructureRootTypeId = GetII(_InfulfillmentOfInfo.getTypeId());
		_InfulfillmentOfs.TemplateIds = GetIIList(_InfulfillmentOfInfo.getTemplateIds());
		_InfulfillmentOfs.Order = GetOrder(_InfulfillmentOfInfo.getOrder());
		_InfulfillmentOfs.NullFlavor  = GetNullFlavor(_InfulfillmentOfInfo.getNullFlavor());
		_InfulfillmentOfs.ActRelationshipFulfills = GetNullFlavor(_InfulfillmentOfInfo.getTypeCode());
	} else {
		_InfulfillmentOfs.RealmCodes = GetCSList(null);
		_InfulfillmentOfs.InfrastructureRootTypeId = GetII(null);
		_InfulfillmentOfs.TemplateIds = GetIIList(null);
		_InfulfillmentOfs.Order = GetOrder(null);
		_InfulfillmentOfs.NullFlavor  = GetNullFlavor(null);
		_InfulfillmentOfs.ActRelationshipFulfills = GetNullFlavor(null);
	}
	return _InfulfillmentOfs;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>abd95dfd-2ca2-4dd3-ae3f-c745d1e55139</id>
            <name>GetInfulfillmentOfList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999498</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
	function GetInfulfillmentOfList(_InfulfillmentOfInfo) {
		var _InfulfillmentOfs = []
		if(_InfulfillmentOfInfo != null) {
			var _InfulfillmentOfInfosize = _InfulfillmentOfInfo.size();
			var _i = 0;
			if(_InfulfillmentOfInfosize &gt; 0) {
				for(;_i&lt; _InfulfillmentOfInfosize ; _i++) {

				var _InfulfillmentOf = _InfulfillmentOfInfo.get(_i);

				var InfulfillmentOf  = GetInfulfillmentOf(_InfulfillmentOf);
				if(InfulfillmentOf != null) {
					_InfulfillmentOfs.push(InfulfillmentOf);
				}
			}	
			} else {
				var InfulfillmentOf  = GetInfulfillmentOf(null);
				if(InfulfillmentOf != null) {
					_InfulfillmentOfs.push(InfulfillmentOf);
				}	
			}
		} else {
			var InfulfillmentOf  = GetInfulfillmentOf(null);
				if(InfulfillmentOf != null) {
					_InfulfillmentOfs.push(InfulfillmentOf);
				}
		}
		
		return _InfulfillmentOfs;
	}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>337cdbdd-1b9e-4826-b3f2-bb12ebec9bd6</id>
            <name>GetINT</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998414</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetINT(_INTInfo) {
	var _INT = {};
	if(_INTInfo != null) {
		
			if(_INTInfo.getValue() != null) {
				_INT.Value = _INTInfo.getValue();
			} else {
				_INT.Value = &quot;&quot;;
			}
	} else {
			_INT.Value = &quot;&quot;;
	}
	return _INT;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>25e493cc-00b9-46ee-9a36-654fcbb65c07</id>
            <name>GetIntendedRecipient</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997610</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetIntendedRecipient(_IntendedRecipientInfo) {
	var _IntendedRecipient = {};
	if(_IntendedRecipientInfo != null) {
		_IntendedRecipient.RealmCodes = GetCSList(_IntendedRecipientInfo.getRealmCodes());
		_IntendedRecipient.InfrastructureRootTypeId = GetII(_IntendedRecipientInfo.getTypeId());
		_IntendedRecipient.TemplateIds = GetIIList(_IntendedRecipientInfo.getTemplateIds());
		_IntendedRecipient.Ids = GetIIList(_IntendedRecipientInfo.getIds());
		_IntendedRecipient.Addrs = GetADList(_IntendedRecipientInfo.getAddrs());
		_IntendedRecipient.Telecoms = GetTELList(_IntendedRecipientInfo.getTelecoms());
		_IntendedRecipient.Person = GetPerson(_IntendedRecipientInfo.getInformationRecipient());
		_IntendedRecipient.Organization = GetOrganization(_IntendedRecipientInfo.getReceivedOrganization());
		_IntendedRecipient.NullFlavor  = GetNullFlavor(_IntendedRecipientInfo.getNullFlavor());
		_IntendedRecipient.x_InformationRecipientRole = GetNullFlavor(_IntendedRecipientInfo.getClassCode());
	} else {
		_IntendedRecipient.RealmCodes = GetCSList(null);
		_IntendedRecipient.InfrastructureRootTypeId = GetII(null);
		_IntendedRecipient.TemplateIds = GetIIList(null);
		_IntendedRecipient.Ids = GetIIList(null);
		_IntendedRecipient.Addrs = GetADList(null);
		_IntendedRecipient.Telecoms = GetTELList(null);
		_IntendedRecipient.Person = GetPerson(null);
		_IntendedRecipient.Organization = GetOrganization(null);
		_IntendedRecipient.NullFlavor  = GetNullFlavor(null);
		_IntendedRecipient.x_InformationRecipientRole = GetNullFlavor(null);
	}
	return _IntendedRecipient;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>2985948c-bd61-46ac-adf3-7cc79585da4c</id>
            <name>GetIVL_INT</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997536</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetIVL_INT(_IVL_INTInfo) {
	var _IVL_INT = {};

	if(_IVL_INTInfo != null){
		_IVL_INT.Low = GetIVXB_INT(_IVL_INTInfo.getLow());
		_IVL_INT.Center = GetINT(_IVL_INTInfo.getCenter());
		_IVL_INT.High = GetIVXB_INT(_IVL_INTInfo.getHigh());
		_IVL_INT.Width = GetINT(_IVL_INTInfo.getWidth());
		_IVL_INT.Value = GetINT(_IVL_INTInfo);
	} else {
		_IVL_INT.Low = GetIVXB_INT(null);
		_IVL_INT.Center = GetINT(null);
		_IVL_INT.High = GetIVXB_INT(null);
		_IVL_INT.Width = GetINT(null);
		_IVL_INT.Value = GetINT(null);
	}
	return _IVL_INT;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>faa162b5-a4df-4c05-9d2a-412769729c86</id>
            <name>GetIVL_PQ</name>
            <revision>1</revision>
            <lastModified>
              <time>1665308000070</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetIVL_PQ(_IVL_PQInfo) {
	var _IVL_PQ = {};

	if(_IVL_PQInfo != null){
		_IVL_PQ.Low = GetIVXB_PQ(_IVL_PQInfo.getLow());
		_IVL_PQ.Center = GetPQ(_IVL_PQInfo.getCenter());
		_IVL_PQ.High = GetIVXB_PQ(_IVL_PQInfo.getHigh());
		_IVL_PQ.Width = GetPQ(_IVL_PQInfo.getWidth());
		_IVL_PQ.SXCM_PQ = GetSXCM_PQ(_IVL_PQInfo);
	} else {
		_IVL_PQ.Low = GetIVXB_PQ(null);
		_IVL_PQ.Center = GetPQ(null);
		_IVL_PQ.High = GetIVXB_PQ(null);
		_IVL_PQ.Width = GetPQ(null);
		_IVL_PQ.SXCM_PQ = GetSXCM_PQ(null);
	}
	return _IVL_PQ;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>950cda9a-a31e-4113-91c8-86e0d5ecc598</id>
            <name>GetIVL_TS</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307995968</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetIVL_TS(_IVL_TSInfo) {
	var _IVL_TS = {};

	if(_IVL_TSInfo != null){
		_IVL_TS.Low = GetIVXB_TS(_IVL_TSInfo.getLow());
		_IVL_TS.Center = GetTS(_IVL_TSInfo.getCenter());
		_IVL_TS.High = GetIVXB_TS(_IVL_TSInfo.getHigh());
		_IVL_TS.Width = GetPQ(_IVL_TSInfo.getWidth());
		_IVL_TS.Value = GetTS(_IVL_TSInfo);
//		_IVL_TS.SXCM = GetSXCM_TS(_IVL_TSInfo);
	} else {
		_IVL_TS.Low = GetIVXB_TS(null);
		_IVL_TS.Center = GetTS(null);
		_IVL_TS.High = GetIVXB_TS(null);
		_IVL_TS.Width = GetPQ(null);
		_IVL_TS.Value = GetTS(null);
//		_IVL_TS.SXCM = GetSXCM_TS(null);
	}
	return _IVL_TS;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>09de238a-58b2-4d35-bae9-d1166c684f9d</id>
            <name>GetIVL_TSList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999051</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetIVL_TSList(_IVL_TSListInfo) {
	var _IVL_TSList = []
	if(_IVL_TSListInfo != null) {
		var _IVL_TSListInfosize = _IVL_TSListInfo.size();
		var _i = 0;
		
		for(;_i&lt; _IVL_TSListInfosize ; _i++) {
			var _IVL_TS = _IVL_TSListInfo.get(_i);

			var IVL_TS  = GetIVL_TS(_IVL_TS);
			if(IVL_TS != null) {
				_IVL_TSList.push(IVL_TS);	
			}
		}	
	}
	return _IVL_TSList;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>76563f3b-4f00-41b3-963f-98eec1b292d5</id>
            <name>GetIVXB_INT</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307995100</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetIVXB_INT(_IVXB_INTInfo) {
	var _IVXB_INT = {};
	if(_IVXB_INTInfo != null) {
		
			if(_IVXB_INTInfo.getInclusive() != null) {
				_IVXB_INT.Inclusive = _IVXB_INTInfo.getInclusive();
			} else {
				_IVXB_INT.Inclusive = &quot;&quot;;
			}
			_IVXB_INT.INT = GetINT(_IVXB_INTInfo);
	} else {
		_IVXB_INT.Inclusive = &quot;&quot;;
		_IVXB_INT.INT = GetINT(null);
	}
	return _IVXB_INT;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>302e50fc-eb6c-42da-824c-7b0ff93247cf</id>
            <name>GetIVXB_PQ</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998910</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetIVXB_PQ(_IVXB_PQInfo) {
	var _IVXB_PQ = {};
	if(_IVXB_PQInfo != null) {
		
			if(_IVXB_PQInfo.getInclusive() != null) {
				_IVXB_PQ.Inclusive = _IVXB_PQInfo.getInclusive();
			} else {
				_IVXB_PQ.Inclusive = &quot;&quot;;
			}
			_IVXB_PQ.PQ = GetPQ(_IVXB_PQInfo);
	} else {
		_IVXB_PQ.Inclusive = &quot;&quot;;
		_IVXB_PQ.PQ = GetPQ(null);
	}
	return _IVXB_PQ;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>7ceec776-3cdb-402a-8619-50d96e806948</id>
            <name>GetIVXB_TS</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998346</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetIVXB_TS(_IVXB_TSInfo) {
	var _IVXB_TS = {};
	if(_IVXB_TSInfo != null) {
		
			if(_IVXB_TSInfo.getInclusive() != null) {
				_IVXB_TS.Inclusive = _IVXB_TSInfo.getInclusive();
			} else {
				_IVXB_TS.Inclusive = &quot;&quot;;
			}

			_IVXB_TS.TS = GetTS(_IVXB_TSInfo);
	} else {
		_IVXB_TS.Inclusive = &quot;&quot;;
		_IVXB_TS.TS = GetTS(null);
	}
	return _IVXB_TS;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>b6fe58aa-ec91-49ce-99c3-980cf9f059a1</id>
            <name>GetLabeledDrug</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998099</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetLabeledDrug(_LabeledDrugInfo) {
	var _LabeledDrugs = {};
	if(_LabeledDrugInfo != null) {
		_LabeledDrugs.RealmCodes = GetCSList(_LabeledDrugInfo.getRealmCodes());
		_LabeledDrugs.InfrastructureRootTypeId = GetII(_LabeledDrugInfo.getTypeId());
		_LabeledDrugs.TemplateIds = GetIIList(_LabeledDrugInfo.getTemplateIds());
		_LabeledDrugs.Code = GetCE(_LabeledDrugInfo.getCode());
		_LabeledDrugs.Name = GetEN(_LabeledDrugInfo.getName());
		_LabeledDrugs.NullFlavor  = GetNullFlavor(_LabeledDrugInfo.getNullFlavor());
		_LabeledDrugs.EntityClassManufacturedMaterial = GetVocabInfo(_LabeledDrugInfo.getClassCode());
		_LabeledDrugs.EntityDeterminerDetermined = GetVocabInfo(_LabeledDrugInfo.getDeterminerCode());
		
	} else {
		_LabeledDrugs.RealmCodes = GetCSList(null);
		_LabeledDrugs.InfrastructureRootTypeId = GetII(null);
		_LabeledDrugs.TemplateIds = GetIIList(null);
		_LabeledDrugs.Code = GetCE(null);
		_LabeledDrugs.Name = GetEN(null);
		_LabeledDrugs.NullFlavor  = GetNullFlavor(null);
		_LabeledDrugs.EntityClassManufacturedMaterial = GetVocabInfo(null);
		_LabeledDrugs.EntityDeterminerDetermined = GetVocabInfo(null);
	}
	return _LabeledDrugs;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>9bbdf68a-b4b6-4e52-9383-516fd8692648</id>
            <name>GetLanguageCommunicationList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997901</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetLanguageCommunicationList(_LanguageCommunicationInfo) {
	var _LanguageCommunications = [];
	if(_LanguageCommunicationInfo != null) {
		var _LanguageCommunicationInfoSize = _LanguageCommunicationInfo.size();
		var _i = 0;
		
		for(;_i&lt; _LanguageCommunicationInfoSize ; _i++) {
			var LanguageCommunication = {};
			var _LanguageCommunication = _LanguageCommunicationInfo.get(_i);

			if(_LanguageCommunication != null) {
				LanguageCommunication.RealmCodes = GetCSList(_LanguageCommunication.getRealmCodes());
				LanguageCommunication.TemplateIds = GetIIList(_LanguageCommunication.getTemplateIds());
				LanguageCommunication.LanguageCode = GetCS(_LanguageCommunication.getLanguageCode());
				LanguageCommunication.ModeCode = GetCE(_LanguageCommunication.getModeCode());
				LanguageCommunication.ProficiencyLevelCode = GetCE(_LanguageCommunication.getProficiencyLevelCode());
				LanguageCommunication.PreferenceInd = GetBL(_LanguageCommunication.getPreferenceInd());
				LanguageCommunication.NullFlavor = GetNullFlavor(_LanguageCommunication.getNullFlavor());
				_LanguageCommunications.push(LanguageCommunication);
			}
		}
	}
	return _LanguageCommunications;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>ad104c12-9837-4379-85cc-6069d0d6c6a8</id>
            <name>GetLegalAuthenticator</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996598</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetLegalAuthenticator(_LegalAuthenticatorInfo) {
	var _LegalAuthenticator = {};
	if(_LegalAuthenticatorInfo != null) {
		_LegalAuthenticator.RealmCodes = GetCSList(_LegalAuthenticatorInfo.getRealmCodes());
		_LegalAuthenticator.InfrastructureRootTypeId = GetII(_LegalAuthenticatorInfo.getTypeId());
		_LegalAuthenticator.TemplateIds = GetIIList(_LegalAuthenticatorInfo.getTemplateIds());
		_LegalAuthenticator.Time = GetTS(_LegalAuthenticatorInfo.getTime());
		_LegalAuthenticator.SignatureCode = GetCS(_LegalAuthenticatorInfo.getSignatureCode());
		_LegalAuthenticator.AssignedEntity = GetAssignedEntity(_LegalAuthenticatorInfo.getAssignedEntity());
		_LegalAuthenticator.NullFlavor  = GetNullFlavor(_LegalAuthenticatorInfo.getNullFlavor());
		_LegalAuthenticator.ParticipationType = GetNullFlavor(_LegalAuthenticatorInfo.getTypeCode());
		_LegalAuthenticator.ContextControl = GetContextControlCode(_LegalAuthenticatorInfo.getContextControlCode());
	} else {
		_LegalAuthenticator.RealmCodes = GetCSList(null);
		_LegalAuthenticator.InfrastructureRootTypeId = GetII(null);
		_LegalAuthenticator.TemplateIds = GetIIList(null);
		_LegalAuthenticator.Time = GetTS(null);
		_LegalAuthenticator.SignatureCode = GetCS(null);
		_LegalAuthenticator.AssignedEntity = GetAssignedEntity(null);
		_LegalAuthenticator.NullFlavor  = GetNullFlavor(null);
		_LegalAuthenticator.ParticipationType = GetNullFlavor(null);
		_LegalAuthenticator.ContextControl = GetContextControlCode(null);
	}
	return _LegalAuthenticator;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>ca20d356-66f9-4bb0-8ff0-fad2a266e6f5</id>
            <name>GetLocation</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998479</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetLocation(_LocationInfo) {
	var _Locations = {};
	if(_LocationInfo != null) {
		_Locations.RealmCodes = GetCSList(_LocationInfo.getRealmCodes());
		_Locations.InfrastructureRootTypeId = GetII(_LocationInfo.getTypeId());
		_Locations.TemplateIds = GetIIList(_LocationInfo.getTemplateIds());
		_Locations.HealthCareFacility = GetHealthCareFacility(_LocationInfo.getHealthCareFacility());
		_Locations.NullFlavor  = GetNullFlavor(_LocationInfo.getNullFlavor());
		_Locations.ParticipationTargetLocation = GetNullFlavor(_LocationInfo.getTypeCode());
	} else {
		_Locations.RealmCodes = GetCSList(null);
		_Locations.InfrastructureRootTypeId = GetII(null);
		_Locations.TemplateIds = GetIIList(null);
		_Locations.HealthCareFacility = GetHealthCareFacility(null);
		_Locations.NullFlavor  = GetNullFlavor(null);
		_Locations.ParticipationTargetLocation = GetNullFlavor(null);
	}
	return _Locations;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>cb928638-f4da-4834-a4f7-27400e3ed5db</id>
            <name>GetMaintainedEntity</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996766</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetMaintainedEntity(_MaintainedEntityInfo) {
	var _MaintainedEntity = {};
	if(_MaintainedEntityInfo != null) {
		_MaintainedEntity.RealmCodes = GetCSList(_MaintainedEntityInfo.getRealmCodes());
		_MaintainedEntity.InfrastructureRootTypeId = GetII(_MaintainedEntityInfo.getTypeId());
		_MaintainedEntity.TemplateIds = GetIIList(_MaintainedEntityInfo.getTemplateIds());
		_MaintainedEntity.EffectiveTime = GetIVL_TS(_MaintainedEntityInfo.getEffectiveTime());
		_MaintainedEntity.Person = GetPerson(_MaintainedEntityInfo.getMaintainingPerson());
		_MaintainedEntity.NullFlavor  = GetNullFlavor(_MaintainedEntityInfo.getNullFlavor());
		_MaintainedEntity.RoleClass = GetVocabInfo(_MaintainedEntityInfo.getClassCode());
		
	} else {
		_MaintainedEntity.RealmCodes = GetCSList(null);
		_MaintainedEntity.InfrastructureRootTypeId = GetII(null);
		_MaintainedEntity.TemplateIds = GetIIList(null);
		_MaintainedEntity.EffectiveTime = GetIVL_TS(null);
		_MaintainedEntity.Person = GetPerson(null);
		_MaintainedEntity.NullFlavor  = GetNullFlavor(null);
		_MaintainedEntity.RoleClass = GetVocabInfo(null);
		
	}
	return _MaintainedEntity;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>f7423407-802c-457b-8704-60ef016ac3c7</id>
            <name>GetMaintainedEntityList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997178</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetMaintainedEntityList(_MaintainedEntityInfo) {
	var _MaintainedEntitys = []
	if(_MaintainedEntityInfo != null) {
		var _MaintainedEntityInfosize = _MaintainedEntityInfo.size();
		var _i = 0;

		if(_MaintainedEntityInfosize &gt; 0) {
			for(;_i&lt; _MaintainedEntityInfosize ; _i++) {

			var _MaintainedEntity = _MaintainedEntityInfo.get(_i);

			var MaintainedEntity  = GetMaintainedEntity(_MaintainedEntity);
			if(MaintainedEntity != null) {
				_MaintainedEntitys.push(MaintainedEntity);
			}
		}	
		} else {
			var MaintainedEntity  = GetMaintainedEntity(null);
			if(MaintainedEntity != null) {
				_MaintainedEntitys.push(MaintainedEntity);
			}
		}
	} else {
		var MaintainedEntity  = GetMaintainedEntity(_MaintainedEntity);
			if(MaintainedEntity != null) {
				_MaintainedEntitys.push(MaintainedEntity);
			}
	}
	
	return _MaintainedEntitys;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>85c462f1-4411-43a6-8032-5b6923597c31</id>
            <name>GetManufacturedProduct</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997716</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetManufacturedProduct(_ManufacturedProductInfo) {
	var _ManufacturedProducts = {};
	if(_ManufacturedProductInfo != null) {
		_ManufacturedProducts.RealmCodes = GetCSList(_ManufacturedProductInfo.getRealmCodes());
		_ManufacturedProducts.InfrastructureRootTypeId = GetII(_ManufacturedProductInfo.getTypeId());
		_ManufacturedProducts.TemplateIds = GetIIList(_ManufacturedProductInfo.getTemplateIds());
		_ManufacturedProducts.Ids = GetIIList(_ManufacturedProductInfo.getIds());
		_ManufacturedProducts.LabeledDrug = GetLabeledDrug(_ManufacturedProductInfo.getManufacturedLabeledDrug());
		_ManufacturedProducts.Material = GetMaterial(_ManufacturedProductInfo.getManufacturedMaterial());
		_ManufacturedProducts.Organization = GetOrganization(_ManufacturedProductInfo.getManufacturerOrganization());
		_ManufacturedProducts.NullFlavor  = GetNullFlavor(_ManufacturedProductInfo.getNullFlavor());
		_ManufacturedProducts.RoleClassManufacturedProduct = GetVocabInfo(_ManufacturedProductInfo.getClassCode());
	} else {
		_ManufacturedProducts.RealmCodes = GetCSList(null);
		_ManufacturedProducts.InfrastructureRootTypeId = GetII(null);
		_ManufacturedProducts.TemplateIds = GetIIList(null);
		_ManufacturedProducts.Ids = GetIIList(null);
		_ManufacturedProducts.LabeledDrug = GetLabeledDrug(null);
		_ManufacturedProducts.Material = GetMaterial(null);
		_ManufacturedProducts.Organization = GetOrganization(null);
		_ManufacturedProducts.NullFlavor  = GetNullFlavor(null);
		_ManufacturedProducts.RoleClassManufacturedProduct = GetVocabInfo(null);
	}
	return _ManufacturedProducts;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>6cffd472-8108-4673-9181-937c91a6eabe</id>
            <name>GetMaterial</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998728</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetMaterial(_MaterialInfo) {
	var _Materials = {};
	if(_MaterialInfo != null) {
		_Materials.RealmCodes = GetCSList(_MaterialInfo.getRealmCodes());
		_Materials.InfrastructureRootTypeId = GetII(_MaterialInfo.getTypeId());
		_Materials.TemplateIds = GetIIList(_MaterialInfo.getTemplateIds());
		_Materials.Code = GetCD(_MaterialInfo.getCode());
		_Materials.Name = GetEN(_MaterialInfo.getName());
		_Materials.LotNumberText = GetST(_MaterialInfo.getLotNumberText());
		_Materials.NullFlavor  = GetNullFlavor(_MaterialInfo.getNullFlavor());
		_Materials.EntityClassManufacturedMaterial = GetVocabInfo(_MaterialInfo.getClassCode());
		_Materials.EntityDeterminerDetermined = GetVocabInfo(_MaterialInfo.getDeterminerCode());
		
	} else {
		_Materials.RealmCodes = GetCSList(null);
		_Materials.InfrastructureRootTypeId = GetII(null);
		_Materials.TemplateIds = GetIIList(null);
		_Materials.Code = GetCD(null);
		_Materials.Name = GetEN(null);
		_Materials.LotNumberText = GetST(null);
		_Materials.NullFlavor  = GetNullFlavor(null);
		_Materials.EntityClassManufacturedMaterial = GetVocabInfo(null);
		_Materials.EntityDeterminerDetermined = GetVocabInfo(null);
	}
	return _Materials;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>58a84852-17d3-4f4c-9372-1c2ca57cc1f1</id>
            <name>GetNonXMLBody</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996424</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetNonXMLBody(_NonXMLBodyInfo) {
	var _NonXMLBodys = {};
	if(_NonXMLBodyInfo != null) {
		_NonXMLBodys.RealmCodes = GetCSList(_NonXMLBodyInfo.getRealmCodes());
		_NonXMLBodys.InfrastructureRootTypeId = GetII(_NonXMLBodyInfo.getTypeId());
		_NonXMLBodys.TemplateIds = GetIIList(_NonXMLBodyInfo.getTemplateIds());
		_NonXMLBodys.Text = GetED(_NonXMLBodyInfo.getText());
		_NonXMLBodys.ConfidentialityCode = GetCE(_NonXMLBodyInfo.getConfidentialityCode());
		_NonXMLBodys.LanguageCode = GetCS(_NonXMLBodyInfo.getLanguageCode());
		_NonXMLBodys.NullFlavor  = GetNullFlavor(_NonXMLBodyInfo.getNullFlavor());
		_NonXMLBodys.ActClass = GetNullFlavor(_NonXMLBodyInfo.getClassCode());
		_NonXMLBodys.ActMood = GetNullFlavor(_NonXMLBodyInfo.getMoodCode());
		
		
	} else {
		_NonXMLBodys.RealmCodes = GetCSList(null);
		_NonXMLBodys.InfrastructureRootTypeId = GetII(null);
		_NonXMLBodys.TemplateIds = GetIIList(null);
		_NonXMLBodys.Text = GetED(null);
		_NonXMLBodys.ConfidentialityCode = GetCE(null);
		_NonXMLBodys.LanguageCode = GetCS(null);
		_NonXMLBodys.NullFlavor  = GetNullFlavor(null);
		_NonXMLBodys.ActClass = GetNullFlavor(null);
		_NonXMLBodys.ActMood = GetNullFlavor(null);
		
	}
	return _NonXMLBodys;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>c63c8e63-6877-48c2-8b7e-f4b4dc59cce2</id>
            <name>GetNullFlavor</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996846</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetNullFlavor(_nullFlavorInfo) {
	var _NullFlavor = {};
	if(_nullFlavorInfo != null) {
		
			if(_nullFlavorInfo.getValue() != null) {
				_NullFlavor.Value = _nullFlavorInfo.getValue();
			} else {
				_NullFlavor.Value = &quot;&quot;;
			}

			if(_nullFlavorInfo.getName() != null) {
				_NullFlavor.Name = _nullFlavorInfo.getName();
			} else {
				_NullFlavor.Name = &quot;&quot;;
			}

			if(_nullFlavorInfo.getLiteral() != null) {
				_NullFlavor.Literal = _nullFlavorInfo.getLiteral();
			} else {
				_NullFlavor.Literal = &quot;&quot;;
			}		
	} else {
		_NullFlavor.Value = &quot;&quot;;
		_NullFlavor.Name = &quot;&quot;;
		_NullFlavor.Literal = &quot;&quot;;
	}
	return _NullFlavor;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>59e83a3c-4da3-43f5-949f-b91edfba5318</id>
            <name>GetObservation</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998427</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetObservation(_observationInfo) {
	var _Observations = {};
	if(_observationInfo != null) {
		_Observations.RealmCodes = GetCSList(_observationInfo.getRealmCodes());
		_Observations.TypeId  = GetII(_observationInfo.getTypeId());
		_Observations.TemplateIds  = GetIIList(_observationInfo.getTemplateIds());
		_Observations.Ids=GetIIList(_observationInfo.getIds());
		_Observations.Code  = GetCD(_observationInfo.getCode());
		_Observations.DerivationExpr=GetST(_observationInfo.getDerivationExpr());
		_Observations.Text=GetED(_observationInfo.getText());
		_Observations.StatusCode=GetCS(_observationInfo.getStatusCode());
		_Observations.EffectiveTime=GetIVL_TS(_observationInfo.getEffectiveTime());

		_Observations.PriorityCode=GetCE(_observationInfo.getPriorityCode());
		_Observations.RepeatNumber  = GetIVL_INT(_observationInfo.getRepeatNumber());// template needed
		_Observations.LanguageCode=GetCS(_observationInfo.getLanguageCode());
		_Observations.Values=GetAnyList(_observationInfo.getValues());
		_Observations.InterpretationCodes=GetCEList(_observationInfo.getInterpretationCodes());

		_Observations.MethodCodes=GetCEList(_observationInfo.getMethodCodes());
		_Observations.TargetSiteCodes=GetCDList(_observationInfo.getTargetSiteCodes());
		_Observations.InterpretationCodes=GetCEList(_observationInfo.getInterpretationCodes());

		_Observations.Subject=GetSubject(_observationInfo.getSubject());
		_Observations.Specimens=GetSpecimenList(_observationInfo.getSpecimens());
		_Observations.Performers=GetPerformer2List(_observationInfo.getPerformers());
		_Observations.Authors=GetAuthorList(_observationInfo.getAuthors());
		_Observations.Informants=GetInformant12List(_observationInfo.getInformants());
		_Observations.Participants=GetParticipant2List(_observationInfo.getParticipants());

		_Observations.EntryRelationships=GetEntryRelationshipList(_observationInfo.getEntryRelationships());// Template needed
		_Observations.References=GetReferenceList(_observationInfo.getReferences());
		_Observations.Preconditions=GetPreconditionList(_observationInfo.getPreconditions());// Template needed
		_Observations.ReferenceRanges=GetReferenceRangeList(_observationInfo.getReferenceRanges()); // Template needed
		_Observations.NullFlavor  = GetNullFlavor(_observationInfo.getNullFlavor());
		_Observations.ClassCode=GetVocabInfo(_observationInfo.getClassCode());
		_Observations.MoodCode=GetVocabInfo(_observationInfo.getMoodCode());		
		_Observations.NegationInd  = _observationInfo.getNegationInd();
	}
		
	return _Observations;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>c1f458ce-3533-40ad-9dd6-098082a270de</id>
            <name>GetObservationMedia</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307995276</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetObservationMedia(_observationMediaInfo) {
	var _ObservationsMedia = {};
	if(_observationMediaInfo != null) {
		_ObservationsMedia.RealmCodes = GetCSList(_observationMediaInfo.getRealmCodes());
		_ObservationsMedia.TypeId  = GetII(_observationMediaInfo.getTypeId());
		_ObservationsMedia.TemplateIds  = GetIIList(_observationMediaInfo.getTemplateIds());
		_ObservationsMedia.Ids=GetIIList(_observationMediaInfo.getIds());
		_ObservationsMedia.LanguageCode  = GetCS(_observationMediaInfo.getLanguageCode());
		_ObservationsMedia.Value=GetED(_observationMediaInfo.getValue());
		_ObservationsMedia.Subject=GetSubject(_observationMediaInfo.getSubject());
		_ObservationsMedia.Specimens=GetSpecimentList(_observationMediaInfo.getSpecimens());		
		_ObservationsMedia.Performers=GetPerformer2List(_observationMediaInfo.getPerformers());
		_ObservationsMedia.Authors=GetAuthorList(_observationMediaInfo.getAuthors());
		_ObservationsMedia.Informants=GetInformant12List(_observationMediaInfo.getInformants());
		_Observations.Participants=GetParticipant2List(_observationMediaInfo.getParticipants());
		_ObservationsMedia.EntryRelationships=GetEntryRelationshipList(_observationMediaInfo.getEntryRelationships());// Template needed
		_ObservationsMedia.References=GetReferenceList(_observationMediaInfo.getReferences());
		_ObservationsMedia.Preconditions=GetPreconditionList(_observationMediaInfo.getPreconditions());// Template needed
		_ObservationsMedia.ObservationMediaId=_observationMediaInfo.getObservationMediaId();
		_ObservationsMedia.NullFlavor  = GetNullFlavor(_observationMediaInfo.getNullFlavor());
		_ObservationsMedia.ClassCode=GetVocabInfo(_observationMediaInfo.getClassCode());
		_ObservationsMedia.MoodCode=GetVocabInfo(_observationMediaInfo.getMoodCode());
	}
		
	return _ObservationsMedia;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>edec6121-7a76-4f0a-b48f-a4fcf9dd23dc</id>
            <name>GetObservationRange</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307995329</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetObservationRange(_ObservationRangeInfo) {
	var _ObservationRanges = {};
	if(_ObservationRangeInfo != null) {
		_ObservationRanges.RealmCodes = GetCSList(_ObservationRangeInfo.getRealmCodes());
		_ObservationRanges.InfrastructureRootTypeId = GetII(_ObservationRangeInfo.getTypeId());
		_ObservationRanges.TemplateIds = GetIIList(_ObservationRangeInfo.getTemplateIds());
		_ObservationRanges.Code = GetCE(_ObservationRangeInfo.getCode());
		_ObservationRanges.Text = GetED(_ObservationRangeInfo.getText());
		_ObservationRanges.ANY = GetAny(_ObservationRangeInfo.getValue());
		_ObservationRanges.InterpretationCode= GetCE(_ObservationRangeInfo.getInterpretationCode());;
		_ObservationRanges.NullFlavor  = GetNullFlavor(_ObservationRangeInfo.getNullFlavor());
		_ObservationRanges.ActClassObservation = GetNullFlavor(_ObservationRangeInfo.getClassCode());
		_ObservationRanges.ActMood = GetNullFlavor(_ObservationRangeInfo.getMoodCode());
	} else {
		_ObservationRanges.RealmCodes = GetCSList(null);
		_ObservationRanges.InfrastructureRootTypeId = GetII(null);
		_ObservationRanges.TemplateIds = GetIIList(null);
		_ObservationRanges.Code = GetCE(null);
		_ObservationRanges.Text = GetED(null);
		_ObservationRanges.ANY = GetANY(null);
		_ObservationRanges.InterpretationCode= GetCE(null);
		_ObservationRanges.NullFlavor  = GetNullFlavor(null);
		_ObservationRanges.ActClassObservation = GetNullFlavor(null);
		_ObservationRanges.ActMood = GetNullFlavor(null);
	}
	return _ObservationRanges;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>2e7e01fb-dd5c-40c6-8cb6-6ba937f44a09</id>
            <name>GetOrder</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307995297</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetOrder(_OrderInfo) {
	var _Orders = {};
	if(_OrderInfo != null) {
		_Orders.RealmCodes = GetCSList(_OrderInfo.getRealmCodes());
		_Orders.InfrastructureRootTypeId = GetII(_OrderInfo.getTypeId());
		_Orders.TemplateIds = GetIIList(_OrderInfo.getTemplateIds());
		_Orders.Ids = GetIIList(_OrderInfo.getIds());
		_Orders.Code = GetCE(_OrderInfo.getCode());
		_Orders.PriorityCode = GetCE(_OrderInfo.getPriorityCode());
		_Orders.NullFlavor  = GetNullFlavor(_OrderInfo.getNullFlavor());
		_Orders.ActClassRoot = GetNullFlavor(_OrderInfo.getClassCode());
		_Orders.ActMood = GetNullFlavor(_OrderInfo.getMoodCode());
	} else {
		_Orders.RealmCodes = GetCSList(null);
		_Orders.InfrastructureRootTypeId = GetII(null);
		_Orders.TemplateIds = GetIIList(null);
		_Orders.Ids = GetIIList(null);
		_Orders.Code = GetCE(null);
		_Orders.PriorityCode = GetCE(null);
		_Orders.NullFlavor  = GetNullFlavor(null);
		_Orders.ActClassRoot = GetNullFlavor(null);
		_Orders.ActMood = GetNullFlavor(null);
	}
	return _Orders;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>387ddbb1-8234-419e-aaef-c8da73f9f92e</id>
            <name>GetOrganization</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998498</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetOrganization(_orgInfo) {
	var _organization = {};

	if(_orgInfo != null) {
		_organization.RealmCodes = GetCSList(_orgInfo.getRealmCodes());
		_organization.InfrastructureRootTypeId = GetII(_orgInfo.getTypeId());
		_organization.TemplateIds = GetIIList(_orgInfo.getTemplateIds());
		_organization.Ids = GetIIList(_orgInfo.getIds());
		_organization.Names = GetENList(_orgInfo.getNames());
		_organization.Telecoms = GetTELList(_orgInfo.getTelecoms());
		_organization.Address = GetADList(_orgInfo.getAddrs());
		_organization.StandardIndustryClassCode = GetCE(_orgInfo.getStandardIndustryClassCode());
		_organization.OrganizationPartOf = GetOrganizationPartOf(_orgInfo.getAsOrganizationPartOf());
		_organization.NullFlavor  = GetNullFlavor(_orgInfo.getNullFlavor());
		_organization.EntityClassOrganization = GetVocabInfo(_orgInfo.getClassCode());
		_organization.EntityDeterminer = GetVocabInfo(_orgInfo.getDeterminerCode());
		
	} else {
		_organization.RealmCodes = GetCSList(null);
		_organization.InfrastructureRootTypeId = GetII(null);
		_organization.TemplateIds = GetIIList(null);
		_organization.Ids = GetIIList(null);
		_organization.Names = GetENList(null);
		_organization.Telecoms = GetTELList(null);
		_organization.Address = GetADList(null);
		_organization.StandardIndustryClassCode = GetCE(null);
		_organization.OrganizationPartOf = GetOrganizationPartOf(null);
		_organization.NullFlavor  = GetNullFlavor(null);
		_organization.EntityClassOrganization = GetVocabInfo(null);
		_organization.EntityDeterminer = GetVocabInfo(null);
	}
	
	return _organization;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>dab18bc7-adf7-4f7f-8e6a-fa6acf7c2acb</id>
            <name>GetOrganizationList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307995578</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetOrganizationList(_OrganizationInfo) {
	var _Organizations = []
	if(_OrganizationInfo != null) {
		var _OrganizationInfosize = _OrganizationInfo.size();
		var _i = 0;

		if(_OrganizationInfosize &gt; 0) {
			for(;_i&lt; _OrganizationInfosize ; _i++) {

			var _Organization = _OrganizationInfo.get(_i);

			var Organization  = GetOrganization(_Organization);
			if(Organization != null) {
				_Organizations.push(Organization);
			}
		}	
		} else {
			var Organization  = GetOrganization(null);
			if(Organization != null) {
				_Organizations.push(Organization);
			}
		}
	} else {
		var Organization  = GetOrganization(_Organization);
			if(Organization != null) {
				_Organizations.push(Organization);
			}
	}
	
	return _Organizations;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>2a94d10b-f3b6-4c06-b09d-85a27bb136f2</id>
            <name>GetOrganizationPartOf</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998362</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetOrganizationPartOf(_orgInfo) {
	var _OrganizationPartOf = {};

	if(_orgInfo != null) {
		_OrganizationPartOf.RealmCodes = GetCSList(_orgInfo.getRealmCodes());
		_OrganizationPartOf.InfrastructureRootTypeId = GetII(_orgInfo.getTypeId());
		_OrganizationPartOf.TemplateIds = GetIIList(_orgInfo.getTemplateIds());
		_OrganizationPartOf.Ids = GetIIList(_orgInfo.getIds());
		_OrganizationPartOf.Code = GetCE(_orgInfo.getCode());
		_OrganizationPartOf.StatusCode = GetCS(_orgInfo.getStatusCode());
		_OrganizationPartOf.EffectiveTime = GetTS(_orgInfo.getEffectiveTime());
		//_OrganizationPartOf.WholeOrganization = GetOrganization(_orgInfo.getWholeOrganization());
		_OrganizationPartOf.NullFlavor  = GetNullFlavor(_orgInfo.getNullFlavor());
		_OrganizationPartOf.RoleClass = GetVocabInfo(_orgInfo.getClassCode());
	} else {
		_OrganizationPartOf.RealmCodes = GetCSList(null);
		_OrganizationPartOf.InfrastructureRootTypeId = GetII(null);
		_OrganizationPartOf.TemplateIds = GetIIList(null);
		_OrganizationPartOf.Ids = GetIIList(null);
		_OrganizationPartOf.Code = GetCE(null);
		_OrganizationPartOf.StatusCode = GetCS(null);
		_OrganizationPartOf.EffectiveTime = GetTS(null);
		//_OrganizationPartOf.WholeOrganization = GetOrganization(null);
		_OrganizationPartOf.NullFlavor  = GetNullFlavor(null);
		_OrganizationPartOf.RoleClass = GetVocabInfo(null);
	}
	
	return _OrganizationPartOf;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>dfdca9ef-bfa6-4f9b-bb61-e05e2b60f6b7</id>
            <name>GetOrganizer</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997221</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetOrganizer(_organizerInfo) {
	var _Organizers = {};
	if(_organizerInfo != null) {
		_Organizers.RealmCodes = GetCSList(_organizerInfo.getRealmCodes());
		_Organizers.TypeId  = GetII(_organizerInfo.getTypeId());
		_Organizers.TemplateIds  = GetIIList(_organizerInfo.getTemplateIds());
		_Organizers.Ids=GetIIList(_organizerInfo.getIds());
		_Organizers.Code  = GetCD(_organizerInfo.getCode());
		_Organizers.StatusCode=GetCS(_organizerInfo.getStatusCode());
		_Organizers.EffectiveTime=GetIVL_TS(_organizerInfo.getEffectiveTime());
		_Organizers.Subject=GetSubject(_organizerInfo.getSubject());
		_Organizers.Specimens=GetSpecimenList(_organizerInfo.getSpecimens());		
		_Organizers.Performers=GetPerformer2List(_organizerInfo.getPerformers());
		_Organizers.Authors=GetAuthorList(_organizerInfo.getAuthors());
		_Organizers.Informants=GetInformant12List(_organizerInfo.getInformants());
		_Organizers.Participants=GetParticipant2List(_organizerInfo.getParticipants());
		_Organizers.References=GetReferenceList(_organizerInfo.getReferences());
		_Organizers.Preconditions=GetPreconditionList(_organizerInfo.getPreconditions());// Template needed
		_Organizers.Components=GetComponent4List(_organizerInfo.getComponents());//Template needed
		_Organizers.NullFlavor  = GetNullFlavor(_organizerInfo.getNullFlavor());
		_Organizers.ClassCode=GetVocabInfo(_organizerInfo.getClassCode());
		_Organizers.MoodCode=GetVocabInfo(_organizerInfo.getMoodCode());
	} else {
		_Organizers.RealmCodes = GetCSList(null);
		_Organizers.TypeId  = GetII(null);
		_Organizers.TemplateIds  = GetIIList(null);
		_Organizers.Ids=GetIIList(null);
		_Organizers.Code  = GetCD(null);
		_Organizers.StatusCode=GetCS(null);
		_Organizers.EffectiveTime=GetIVL_TS(null);
		_Organizers.Subject=GetSubject(null);
		_Organizers.Specimens=GetSpecimenList(null);		
		_Organizers.Performers=GetPerformer2List(null);
		_Organizers.Authors=GetAuthorList(null);
		_Organizers.Informants=GetInformant12List(null);
		_Organizers.Participants=GetParticipant2List(null);
		_Organizers.References=GetReferenceList(null);
		_Organizers.Preconditions=GetPreconditionList(null);// Template needed
		_Organizers.Components=GetComponent3List(null);//Template needed
		_Organizers.NullFlavor  = GetNullFlavor(null);
		_Organizers.ClassCode=GetVocabInfo(null);
		_Organizers.MoodCode=GetVocabInfo(null);
	}
		
	return _Organizers;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>08fd854c-ee7d-4451-be72-7bd785658324</id>
            <name>GetParentDocument</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998611</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetParentDocument(_ParentDocumentInfo) {
	var _ParentDocuments = {};
	if(_ParentDocumentInfo != null) {
		_ParentDocuments.RealmCodes = GetCSList(_ParentDocumentInfo.getRealmCodes());
		_ParentDocuments.InfrastructureRootTypeId = GetII(_ParentDocumentInfo.getTypeId());
		_ParentDocuments.TemplateIds = GetIIList(_ParentDocumentInfo.getTemplateIds());
		_ParentDocuments.Ids = GetIIList(_ParentDocumentInfo.getIds());
		_ParentDocuments.Code = GetCE(_ParentDocumentInfo.getCode());
		_ParentDocuments.Text = GetED(_ParentDocumentInfo.getText());
		_ParentDocuments.SetId = GetII(_ParentDocumentInfo.getSetId());
		_ParentDocuments.INT = GetINT(_ParentDocumentInfo.getVersionNumber());
		_ParentDocuments.NullFlavor  = GetNullFlavor(_ParentDocumentInfo.getNullFlavor());
		_ParentDocuments.ActClinicalDocument = GetNullFlavor(_ParentDocumentInfo.getClassCode());
		_ParentDocuments.ActMood = GetNullFlavor(_ParentDocumentInfo.getMoodCode());
	} else {
		_ParentDocuments.RealmCodes = GetCSList(null);
		_ParentDocuments.InfrastructureRootTypeId = GetII(null);
		_ParentDocuments.TemplateIds = GetIIList(null);
		_ParentDocuments.Ids = GetIIList(null);
		_ParentDocuments.Code = GetCE(null);
		_ParentDocuments.Text = GetED(null);
		_ParentDocuments.SetId = GetII(null);
		_ParentDocuments.INT = GetINT(null);
		_ParentDocuments.NullFlavor  = GetNullFlavor(null);
		_ParentDocuments.ActClinicalDocument = GetNullFlavor(null);
		_ParentDocuments.ActMood = GetNullFlavor(null);
	}
	return _ParentDocuments;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>0838713d-af40-4c1d-8e39-46c37875e41b</id>
            <name>GetParticipant1</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996083</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetParticipant1(_Participant1Info) {
	var _Participant1s = {};
	if(_Participant1Info != null) {
		_Participant1s.RealmCodes = GetCSList(_Participant1Info.getRealmCodes());
		_Participant1s.InfrastructureRootTypeId = GetII(_Participant1Info.getTypeId());
		_Participant1s.TemplateIds = GetIIList(_Participant1Info.getTemplateIds());
		_Participant1s.FunctionCode = GetCE(_Participant1Info.getFunctionCode());
		_Participant1s.IVL_TS = GetIVL_TS(_Participant1Info.getTime());
		_Participant1s.AssociatedEntity = GetAssociatedEntity(_Participant1Info.getAssociatedEntity());// template needed
		_Participant1s.NullFlavor  = GetNullFlavor(_Participant1Info.getNullFlavor());
		_Participant1s.ParticipationType = GetNullFlavor(_Participant1Info.getTypeCode());
		_Participant1s.ContextControl = GetNullFlavor(_Participant1Info.getContextControlCode());
	} else {
		_Participant1s.RealmCodes = GetCSList(null);
		_Participant1s.InfrastructureRootTypeId = GetII(null);
		_Participant1s.TemplateIds = GetIIList(null);
		_Participant1s.FunctionCode = GetCE(null);
		_Participant1s.IVL_TS = GetIVL_TS(null);
		_Participant1s.AssociatedEntity = GetAssociatedEntity(null);// template needed
		_Participant1s.NullFlavor  = GetNullFlavor(null);
		_Participant1s.ParticipationType = GetNullFlavor(null);
		_Participant1s.ContextControl = GetNullFlavor(null);
	}
	return _Participant1s;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>a83d01d2-ec52-42ff-9154-6dded89aad7f</id>
            <name>GetParticipant1List</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997814</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
	function GetParticipant1List(_Participant1Info) {
		var _Participant1s = []
		if(_Participant1Info != null) {
			var _Participant1Infosize = _Participant1Info.size();
			var _i = 0;
			if(_Participant1Infosize &gt; 0) {
				for(;_i&lt; _Participant1Infosize ; _i++) {

				var _Participant1 = _Participant1Info.get(_i);

				var Participant1  = GetParticipant1(_Participant1);
				if(Participant1 != null) {
					_Participant1s.push(Participant1);
				}
			}	
			} else {
				var Participant1  = GetParticipant1(null);
				if(Participant1 != null) {
					_Participant1s.push(Participant1);
				}	
			}
		} else {
			var Participant1  = GetParticipant1(null);
				if(Participant1 != null) {
					_Participant1s.push(Participant1);
				}
		}
		
		return _Participant1s;
	}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>1e3f4af1-2b75-42f6-8eb5-42a14e1bf271</id>
            <name>GetParticipant2</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998374</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetParticipant2(_Participant2Info) {
	var _Participant2 = {};
	if(_Participant2Info != null) {
		_Participant2.RealmCodes = GetCSList(_Participant2Info.getRealmCodes());
		_Participant2.TypeId  = GetII(_Participant2Info.getTypeId());
		_Participant2.TemplateIds  = GetIIList(_Participant2Info.getTemplateIds());
		_Participant2.Time  = GetIVL_TS(_Participant2Info.getTime());
		_Participant2.AwarenessCode=GetCE(_Participant2Info.getAwarenessCode());
		_Participant2.ParticipantRole=GetParticipantRole(_Participant2Info.getParticipantRole());//template needed
		_Participant2.NullFlavor  = GetNullFlavor(_Participant2Info.getNullFlavor());
		_Participant2.TypeCode  = GetVocabInfo(_Participant2Info.getTypeCode());
		_Participant2.ContextControlCode=GetVocabInfo(_Participant2Info.getContextControlCode());
	} else {
		_Participant2.RealmCodes = GetCSList(null);
		_Participant2.TypeId  = GetII(null);
		_Participant2.TemplateIds  = GetIIList(null);
		_Participant2.Time  = GetIVL_TS(null);
		_Participant2.AwarenessCode=GetCE(null);
		_Participant2.ParticipantRole=GetParticipantRole(null);//template needed
		_Participant2.NullFlavor  = GetNullFlavor(null);
		_Participant2.TypeCode  = GetVocabInfo(null);
		_Participant2.ContextControlCode=GetVocabInfo(null);
	}
	return _Participant2;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>f548fbe8-ca5c-4231-b16a-3c41a7de2b8e</id>
            <name>GetParticipant2List</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996542</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetParticipant2List(_Participant2Info) {
	var _Participant2s = []
	if(_Participant2Info != null) {
		var _Participant2Infosize = _Participant2Info.size();
		var _i = 0;

		if(_Participant2Infosize &gt; 0) {
			for(;_i&lt; _Participant2Infosize ; _i++) {

			var _Participant2 = _Participant2Info.get(_i);

			var Participant2  = GetParticipant2(_Participant2);
			if(Participant2 != null) {
				_Participant2s.push(Participant2);
			}
		}	
		} else {
			var Participant2  = GetParticipant2(null);
			if(Participant2 != null) {
				_Participant2s.push(Participant2);
			}	
		}
			
	} else {
		var Participant2  = GetParticipant2(null);
			if(Participant2 != null) {
				_Participant2s.push(Participant2);
			}
	}
	
	return _Participant2s;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>83b4471a-f2b4-4dee-943c-d350287edeba</id>
            <name>GetParticipantRole</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307995139</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetParticipantRole(_ParticipantRoleInfo) {
	var _ParticipantRoles = {};
	if(_ParticipantRoleInfo != null) {
		_ParticipantRoles.RealmCodes = GetCSList(_ParticipantRoleInfo.getRealmCodes());
		_ParticipantRoles.InfrastructureRootTypeId = GetII(_ParticipantRoleInfo.getTypeId());
		_ParticipantRoles.TemplateIds = GetIIList(_ParticipantRoleInfo.getTemplateIds());
		_ParticipantRoles.Ids = GetIIList(_ParticipantRoleInfo.getIds());
		//_ParticipantRoles.Code = GetCE(_ParticipantRoleInfo.getCode());
		_ParticipantRoles.Code = GetCD(_ParticipantRoleInfo.getCode());
		_ParticipantRoles.Addrs = GetADList(_ParticipantRoleInfo.getAddrs());
		_ParticipantRoles.Telecoms = GetTELList(_ParticipantRoleInfo.getTelecoms());
	//	_ParticipantRoles.Code = GetCE(_ParticipantRoleInfo.getCode());
		_ParticipantRoles.Code = GetCD(_ParticipantRoleInfo.getCode());
		_ParticipantRoles.Device = GetDevice(_ParticipantRoleInfo.getPlayingDevice());
		_ParticipantRoles.PlayingEntity = GetPlayingEntity(_ParticipantRoleInfo.getPlayingEntity());
		_ParticipantRoles.Entity = GetEntity(_ParticipantRoleInfo.getScopingEntity());
		_ParticipantRoles.NullFlavor  = GetNullFlavor(_ParticipantRoleInfo.getNullFlavor());
		_ParticipantRoles.RoleClassRoot = GetNullFlavor(_ParticipantRoleInfo.getClassCode());
	} else {
		_ParticipantRoles.RealmCodes = GetCSList(null);
		_ParticipantRoles.InfrastructureRootTypeId = GetII(null);
		_ParticipantRoles.TemplateIds = GetIIList(null);
		_ParticipantRoles.Ids = GetIIList(null);
		_ParticipantRoles.Code = GetCE(null);
		_ParticipantRoles.Addrs = GetADList(null);
		_ParticipantRoles.Telecoms = GetTELList(null);
		_ParticipantRoles.Code = GetCE(null);
		_ParticipantRoles.Device = GetDevice(null);
		_ParticipantRoles.PlayingEntity = GetPlayingEntity(null);
		_ParticipantRoles.Entity = GetEntity(null);
		_ParticipantRoles.NullFlavor  = GetNullFlavor(null);
		_ParticipantRoles.RoleClassRoot = GetNullFlavor(null);
	}
	return _ParticipantRoles;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>97659b61-f1cb-407e-9102-02673804aa2e</id>
            <name>GetParticipationTargetSubject</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997044</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetParticipationTargetSubject(_participationTargtSubjectInfo) {
	var _ParticipationTargetSubject = {};
	if(_participationTargtSubjectInfo != null) {
		
			if(_participationTargtSubjectInfo.getValue() != null) {
				_ParticipationTargetSubject.Value = _participationTargtSubjectInfo.getValue();
			} else {
				_ParticipationTargetSubject.Value = &quot;&quot;;
			}

			if(_participationTargtSubjectInfo.getName() != null) {
				_ParticipationTargetSubject.Name = _participationTargtSubjectInfo.getName();
			} else {
				_ParticipationTargetSubject.Name = &quot;&quot;;
			}

			if(_participationTargtSubjectInfo.getLiteral() != null) {
				_ParticipationTargetSubject.Literal = _participationTargtSubjectInfo.getLiteral();
			} else {
				_ParticipationTargetSubject.Literal = &quot;&quot;;
			}		
	} else {
		_ParticipationTargetSubject.Value = &quot;&quot;;
		_ParticipationTargetSubject.Name = &quot;&quot;;
		_ParticipationTargetSubject.Literal = &quot;&quot;;
	}
		
	return _ParticipationTargetSubject;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>76384817-3e47-4259-8419-a65ca4a790f8</id>
            <name>GetPatient</name>
            <revision>4</revision>
            <lastModified>
              <time>1666428598555</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetPatient(_patientInfo) {
	var _patient = {};

	if(_patientInfo != null){
		_patient.TemplateIds = GetIIList(_patientInfo.getTemplateIds());
		_patient.Id = GetII(_patientInfo.getId());
		_patient.Names = GetPNList(_patientInfo.getNames());
		_patient.AdministrativeGenderCode = GetCE(_patientInfo.getAdministrativeGenderCode());
		_patient.BirthTime = GetTS(_patientInfo.getBirthTime());
		_patient.MaritalStatusCode = GetCE(_patientInfo.getMaritalStatusCode());
		_patient.ReligiousAffiliationCode = GetCE(_patientInfo.getReligiousAffiliationCode());
		_patient.RaceCode = GetCE(_patientInfo.getRaceCode());
		_patient.SDTCRaceCodes = GetCEList(_patientInfo.getSDTCRaceCodes());
		_patient.EthnicGroupCode = GetCE(_patientInfo.getEthnicGroupCode());
		_patient.Guardians = GetGuardianList(_patientInfo.getGuardians());
		_patient.BirthPlace = GetBirthPlace(_patientInfo.getBirthplace());
		_patient.LanguageCommunications = GetLanguageCommunicationList(_patientInfo.getLanguageCommunications());
		_patient.NullFlavor  = GetNullFlavor(_patientInfo.getNullFlavor());
		_patient.EntityClass = GetVocabInfo(_patientInfo.getClassCode());
		_patient.EntityDeterminer = GetVocabInfo(_patientInfo.getDeterminerCode());
		_patient.Ids = GetIIList(_patientInfo.getIds());	
	}
	
	return _patient;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>8a39f322-fa15-4053-8bdd-aeba40d09536</id>
            <name>GetPatientRole</name>
            <revision>1</revision>
            <lastModified>
              <time>1665308000050</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetPatientRole(_patientRoleInfo) {
	var _patientRole = {};

	if(_patientRoleInfo != null) {
		_patientRole.TemplateIds = GetIIList(_patientRoleInfo.getTemplateIds());
		_patientRole.Ids = GetIIList(_patientRoleInfo.getIds());
		_patientRole.Address = GetADList(_patientRoleInfo.getAddrs());
		_patientRole.Telecoms = GetTELList(_patientRoleInfo.getTelecoms());
		_patientRole.Patient = GetPatient(_patientRoleInfo.getPatient());
		_patientRole.Organization = GetOrganization(_patientRoleInfo.getProviderOrganization());
		_patientRole.NullFlavor  = GetNullFlavor(_patientRoleInfo.getNullFlavor());
		_patientRole.RoleClass = GetVocabInfo(_patientRoleInfo.getClassCode());
	}

	return _patientRole;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>b1a430c0-28e8-4838-b89f-34f9db805a7e</id>
            <name>GetPerformer1</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307994999</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetPerformer1(_Performer1Info) {
	var _Performer1s = {};
	if(_Performer1Info != null) {
		_Performer1s.RealmCodes = GetCSList(_Performer1Info.getRealmCodes());
		_Performer1s.InfrastructureRootTypeId = GetII(_Performer1Info.getTypeId());
		_Performer1s.TemplateIds = GetIIList(_Performer1Info.getTemplateIds());
		_Performer1s.FunctionCode = GetCE(_Performer1Info.getFunctionCode());
		_Performer1s.IVL_TS = GetIVL_TS(_Performer1Info.getTime());
		_Performer1s.AssignedEntity = GetAssignedEntity(_Performer1Info.getAssignedEntity());
		_Performer1s.NullFlavor  = GetNullFlavor(_Performer1Info.getNullFlavor());
		_Performer1s.x_ServiceEventPerformer = GetNullFlavor(_Performer1Info.getTypeCode());
	} else {
		_Performer1s.RealmCodes = GetCSList(null);
		_Performer1s.InfrastructureRootTypeId = GetII(null);
		_Performer1s.TemplateIds = GetIIList(null);
		_Performer1s.FunctionCode = GetCE(null);
		_Performer1s.IVL_TS = GetIVL_TS(null);
		_Performer1s.AssignedEntity = GetAssignedEntity(null);
		_Performer1s.NullFlavor  = GetNullFlavor(null);
		_Performer1s.x_ServiceEventPerformer = GetNullFlavor(null);
	}
	return _Performer1s;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>f38c0978-59ce-42de-8423-c0b61c806a1c</id>
            <name>GetPerformer1List</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997684</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetPerformer1List(_Performer1Info) {
	var _Performer1s = []
	if(_Performer1Info != null) {
		var _PerformerInfosize = _Performer1Info.size();
		var _i = 0;
		
		for(;_i&lt; _PerformerInfosize ; _i++) {

			var _Performer1 = _Performer1Info.get(_i);

			var Performer1  = GetPerformer1(_Performer1);
			if(Performer1 != null) {
				_Performer1s.push(Performer1);
			}
		}	
	} else {
			var Performer1  = GetPerformer1(_Performer1);
			if(Performer1 != null) {
				_Performer1s.push(Performer1);
			}
	}
	
	return _Performer1s;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>c8c6cc42-439f-4cc9-96d1-539fcc00aca0</id>
            <name>GetPerformer2</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996611</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetPerformer2(_performer2Info) {
	var _Performer2 = {};
	if(_performer2Info != null) {
		_Performer2.RealmCodes = GetCSList(_performer2Info.getRealmCodes());
		_Performer2.TypeId  = GetII(_performer2Info.getTypeId());
		_Performer2.TemplateIds  = GetIIList(_performer2Info.getTemplateIds());
		_Performer2.Time  = GetIVL_TS(_performer2Info.getTime());
		_Performer2.ModeCode=GetCE(_performer2Info.getModeCode());
		_Performer2.AssignedEntity=GetAssignedEntity(_performer2Info.getAssignedEntity());//template needed
		_Performer2.NullFlavor  = GetNullFlavor(_performer2Info.getNullFlavor());
		_Performer2.TypeCode  = GetVocabInfo(_performer2Info.getTypeCode());
	}
	return _Performer2;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>acb42a81-9f86-4eac-90a5-22eec4b84870</id>
            <name>GetPerformer2List</name>
            <revision>1</revision>
            <lastModified>
              <time>1665308000201</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetPerformer2List(_Performer2Info) {
	var _Performers2 = []
	if(_Performer2Info != null) {
		var __Performer2Infosize = _Performer2Info.size();
		var _i = 0;
		
		for(;_i&lt; __Performer2Infosize ; _i++) {

			var _Performer2 = _Performer2Info.get(_i);

			var _Performer2  = GetPerformer2(_Performer2);
			if(_Performer2 != null) {
				_Performers2.push(_Performer2);
			}
		}	
	}
	
	return _Performers2;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>6d3755ac-ee77-4288-b0fe-650ea1c2bbe3</id>
            <name>GetPerson</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999544</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetPerson(_PersonInfo) {
	var _Person = {};
	if(_PersonInfo != null) {
		_Person.RealmCodes = GetCSList(_PersonInfo.getRealmCodes());
		_Person.InfrastructureRootTypeId = GetII(_PersonInfo.getTypeId());
		_Person.TemplateIds = GetIIList(_PersonInfo.getTemplateIds());
		_Person.Names = GetPNList(_PersonInfo.getNames());
		_Person.SDTCBirthTime  = GetTS(_PersonInfo.getSDTCBirthTime());
		_Person.NullFlavor  = GetNullFlavor(_PersonInfo.getNullFlavor());
		_Person.EntityClass  = GetNullFlavor(_PersonInfo.getClassCode());
		_Person.EntityDeterminer  = GetNullFlavor(_PersonInfo.getDeterminerCode());
	} else {
		_Person.RealmCodes = GetCSList(null);
		_Person.InfrastructureRootTypeId = GetII(null);
		_Person.TemplateIds = GetIIList(null);
		_Person.Names = GetPNList(null);
		_Person.SDTCBirthTime  = GetTS(null);
		_Person.NullFlavor  = GetNullFlavor(null);
		_Person.EntityClass  = GetNullFlavor(null);
		_Person.EntityDeterminer  = GetNullFlavor(null);
	}
	return _Person;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>ead392dc-30a5-4f37-abec-8f2495054c87</id>
            <name>GetPIVL_TS</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996915</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetPIVL_TS(_PIVL_TSInfo) {
	var _PIVL_TS = {};

	if(_PIVL_TSInfo != null){
		_PIVL_TS.Phase = GetIVL_TS(_PIVL_TSInfo.getPhase());
		_PIVL_TS.Period = GetAny(_PIVL_TSInfo.getPeriod());
		_PIVL_TS.InstitutionSpecified = _PIVL_TSInfo.getInstitutionSpecified();
	} else {
		_PIVL_TS.Phase = GetIVL_TS(null);
		_PIVL_TS.Period = GetAny(null);
		_PIVL_TS.InstitutionSpecified = &quot;&quot;;
	}
	return _PIVL_TS;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>f9e577c4-042c-49be-902d-41ea5c0aa792</id>
            <name>GetPlace</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999483</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetPlace(_PlaceInfo) {
	var _Place = {};
	if(_PlaceInfo != null) {
		_Place.RealmCodes = GetCSList(_PlaceInfo.getRealmCodes());
		_Place.InfrastructureRootTypeId = GetII(_PlaceInfo.getTypeId());
		_Place.TemplateIds = GetIIList(_PlaceInfo.getTemplateIds());
		_Place.Name = GetEN(_PlaceInfo.getName());
		_Place.Address = GetAD(_PlaceInfo.getAddr());
		_Place.NullFlavor  = GetNullFlavor(_PlaceInfo.getNullFlavor());
		_Place.EntityClassPlace  = GetNullFlavor(_PlaceInfo.getClassCode());
		_Place.EntityDeterminer  = GetNullFlavor(_PlaceInfo.getDeterminerCode());
		_Place.Names = GetENList(_PlaceInfo.getNames());
		_Place.Addresses = GetADList(_PlaceInfo.getAddrs());
	} else {
		_Place.RealmCodes = GetCSList(null);
		_Place.InfrastructureRootTypeId = GetII(null);
		_Place.TemplateIds = GetIIList(null);
		_Place.Name = GetEN(null);
		_Place.Address = GetAD(null);
		_Place.NullFlavor  = GetNullFlavor(null);
		_Place.EntityClassPlace  = GetNullFlavor(null);
		_Place.EntityDeterminer  = GetNullFlavor(null);
		_Place.Names = GetENList(null);
		_Place.Addresses = GetADList(null);
	}
	return _Place;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>ef1bb15f-b1d7-40b6-963f-7c8e4c569a05</id>
            <name>GetPlayingEntity</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998869</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetPlayingEntity(_PlayingEntityInfo) {
	var _PlayingEntities = {};
	if(_PlayingEntityInfo != null) {
		_PlayingEntities.RealmCodes = GetCSList(_PlayingEntityInfo.getRealmCodes());
		_PlayingEntities.InfrastructureRootTypeId = GetII(_PlayingEntityInfo.getTypeId());
		_PlayingEntities.TemplateIds = GetIIList(_PlayingEntityInfo.getTemplateIds());
	//	_PlayingEntities.Code = GetCE(_PlayingEntityInfo.getCode());
		_PlayingEntities.Code = GetCD(_PlayingEntityInfo.getCode());
		_PlayingEntities.Quantities = GetPQList(_PlayingEntityInfo.getQuantities());
		_PlayingEntities.Names = GetPNList(_PlayingEntityInfo.getNames());
		_PlayingEntities.SDTCBirthTime = GetTS(_PlayingEntityInfo.getSDTCBirthTime());
		_PlayingEntities.Desc = GetED(_PlayingEntityInfo.getDesc());
		_PlayingEntities.NullFlavor  = GetNullFlavor(_PlayingEntityInfo.getNullFlavor());
		_PlayingEntities.EntityClassRoot = GetNullFlavor(_PlayingEntityInfo.getClassCode());
		_PlayingEntities.EntityDeterminer = GetNullFlavor(_PlayingEntityInfo.getDeterminerCode());
	} else {
		_PlayingEntities.RealmCodes = GetCSList(null);
		_PlayingEntities.InfrastructureRootTypeId = GetII(null);
		_PlayingEntities.TemplateIds = GetIIList(null);
		_PlayingEntities.Code = GetCE(null);
		_PlayingEntities.Quantities = GetPQList(null);
		_PlayingEntities.Names = GetPNList(null);
		_PlayingEntities.SDTCBirthTime = GetTS(null);
		_PlayingEntities.Desc = GetED(null);
		_PlayingEntities.NullFlavor  = GetNullFlavor(null);
		_PlayingEntities.EntityClassRoot = GetNullFlavor(null);
		_PlayingEntities.EntityDeterminer = GetNullFlavor(null);
	}
	return _PlayingEntities;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>81b125af-ae8e-4160-9248-0a9d0b26a71a</id>
            <name>GetPNList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307994641</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetPNList(_PNInfo) {
	var _PNList = [];
	if(_PNInfo != null) {
		var _PNInfoSize = _PNInfo.size();
		var _i = 0;

		if(_PNInfoSize &gt; 0) {
			for(;_i&lt; _PNInfoSize ; _i++) {
			var PN = {};
			var _PN = _PNInfo.get(_i);

			if(_PN != null) {
				PN.EntityNameUses = GetVocabInfoList(_PN.getUses());
				PN.ValidTime = GetIVL_TS(_PN.getValidTime());
				PN.Delimiters = GetENXPList(_PN.getDelimiters());
				PN.Families = GetENXPList(_PN.getFamilies());
				PN.Givens = GetENXPList(_PN.getGivens());
				PN.Prefixes = GetENXPList(_PN.getPrefixes());
				PN.Suffixes = GetENXPList(_PN.getSuffixes());
				PN.Text = _PN.getText();

				_PNList.push(PN);
			} else {
				PN.EntityNameUses = GetVocabInfoList(null);
				PN.ValidTime = GetIVL_TS(null);
				PN.Delimiters = GetENXPList(null);
				PN.Families = GetENXPList(null);
				PN.Givens = GetENXPList(null);
				PN.Prefixes = GetENXPList(null);
				PN.Suffixes = GetENXPList(null);
				PN.Text = &quot;&quot;;

				_PNList.push(PN);
			}
		}	
		} else {
			var PN = {};
			PN.EntityNameUses = GetVocabInfoList(null);
				PN.ValidTime = GetIVL_TS(null);
				PN.Delimiters = GetENXPList(null);
				PN.Families = GetENXPList(null);
				PN.Givens = GetENXPList(null);
				PN.Prefixes = GetENXPList(null);
				PN.Suffixes = GetENXPList(null);
				PN.Text = &quot;&quot;;

				_PNList.push(PN);
		}
		
		
	} else {
		var PN = {};
		PN.EntityNameUses = GetVocabInfoList(null);
				PN.ValidTime = GetIVL_TS(null);
				PN.Delimiters = GetENXPList(null);
				PN.Families = GetENXPList(null);
				PN.Givens = GetENXPList(null);
				PN.Prefixes = GetENXPList(null);
				PN.Suffixes = GetENXPList(null);
				PN.Text = &quot;&quot;;

				_PNList.push(PN);
	}
	return _PNList;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>b66ad4f5-f349-4745-bcc5-60dc879f8c74</id>
            <name>GetPQ</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307995682</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new PQ template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetPQ(_PQInfo) {
	var _PQ = {};
	if(_PQInfo != null) {
		
			if(_PQInfo.getValue() != null) {
				_PQ.Value = _PQInfo.getValue();
			} else {
				_PQ.Value = &quot;&quot;;
			}

			if(_PQInfo.getUnit() != null) {
				_PQ.Unit = _PQInfo.getUnit();
			} else {
				_PQ.Unit = &quot;&quot;;
			}
			
			_PQ.Translations = GetPQRList(_PQInfo.getTranslations());
	} else {
		_PQ.Value = &quot;&quot;;
		_PQ.Unit = &quot;&quot;;
	}
	
	return _PQ;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>801c65a4-f6b2-4da3-914c-bde9ad670e6b</id>
            <name>GetPQList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996583</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetPQList(_PQListInfo) {
	var _PQList = []
	if(_PQListInfo != null) {
		var _PQListInfosize = _PQListInfo.size();
		var _i = 0;
		
		for(;_i&lt; _PQListInfosize ; _i++) {
			var _PQ = _PQListInfo.get(_i);

			var PQ  = GetPQ(_PQ);
			if(PQ != null) {
				_PQList.push(PQ);	
			}
		}	
	}
	return _PQList;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>473f2c4b-0b31-4433-aab8-8dfbc49325da</id>
            <name>GetPQR</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999605</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetPQR(_PQRInfo) {
	var _PQR = {};
	if(_PQRInfo != null) {
		
			if(_PQRInfo.getValue() != null) {
				_PQR.Value = _PQRInfo.getValue();
			} else {
				_PQR.Value = &quot;&quot;;
			}
	}
	return _PQR;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>c4292635-1841-4603-bd0d-12494401d3d3</id>
            <name>GetPQRList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999142</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetPQRList(_PQRListInfo) {
	var _PQRList = []
	if(_PQRListInfo != null) {
		var _PQRListInfosize = _PQRListInfo.size();
		var _i = 0;
		
		for(;_i&lt; _PQRListInfosize ; _i++) {
			var _PQR = _PQRListInfo.get(_i);

			var PQR  = GetPQR(_PQR);
			if(PQR != null) {
				_PQRList.push(PQR);	
			}
		}	
	}
	return _PQRList;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>cfd4096b-c1d3-4cb0-8f00-4167630f5c06</id>
            <name>GetPrecondition</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307995926</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetPrecondition(_PreconditionInfo) {
	var _Preconditions = {};
	if(_PreconditionInfo != null) {
		_Preconditions.RealmCodes = GetCSList(_PreconditionInfo.getRealmCodes());
		_Preconditions.InfrastructureRootTypeId = GetII(_PreconditionInfo.getTypeId());
		_Preconditions.TemplateIds = GetIIList(_PreconditionInfo.getTemplateIds());
		_Preconditions.Criterion = GetCriterion(_PreconditionInfo.getCriterion());
		_Preconditions.NullFlavor  = GetNullFlavor(_PreconditionInfo.getNullFlavor());
		_Preconditions.ActRelationshipType = GetVocabInfo(_PreconditionInfo.getTypeCode());
		
	} else {
		_Preconditions.RealmCodes = GetCSList(null);
		_Preconditions.InfrastructureRootTypeId = GetII(null);
		_Preconditions.TemplateIds = GetIIList(null);
		_Preconditions.Criterion = GetCriterion(null);
		_Preconditions.NullFlavor  = GetNullFlavor(null);
		_Preconditions.ActRelationshipType = GetVocabInfo(null);
	}
	return _Preconditions;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>93da07dd-7bf3-47d6-a322-159ee5611c94</id>
            <name>GetPreconditionList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307995801</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetPreconditionList(_PreconditionInfo) {
	var _Preconditions = []
	if(_PreconditionInfo != null) {
		var _PreconditionInfosize = _PreconditionInfo.size();
		var _i = 0;
		if(_PreconditionInfosize &gt; 0) {
			for(;_i&lt; _PreconditionInfosize ; _i++) {

			var _Precondition = _PreconditionInfo.get(_i);

			var Precondition  = GetPrecondition(_Precondition);
			if(Precondition != null) {
				_Preconditions.push(Precondition);
			}
		}	
		} else {
			var Precondition  = GetPrecondition(null);
			if(Precondition != null) {
				_Preconditions.push(Precondition);
			}
		}
			
	} else {
			var Precondition  = GetPrecondition(null);
			if(Precondition != null) {
				_Preconditions.push(Precondition);
			}
	}
	
	return _Preconditions;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>7154d5b5-82ff-4e43-8b1d-4e34685d7958</id>
            <name>GetPriority</name>
            <revision>2</revision>
            <lastModified>
              <time>1667114769069</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetPriority(_csInfo) {
	var _CS = {};
	if(_csInfo != null) {
		
			if(_csInfo.getCode() != null) {
				_CS.Code = _csInfo.getCode();
			} else {
				_CS.Code = &quot;&quot;;
			}

			if(_csInfo.getCodeSystem() != null) {
				_CS.CodeSystem = _csInfo.getCodeSystem();
			} else {
				_CS.CodeSystem = &quot;&quot;;
			}

			if(_csInfo.getCodeSystemName() != null) {
				_CS.CodeSystemName = _csInfo.getCodeSystemName();
			} else {
				_CS.CodeSystemName = &quot;&quot;;
			}

			if(_csInfo.getCodeSystemVersion() != null) {
				_CS.CodeSystemVersion = _csInfo.getCodeSystemVersion();
			} else {
				_CS.CodeSystemVersion = &quot;&quot;;
			}

			if(_csInfo.getDisplayName() != null) {
				_CS.DisplayName = _csInfo.getDisplayName();
			} else {
				_CS.DisplayName = &quot;&quot;;
			}
	} else {
		_CS.Code = &quot;&quot;;
		_CS.CodeSystem = &quot;&quot;;
		_CS.CodeSystemName = &quot;&quot;;
		_CS.CodeSystemVersion = &quot;&quot;;
		_CS.DisplayName = &quot;&quot;;
	}
	
	return _CS;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>866cb4c9-c5d7-4b9f-aa1e-bc3f21adbf62</id>
            <name>GetProcedure</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996710</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetProcedure(_procedureInfo) {
	var _Procedures = {};
	if(_procedureInfo != null) {
		_Procedures.RealmCodes = GetCSList(_procedureInfo.getRealmCodes());
		_Procedures.TypeId  = GetII(_procedureInfo.getTypeId());
		_Procedures.TemplateIds  = GetIIList(_procedureInfo.getTemplateIds());
		_Procedures.Ids=GetIIList(_procedureInfo.getIds());
		_Procedures.Code  = GetCD(_procedureInfo.getCode());
		_Procedures.Text  = GetED(_procedureInfo.getText());
		_Procedures.StatusCode=GetCS(_procedureInfo.getStatusCode());
		_Procedures.EffectiveTime=GetIVL_TS(_procedureInfo.getEffectiveTime());
		_Procedures.PriorityCode=GetCE(_procedureInfo.getPriorityCode());
		_Procedures.LanguageCode=GetCS(_procedureInfo.getLanguageCode());	
		_Procedures.MethodCodes=GetCEList(_procedureInfo.getMethodCodes());	
		_Procedures.ApproachSiteCodes=GetCDList(_procedureInfo.getApproachSiteCodes());
		_Procedures.TargetSiteCodes=GetCDList(_procedureInfo.getTargetSiteCodes());
		_Procedures.Subject=GetSubject(_procedureInfo.getSubject());
		_Procedures.Specimens=GetSpecimentList(_procedureInfo.getSpecimens());		
		_Procedures.Performers=GetPerformer2List(_procedureInfo.getPerformers());
		_Procedures.Authors=GetAuthorList(_procedureInfo.getAuthors());
		_Procedures.Informants=GetInformant12List(_procedureInfo.getInformants());
		_Procedures.Participants=GetParticipant2List(_procedureInfo.getParticipants());
		_Procedures.EntryRelationships=GetEntryRelationshipList(_procedureInfo.getEntryRelationships());
		_Procedures.References=GetReferenceList(_procedureInfo.getReferences());
		_Procedures.Preconditions=GetPreconditionList(_procedureInfo.getPreconditions());// Template needed
		_Procedures.NullFlavor  = GetNullFlavor(_procedureInfo.getNullFlavor());
		_Procedures.ClassCode=GetVocabInfo(_procedureInfo.getClassCode());
		_Procedures.MoodCode=GetVocabInfo(_procedureInfo.getMoodCode());
		_Procedures.NegationInd=_procedureInfo.getNegationInd();
	}
		
	return _Procedures;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>a42c631e-dd33-4512-b65a-4effadc73375</id>
            <name>GetProduct</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997234</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetProduct(_ProductInfo) {
	var _Products = {};
	if(_ProductInfo != null) {
		_Products.RealmCodes = GetCSList(_ProductInfo.getRealmCodes());
		_Products.InfrastructureRootTypeId = GetII(_ProductInfo.getTypeId());
		_Products.TemplateIds = GetIIList(_ProductInfo.getTemplateIds());
		_Products.ManufacturedProduct = GetManufacturedProduct(_ProductInfo.getManufacturedProduct());
		_Products.NullFlavor  = GetNullFlavor(_ProductInfo.getNullFlavor());
		_Products.ParticipationType = GetVocabInfo(_ProductInfo.getTypeCode());
	} else {
		_Products.RealmCodes = GetCSList(null);
		_Products.InfrastructureRootTypeId = GetII(null);
		_Products.TemplateIds = GetIIList(null);
		_Products.ManufacturedProduct = GetManufacturedProduct(null);
		_Products.NullFlavor  = GetNullFlavor(null);
		_Products.ParticipationType = GetVocabInfo(null);
	}
	return _Products;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>3852222a-f268-4996-b146-cc9cc4736a77</id>
            <name>GetREAL</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996636</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new PQ template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetREAL(_PQInfo) {
	var _PQ = {};
	if(_PQInfo != null) 
	{
		
			if(_PQInfo.getValue() != null) 
			{
				_PQ.Value = _PQInfo.getValue();
			} 
			else 
			{
				_PQ.Value = &quot;&quot;;
			}

		
	} else {
		_PQ.Value = &quot;&quot;;
		_PQ.Unit = &quot;&quot;;
	}
	
	return _PQ;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>86021228-16fb-4601-b150-f743e1b0b36e</id>
            <name>GetRecordTargetList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997085</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetRecordTargetList(_recordTagetListInfo) {
	var _recordTargetList = [];
	if(_recordTagetListInfo != null) {
		var _recordTagetListInfoSize = _recordTagetListInfo.size();
		var _i = 0;
		
		for(;_i&lt; _recordTagetListInfoSize ; _i++) {
			var recordTarget = {};
			var _recordTargetInfo = _recordTagetListInfo.get(_i);

			if(_recordTargetInfo != null) {
				recordTarget.TemplateIds = GetIIList(_recordTargetInfo.getTemplateIds());
				recordTarget.PatientRole = GetPatientRole(_recordTargetInfo.getPatientRole());
				recordTarget.NullFlavor = GetNullFlavor(_recordTargetInfo.getNullFlavor());
				recordTarget.ParticipationType = GetVocabInfo(_recordTargetInfo.getTypeCode());
				recordTarget.ContextControl = GetContextControlCode(_recordTargetInfo.getContextControlCode());
			
				_recordTargetList.push(recordTarget);	
			}
		}
	}

	return _recordTargetList;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>5a052bca-2212-4001-be8d-55774192b2b4</id>
            <name>GetReference</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307995446</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetReference(_referenceInfo) {
	var _Reference = {};
	if(_referenceInfo != null) {
		_Reference.RealmCodes = GetCSList(_referenceInfo.getRealmCodes());
		_Reference.TypeId  = GetII(_referenceInfo.getTypeId());
		_Reference.TemplateIds  = GetIIList(_referenceInfo.getTemplateIds());
		_Reference.SeperatableInd  = GetBL(_referenceInfo.getSeperatableInd()); //template needed
		_Reference.ExternalAct=GetExternalAct(_referenceInfo.getExternalAct());
		_Reference.ExternalObservation=GetExternalObservation(_referenceInfo.getExternalObservation());
		_Reference.ExternalProcedure=GetExternalProcedure(_referenceInfo.getExternalProcedure());
		_Reference.ExternalDocument=GetExternalDocument(_referenceInfo.getExternalDocument());
		_Reference.NullFlavor  = GetNullFlavor(_referenceInfo.getNullFlavor());
		_Reference.TypeCode  = GetVocabInfo(_referenceInfo.getTypeCode());
	}
	return _Reference;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>4aa0177f-6e48-4d66-9bbd-33561ccad107</id>
            <name>GetReferenceList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997830</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetReferenceList(_ReferenceInfo) {
	var __References = []
	if(_ReferenceInfo != null) {
		var _ReferenceInfosize = _ReferenceInfo.size();
		var _i = 0;
		
		for(;_i&lt; _ReferenceInfosize ; _i++) {

			var _Reference = _ReferenceInfo.get(_i);

			var Reference  = GetReference(_Reference);
			if(Reference != null) {
				__References.push(Reference);
			}
		}	
	}
	
	return __References;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>52e75643-98a7-4389-8523-3ee64ae7656c</id>
            <name>GetReferenceRange</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999836</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetReferenceRange(_ReferenceRangeInfo) {
	var _ReferenceRanges = {};
	if(_ReferenceRangeInfo != null) {
		//_ReferenceRanges.RealmCodes = GetCSList(_ReferenceRangeInfo.getRealmCodes());
		//_ReferenceRanges.InfrastructureRootTypeId = GetII(_ReferenceRangeInfo.getTypeId());
		//_ReferenceRanges.TemplateIds = GetIIList(_ReferenceRangeInfo.getTemplateIds());
		_ReferenceRanges.ObservationRange = GetObservationRange(_ReferenceRangeInfo.getObservationRange());
		//_ReferenceRanges.NullFlavor  = GetNullFlavor(_ReferenceRangeInfo.getNullFlavor());
		//_ReferenceRanges.ActRelationshipType = GetNullFlavor(_ReferenceRangeInfo.getTypeCode());
	} else {
		//_ReferenceRanges.RealmCodes = GetCSList(null);
		//_ReferenceRanges.InfrastructureRootTypeId = GetII(null);
		//_ReferenceRanges.TemplateIds = GetIIList(null);
		_ReferenceRanges.ObservationRange = GetObservationRange(null);
		//_ReferenceRanges.NullFlavor  = GetNullFlavor(null);
		//_ReferenceRanges.ActRelationshipType = GetNullFlavor(null);
	}
	return _ReferenceRanges;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>c1f9ed1a-98a2-4792-a71d-5693bd5cc787</id>
            <name>GetReferenceRangeList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665308000105</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description 
*/
function GetReferenceRangeList(_ReferenceRangeInfo) {
	var _ReferenceRanges = []
	if(_ReferenceRangeInfo != null) {
		var __ReferenceRangesInfosize = _ReferenceRangeInfo.size();
		var _i = 0;
		
		for(;_i&lt; __ReferenceRangesInfosize ; _i++) {

			var _ReferenceRange = _ReferenceRangeInfo.get(_i);

			var ReferenceRange  = GetReferenceRange(_ReferenceRange);
			if(ReferenceRange != null) {
				_ReferenceRanges.push(ReferenceRange);
			}
		}	
	} else {
			var ReferenceRange  = GetReferenceRange(null);
			if(ReferenceRange != null) {
				_ReferenceRanges.push(ReferenceRange);
			}
	}
	
	return _ReferenceRanges;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>c5d12544-af73-40ef-8e22-e64c9190cb22</id>
            <name>GetRegionOfInterest</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999115</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetRegionOfInterest(_regionOfInterestInfo) {
	var _RegionOfInterest = {};
	if(_regionOfInterestInfo != null) {
		_RegionOfInterest.RealmCodes = GetCSList(_regionOfInterestInfo.getRealmCodes());
		_RegionOfInterest.TypeId  = GetII(_regionOfInterestInfo.getTypeId());
		_RegionOfInterest.TemplateIds  = GetIIList(_regionOfInterestInfo.getTemplateIds());
		_RegionOfInterest.Ids=GetIIList(_regionOfInterestInfo.getIds());
		_RegionOfInterest.Code  = GetCD(_regionOfInterestInfo.getCode());
		_RegionOfInterest.Values  = GetRegionOfInterestList(_regionOfInterestInfo.getValues());//Template Needed
		_RegionOfInterest.Subject=GetSubject(_regionOfInterestInfo.getSubject());
		_RegionOfInterest.Specimens=GetSpeicimentList(_regionOfInterestInfo.getSpecimens());	
		_RegionOfInterest.Performers=GetPerformer2List(_regionOfInterestInfo.getPerformers());
		_RegionOfInterest.Authors=GetAuthorList(_regionOfInterestInfo.getAuthors());
		_RegionOfInterest.Informants=GetInformant12List(_regionOfInterestInfo.getInformants());	
		_RegionOfInterest.Participants=GetParticipant2List(_regionOfInterestInfo.getParticipants());
		_RegionOfInterest.EntryRelationships=GetEntryRelationshipList(_regionOfInterestInfo.getEntryRelationships());		
		_RegionOfInterest.References=GetReferenceList(_regionOfInterestInfo.getReferences());
		_RegionOfInterest.Preconditions=GetPreconditionList(_regionOfInterestInfo.getPreconditions());// Template needed
		_RegionOfInterest.RegionOfInterestId=_regionOfInterestInfo.getRegionOfInterestId();
		_RegionOfInterest.NullFlavor  = GetNullFlavor(_regionOfInterestInfo.getNullFlavor());
		_RegionOfInterest.ClassCode=GetVocabInfo(_regionOfInterestInfo.getClassCode());
		_RegionOfInterest.MoodCode=GetVocabInfo(_regionOfInterestInfo.getMoodCode());
	} else {
		_RegionOfInterest.RealmCodes = GetCSList(null);
		_RegionOfInterest.TypeId  = GetII(null);
		_RegionOfInterest.TemplateIds  = GetIIList(null);
		_RegionOfInterest.Ids=GetIIList(null);
		_RegionOfInterest.Code  = GetCD(null);
		_RegionOfInterest.Values  = GetRegionOfInterestList(null);//Template Needed
		_RegionOfInterest.Subject=GetSubject(null);
		_RegionOfInterest.Specimens=GetSpeicimentList(null);	
		_RegionOfInterest.Performers=GetPerformer2List(null);
		_RegionOfInterest.Authors=GetAuthorList(null);
		_RegionOfInterest.Informants=GetInformant12List(null);	
		_RegionOfInterest.Participants=GetParticipant2List(null);
		_RegionOfInterest.EntryRelationships=GetEntryRelationshipsList(null);		
		_RegionOfInterest.References=GetReferenceList(null);
		_RegionOfInterest.Preconditions=GetPreconditionList(null);// Template needed
		_RegionOfInterest.RegionOfInterestId=&quot;&quot;;
		_RegionOfInterest.NullFlavor  = GetNullFlavor(null);
		_RegionOfInterest.ClassCode=GetVocabInfo(null);
		_RegionOfInterest.MoodCode=GetVocabInfo(null);
	}
		
	return _RegionOfInterest;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>8e954ffe-cfab-4755-8b42-5325a8409745</id>
            <name>GetRegionOfInterestList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997296</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetRegionOfInterestList(_RegionOfInterestInfo) {
	var _RegionOfInterests = []
	if(_RegionOfInterestInfo != null) {
		var _RegionOfInterestInfosize = _RegionOfInterestInfo.size();
		var _i = 0;
		if(_RegionOfInterestInfosize &gt; 0) {
			for(;_i&lt; _RegionOfInterestInfosize ; _i++) {

			var _RegionOfInterest = _RegionOfInterestInfo.get(_i);

			var RegionOfInterest  = GetRegionOfInterest(_RegionOfInterest);
			if(RegionOfInterest != null) {
				_RegionOfInterests.push(RegionOfInterest);
			}
		}	
		} else {
			var RegionOfInterest  = GetRegionOfInterest(null);
			if(RegionOfInterest != null) {
				_RegionOfInterests.push(RegionOfInterest);
			}
		}
			
	} else {
			var RegionOfInterest  = GetRegionOfInterest(null);
			if(RegionOfInterest != null) {
				_RegionOfInterests.push(RegionOfInterest);
			}
	}
	
	return _RegionOfInterests;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>20ea925e-04ff-4a96-93d5-125b3c05e109</id>
            <name>GetRelatedDocument</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307995015</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetRelatedDocument(_RelatedDocumentInfo) {
	var _RelatedDocuments = {};
	if(_RelatedDocumentInfo != null) {
		_RelatedDocuments.RealmCodes = GetCSList(_RelatedDocumentInfo.getRealmCodes());
		_RelatedDocuments.InfrastructureRootTypeId = GetII(_RelatedDocumentInfo.getTypeId());
		_RelatedDocuments.TemplateIds = GetIIList(_RelatedDocumentInfo.getTemplateIds());
		_RelatedDocuments.ParentDocument = GetParentDocument(_RelatedDocumentInfo.getParentDocument());
		_RelatedDocuments.NullFlavor  = GetNullFlavor(_RelatedDocumentInfo.getNullFlavor());
		_RelatedDocuments.x_ActRelationshipDocument = GetNullFlavor(_RelatedDocumentInfo.getTypeCode());
	} else {
		_RelatedDocuments.RealmCodes = GetCSList(null);
		_RelatedDocuments.InfrastructureRootTypeId = GetII(null);
		_RelatedDocuments.TemplateIds = GetIIList(null);
		_RelatedDocuments.ParentDocument = GetParentDocument(null);
		_RelatedDocuments.NullFlavor  = GetNullFlavor(null);
		_RelatedDocuments.x_ActRelationshipDocument = GetNullFlavor(null);
	}
	return _RelatedDocuments;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>9caff520-23f9-4c61-8d25-d6ed328e1076</id>
            <name>GetRelatedDocumentList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997307</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
	function GetRelatedDocumentList(_RelatedDocumentInfo) {
		var _RelatedDocuments = []
		if(_RelatedDocumentInfo != null) {
			var _RelatedDocumentInfosize = _RelatedDocumentInfo.size();
			var _i = 0;
			if(_RelatedDocumentInfosize &gt; 0) {
				for(;_i&lt; _RelatedDocumentInfosize ; _i++) {

				var _RelatedDocument = _RelatedDocumentInfo.get(_i);

				var RelatedDocument  = GetRelatedDocument(_RelatedDocument);
				if(RelatedDocument != null) {
					_RelatedDocuments.push(RelatedDocument);
				}
			}	
			} else {
				var RelatedDocument  = GetRelatedDocument(null);
				if(RelatedDocument != null) {
					_RelatedDocuments.push(RelatedDocument);
				}	
			}
		} else {
			var RelatedDocument  = GetRelatedDocument(null);
				if(RelatedDocument != null) {
					_RelatedDocuments.push(RelatedDocument);
				}
		}
		
		return _RelatedDocuments;
	}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>fd35327e-6d14-4417-962c-4342563c9d15</id>
            <name>GetRelatedEntity</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999349</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetRelatedEntity(_RelatedEntityInfo) {
	var _RelatedEntity = {};
	if(_RelatedEntityInfo != null) {
		_RelatedEntity.RealmCodes = GetCSList(_RelatedEntityInfo.getRealmCodes());
		_RelatedEntity.InfrastructureRootTypeId = GetII(_RelatedEntityInfo.getTypeId());
		_RelatedEntity.TemplateIds = GetIIList(_RelatedEntityInfo.getTemplateIds());
		_RelatedEntity.Code = GetCE(_RelatedEntityInfo.getCode());
		_RelatedEntity.Addresses = GetADList(_RelatedEntityInfo.getAddrs());
		_RelatedEntity.Telecoms = GetTELList(_RelatedEntityInfo.getTelecoms());
		_RelatedEntity.EffectiveTime = GetIVL_TS(_RelatedEntityInfo.getEffectiveTime());
		_RelatedEntity.SDTCPatient = GetSDTCPatient(_RelatedEntityInfo.getSDTCPatient());
		_RelatedEntity.Person = GetPerson(_RelatedEntityInfo.getRelatedPerson());
		_RelatedEntity.NullFlavor  = GetNullFlavor(_RelatedEntityInfo.getNullFlavor());
		_RelatedEntity.RoleClassMutualRelationship  = GetNullFlavor(_RelatedEntityInfo.getClassCode());
	} else {
		_RelatedEntity.RealmCodes = GetCSList(null);
		_RelatedEntity.InfrastructureRootTypeId = GetII(null);
		_RelatedEntity.TemplateIds = GetIIList(null);
		_RelatedEntity.Code = GetCE(null);
		_RelatedEntity.Addresses = GetADList(null);
		_RelatedEntity.Telecoms = GetTELList(null);
		_RelatedEntity.EffectiveTime = GetIVL_TS(null);
		_RelatedEntity.SDTCPatient = GetSDTCPatient(null);
		_RelatedEntity.Person = GetPerson(null);
		_RelatedEntity.NullFlavor  = GetNullFlavor(null);
		_RelatedEntity.RoleClassMutualRelationship  = GetNullFlavor(null);
	}
	return _RelatedEntity;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>9202dae9-694e-4c97-bcf1-81d511931eb3</id>
            <name>GetRelatedSubject</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997511</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetRelatedSubject(_relatedSubjectInfo) {
	var _RelatedSubject = {};
	if(_relatedSubjectInfo != null) {
		_RelatedSubject.TemplateIds = GetIIList(_relatedSubjectInfo.getTemplateIds());
		_RelatedSubject.Code = GetCE(_relatedSubjectInfo.getCode());
		_RelatedSubject.Address  = GetADList(_relatedSubjectInfo.getAddrs());
		_RelatedSubject.Telecomms  = GetTELList(_relatedSubjectInfo.getTelecoms());
		_RelatedSubject.SubjectPerson = GetSubjectPerson(_relatedSubjectInfo.getSubject());
		_RelatedSubject.NullFlavor  = GetNullFlavor(_relatedSubjectInfo.getNullFlavor());
		_RelatedSubject.ClassCode = GetVocabInfo(_relatedSubjectInfo.getClassCode());
	}
		
	return _RelatedSubject;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>67c143de-7f09-4a02-a454-05f604725e24</id>
            <name>GetResponsibleParty</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996886</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetResponsibleParty(_ResponsiblePartyInfo) {
	var _ResponsibleParties = {};
	if(_ResponsiblePartyInfo != null) {
		_ResponsibleParties.RealmCodes = GetCSList(_ResponsiblePartyInfo.getRealmCodes());
		_ResponsibleParties.InfrastructureRootTypeId = GetII(_ResponsiblePartyInfo.getTypeId());
		_ResponsibleParties.TemplateIds = GetIIList(_ResponsiblePartyInfo.getTemplateIds());
		_ResponsibleParties.AssignedEntity = GetAssignedEntity(_ResponsiblePartyInfo.getAssignedEntity());
		_ResponsibleParties.NullFlavor  = GetNullFlavor(_ResponsiblePartyInfo.getNullFlavor());
		_ResponsibleParties.ParticipationType = GetNullFlavor(_ResponsiblePartyInfo.getTypeCode());
	} else {
		_ResponsibleParties.RealmCodes = GetCSList(null);
		_ResponsibleParties.InfrastructureRootTypeId = GetII(null);
		_ResponsibleParties.TemplateIds = GetIIList(null);
		_ResponsibleParties.AssignedEntity = GetAssignedEntity(null);
		_ResponsibleParties.NullFlavor  = GetNullFlavor(null);
		_ResponsibleParties.ParticipationType = GetNullFlavor(null);
	}
	return _ResponsibleParties;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>0ebdd612-8da2-44cc-be3b-cf47160f06e2</id>
            <name>GetRTO_PQ_PQ</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996169</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetRTO_PQ_PQ(_RTO_PQ_PQInfo) {
	var _RTO_PQ_PQ = {};

	if(_RTO_PQ_PQInfo != null){
		_RTO_PQ_PQ.Numerator = GetPQ(_RTO_PQ_PQInfo.getNumerator());
		_RTO_PQ_PQ.Denominator = GetPQ(_RTO_PQ_PQInfo.getDenominator());
	} else {
		_RTO_PQ_PQ.Numerator = GetPQ(null);
		_RTO_PQ_PQ.Denominator = GetPQ(null);
	}
	return _RTO_PQ_PQ;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>f3bd7f07-7f8f-4049-8ffa-cd35cfbcb8ce</id>
            <name>GetSC</name>
            <revision>1</revision>
            <lastModified>
              <time>1665308000143</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetSC(_codeInfo) {
	var _Code = {};
	if(_codeInfo != null) {
		
			if(_codeInfo.getCode() != null) {
				_Code.Code = _codeInfo.getCode();
			} else {
				_Code.Code = &quot;&quot;;
			}

			if(_codeInfo.getCodeSystem() != null) {
				_Code.CodeSystem = _codeInfo.getCodeSystem();
			} else {
				_Code.CodeSystem = &quot;&quot;;
			}

			if(_codeInfo.getCodeSystemName() != null) {
				_Code.CodeSystemName = _codeInfo.getCodeSystemName();
			} else {
				_Code.CodeSystemName = &quot;&quot;;
			}

			if(_codeInfo.getCodeSystemVersion() != null) {
				_Code.CodeSystemVersion = _codeInfo.getCodeSystemVersion();
			} else {
				_Code.CodeSystemVersion = &quot;&quot;;
			}

			if(_codeInfo.getDisplayName() != null) {
				_Code.DisplayName = _codeInfo.getDisplayName();
			} else {
				_Code.DisplayName = &quot;&quot;;
			}

			_Code.SC_ST = GetST(_codeInfo);
	} else {
		_Code.Code = &quot;&quot;;
		_Code.CodeSystem = &quot;&quot;;
		_Code.CodeSystemName = &quot;&quot;;
		_Code.CodeSystemVersion = &quot;&quot;;
		_Code.DisplayName = &quot;&quot;;
		_Code.SC_ST = GetST(null);
	}
	
	return _Code;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>ca15f02d-a9d3-46ea-9732-f67c96bbd8c4</id>
            <name>GetSCList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999657</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetSCList(_SCListInfo) {
	var _SCList = []
	if(_SCListInfo != null) {
		var _SCListInfosize = _SCListInfo.size();
		var _i = 0;

		if(_SCListInfosize &gt; 0) {
			for(;_i&lt; _SCListInfosize ; _i++) {
			var _SC = _SCListInfo.get(_i);

			var SC  = GetSC(_SC);
			if(SC != null) {
				_SCList.push(SC);	
			}
		}	
		} else {
			var SC  = GetSC(null);
			if(SC != null) {
				_SCList.push(SC);	
			}
		}
	} else {
		var SC  = GetSC(null);
			if(SC != null) {
				_SCList.push(SC);	
			}
	}
	return _SCList;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>dd7cfbf7-265a-4aef-ba81-9805f124c918</id>
            <name>GetSDTCPatient</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997149</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetSDTCPatient(_SDTCPatientInfo) {
	var _SDTCPatient = {};
	if(_SDTCPatientInfo != null) {
		_SDTCPatient.Id = GetII(_SDTCPatientInfo.getId());
	} else {
		_SDTCPatient.Id = &quot;&quot;;
	}
	return _SDTCPatient;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>4c6d53cf-b4ca-4154-a82f-59cd8008f645</id>
            <name>GetSection</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997137</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetSection(_section) {
	channelMap.put(&apos;_section&apos;,_section);
	var section = {};
	if(_section != null) {
		section.RealmCodes = GetCSList(_section.getRealmCodes());
	section.InfrastructureRootTypeId = GetII(_section.getTypeId());
	section.TemplateIds = GetIIList(_section.getTemplateIds());
	section.Id = GetII(_section.getId());
	section.Code = GetCE(_section.getCode());
	section.Title = GetST(_section.getTitle());
	section.StrucDocText = GetStrucDocText(_section.getText());
	section.ConfidentialityCode = GetCE(_section.getConfidentialityCode());
	section.LanguageCode  = GetCS(_section.getLanguageCode());
	section.Subject  = GetSubject(_section.getSubject());
	section.Authors = GetAuthorList(_section.getAuthors());
	section.Informants = GetInformant12List(_section.getInformants());
	section.Entries = GetEntryList(_section.getEntries());
	section.Components = GetComponent5List(_section.getComponents());
	section.SectionId=_section.getSectionId();
	section.NullFlavor=GetNullFlavor(_section.getNullFlavor());
	section.ActClass=GetVocabInfo(_section.getClassCode());
	section.ActMood=GetVocabInfo(_section.getMoodCode());
	} else {
		section.RealmCodes = GetCSList(null);
	section.InfrastructureRootTypeId = GetII(null);
	section.TemplateIds = GetIIList(null);
	section.Id = GetII(null);
	section.Code = GetCE(null);
	section.Title = GetST(null);
	section.StrucDocText = GetStrucDocText(null);
	section.ConfidentialityCode = GetCE(null);
	section.LanguageCode  = GetCS(null);
	section.Subject  = GetSubject(null);
	section.Authors = GetAuthorList(null);
	section.Informants = GetInformant12List(null);
	section.Entries = GetEntryList(null);
	section.Components = GetComponent5List(null);
	section.SectionId=_section.getSectionId();
	section.NullFlavor=GetNullFlavor(null);
	section.ActClass=GetVocabInfo(null);
	section.ActMood=GetVocabInfo(null);
	}
	
	return section;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>e141cabe-9e5d-4742-b79e-cae693380eb3</id>
            <name>GetSectionConfidentialityCode</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996439</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetSectionConfidentialityCode(_section) {
	var _ConfidentialityCode = {};
	if(_section.getConfidentialityCode() != null) {
		var _sectionConfidentialityCode = _section.getConfidentialityCode();
		
		
			if(_sectionConfidentialityCode.getCode() != null) {
				_ConfidentialityCode.Code = _sectionConfidentialityCode.getCode();
			} else {
				_ConfidentialityCode.Code = &quot;&quot;;
			}

			if(_sectionConfidentialityCode.getCodeSystem() != null) {
				_ConfidentialityCode.CodeSystem = _sectionConfidentialityCode.getCodeSystem();
			} else {
				_ConfidentialityCode.CodeSystem = &quot;&quot;;
			}

			if(_sectionConfidentialityCode.getCodeSystemName() != null) {
				_ConfidentialityCode.CodeSystemName = _sectionConfidentialityCode.getCodeSystemName();
			} else {
				_ConfidentialityCode.CodeSystemName = &quot;&quot;;
			}

			if(_sectionConfidentialityCode.getCodeSystemVersion() != null) {
				_ConfidentialityCode.CodeSystemVersion = _sectionConfidentialityCode.getCodeSystemVersion();
			} else {
				_ConfidentialityCode.CodeSystemVersion = &quot;&quot;;
			}

			if(_sectionConfidentialityCode.getDisplayName() != null) {
				_ConfidentialityCode.DisplayName = _sectionConfidentialityCode.getDisplayName();
			} else {
				_ConfidentialityCode.DisplayName = &quot;&quot;;
			}
	}
	return _ConfidentialityCode;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>fd7c8d8a-6953-4d82-b4ed-41a15383dc76</id>
            <name>GetServiceEvent</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307995431</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetServiceEvent(_ServiceEventInfo) {
	var _ServiceEvents = {};
	if(_ServiceEventInfo != null) {
		_ServiceEvents.RealmCodes = GetCSList(_ServiceEventInfo.getRealmCodes());
		_ServiceEvents.InfrastructureRootTypeId = GetII(_ServiceEventInfo.getTypeId());
		_ServiceEvents.TemplateIds = GetIIList(_ServiceEventInfo.getTemplateIds());
		_ServiceEvents.Ids = GetIIList(_ServiceEventInfo.getIds());
		_ServiceEvents.Code = GetCE(_ServiceEventInfo.getCode());
		_ServiceEvents.IVL_TS = GetIVL_TS(_ServiceEventInfo.getEffectiveTime());
		_ServiceEvents.Performer1s = GetPerformer1List(_ServiceEventInfo.getPerformers());
		_ServiceEvents.NullFlavor  = GetNullFlavor(_ServiceEventInfo.getNullFlavor());
		_ServiceEvents.ActClassRoot = GetNullFlavor(_ServiceEventInfo.getClassCode());
		_ServiceEvents.ActMood = GetNullFlavor(_ServiceEventInfo.getMoodCode());
	} else {
		_ServiceEvents.RealmCodes = GetCSList(null);
		_ServiceEvents.InfrastructureRootTypeId = GetII(null);
		_ServiceEvents.TemplateIds = GetIIList(null);
		_ServiceEvents.Ids = GetIIList(null);
		_ServiceEvents.Code = GetCE(null);
		_ServiceEvents.IVL_TS = GetIVL_TS(null);
		_ServiceEvents.Performer1s = GetPerformer1List(null);
		_ServiceEvents.NullFlavor  = GetNullFlavor(null);
		_ServiceEvents.ActClassRoot = GetNullFlavor(null);
		_ServiceEvents.ActMood = GetNullFlavor(null);
	}
	return _ServiceEvents;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>a533ea31-461b-425a-a89e-461cd7b84224</id>
            <name>GetSpecimen</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997195</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetSpecimen(_specimenInfo) {
	var _Speciment = {};
	if(_specimenInfo != null) {
		_Speciment.RealmCodes = GetCSList(_specimenInfo.getRealmCodes());// templete needed
		_Speciment.TypeId  = GetII(_specimenInfo.getTypeId());
		_Speciment.TemplateIds  = GetIIList(_specimenInfo.getTemplateIds());
		_Speciment.SpecimenRole  = GetSpecimenRole(_specimenInfo.getSpecimenRole());
		_Speciment.NullFlavor  = GetNullFlavor(_specimenInfo.getNullFlavor());
		_Speciment.TypeCode  = GetVocabInfo(_specimenInfo.getTypeCode());
	}
	return _Speciment;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>aaa600b4-67a6-431f-81a3-444031f9ea98</id>
            <name>GetSpecimenList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998956</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetSpecimenList(_SpecimenInfo) {
	var _Specimens = []
	if(_SpecimenInfo != null) {
		var _SpecimenInfosize = _SpecimenInfo.size();
		var _i = 0;
		
		for(;_i&lt; _SpecimenInfosize ; _i++) {

			var _Specimen = _SpecimenInfo.get(_i);

			var _Specimen  = GetSpecimen(_Specimen);
			if(_Specimen != null) {
				_Specimens.push(_Specimen);
			}
		}	
	}
	
	return _Specimens;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>6bee571f-3a71-4d83-bde8-73936f55b4ca</id>
            <name>GetSpecimenRole</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999932</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/

function GetSpecimenRole(_specimenroleInfo) {
	var _SpecimenRole = {};
	if(_specimenroleInfo != null) {
		_SpecimenRole.RealmCodes = GetCSList(_specimenroleInfo.getRealmCodes());		
		_SpecimenRole.TemplateIds = GetIIList(_specimenroleInfo.getTemplateIds());
		_SpecimenRole.Ids  = GetIIList(_specimenroleInfo.getIds());
		_SpecimenRole.SpecimenPlayingEntity = GetPlayingEntity(_specimenroleInfo.getSpecimenPlayingEntity());// Template Needed
		_SpecimenRole.NullFlavor = GetNullFlavor(_specimenroleInfo.getNullFlavor());
		_SpecimenRole.ClassCode = GetVocabInfo(_specimenroleInfo.getClassCode());
	}
	return _SpecimenRole;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>8c8b972e-927c-4844-801f-b3ca862e6292</id>
            <name>GetST</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307995597</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetST(_STInfo) {
	var _ST = &quot;&quot;;
	if(_STInfo != null) {
		_ST = _STInfo.getText();
	} else {
		_ST = &quot;&quot;;
	}

	return _ST;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>18c92fce-a98e-4bfb-a585-fc5c4ec38d01</id>
            <name>GetStrucDocText</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998313</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetStrucDocText(_strucDocTextInfo) {
	channelMap.put(&apos;_strucDocTextInfo&apos;,_strucDocTextInfo);
	var _strucDocText = {};
	if(_strucDocTextInfo != null) {
		/*
			if(_strucDocTextInfo.getID() != null) {
				_strucDocText.ID = _strucDocTextInfo.getID();
			} else {
				_strucDocText.ID = &quot;&quot;;
			}
		*/
			if(_strucDocTextInfo.getText() != null) {
				_strucDocText.Text = _strucDocTextInfo.getText();
			} else {
				_strucDocText.Text = &quot;&quot;;
			}

			if(_strucDocTextInfo.getMixed() != null) {
				_strucDocText.FeatureMap = GetFeatureMap(_strucDocTextInfo.getMixed());
			} else {
				_strucDocText.FeatureMap = &quot;&quot;;
			}
	} else {
		//	_strucDocText.ID = &quot;&quot;;
			_strucDocText.Text = &quot;&quot;;
	}
	
	return _strucDocText;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>a86e1041-1133-4d47-8032-d675c8d312b1</id>
            <name>GetStructuredBody</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997917</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetStructuredBody(_StructuredBodyInfo) {
	var _StructuredBodys = {};
	if(_StructuredBodyInfo != null) {
		_StructuredBodys.RealmCodes = GetCSList(_StructuredBodyInfo.getRealmCodes());
		_StructuredBodys.InfrastructureRootTypeId = GetII(_StructuredBodyInfo.getTypeId());
		_StructuredBodys.TemplateIds = GetIIList(_StructuredBodyInfo.getTemplateIds());
		_StructuredBodys.ConfidentialityCode = GetCE(_StructuredBodyInfo.getConfidentialityCode());
		_StructuredBodys.LanguageCode = GetCS(_StructuredBodyInfo.getLanguageCode());
		_StructuredBodys.Component3s = GetComponent3List(_StructuredBodyInfo.getComponents());
		_StructuredBodys.NullFlavor  = GetNullFlavor(_StructuredBodyInfo.getNullFlavor());
		_StructuredBodys.ActClass = GetNullFlavor(_StructuredBodyInfo.getClassCode());
		_StructuredBodys.ActMood = GetNullFlavor(_StructuredBodyInfo.getMoodCode());
	} else {
		_StructuredBodys.RealmCodes = GetCSList(null);
		_StructuredBodys.InfrastructureRootTypeId = GetII(null);
		_StructuredBodys.TemplateIds = GetIIList(null);
		_StructuredBodys.ConfidentialityCode = GetCE(null);
		_StructuredBodys.LanguageCode = GetCS(null);
		_StructuredBodys.Component3s = GetComponent3List(null);
		_StructuredBodys.NullFlavor  = GetNullFlavor(null);
		_StructuredBodys.ActClass = GetNullFlavor(null);
		_StructuredBodys.ActMood = GetNullFlavor(null);
	}
	return _StructuredBodys;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>cbdb9c2a-4ef6-4cbb-b168-7b9f805e9aa1</id>
            <name>GetSubject</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999567</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetSubject(_subjectInfo) {
	var _Subject = {};
	if(_subjectInfo != null) {
		_Subject.TemplateIds = GetIIList(_subjectInfo.getTemplateIds());
		_Subject.AwarenessCode  = GetCE(_subjectInfo.getAwarenessCode());
		_Subject.RelatedSubject  = GetRelatedSubject(_subjectInfo.getRelatedSubject());
		_Subject.NullFlavor  = GetNullFlavor(_subjectInfo.getNullFlavor());
		_Subject.ParticipationTargetSubject = GetParticipationTargetSubject(_subjectInfo.getTypeCode());
		_Subject.ContextControlCode = GetContextControlCode(_subjectInfo.getContextControlCode());
	}
	return _Subject;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>8cc1e12b-10a8-43c5-9839-bfb9f78946eb</id>
            <name>GetSubjectAwarenessCode</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307994595</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetSubjectAwarenessCode(_subject) {
	var _AwarenessCode = {};
	if(_subject.getAwarenessCode() != null) {
		var _subjectAwarenessCode = _subject.getAwarenessCode();
		
		
			if(_subjectAwarenessCode.getCode() != null) {
				_AwarenessCode.Code = _subjectAwarenessCode.getCode();
			} else {
				_AwarenessCode.Code = &quot;&quot;;
			}

			if(_subjectAwarenessCode.getCodeSystem() != null) {
				_AwarenessCode.CodeSystem = _subjectAwarenessCode.getCodeSystem();
			} else {
				_AwarenessCode.CodeSystem = &quot;&quot;;
			}

			if(_subjectAwarenessCode.getCodeSystemName() != null) {
				_AwarenessCode.CodeSystemName = _subjectAwarenessCode.getCodeSystemName();
			} else {
				_AwarenessCode.CodeSystemName = &quot;&quot;;
			}

			if(_subjectAwarenessCode.getCodeSystemVersion() != null) {
				_AwarenessCode.CodeSystemVersion = _subjectAwarenessCode.getCodeSystemVersion();
			} else {
				_AwarenessCode.CodeSystemVersion = &quot;&quot;;
			}

			if(_subjectAwarenessCode.getDisplayName() != null) {
				_AwarenessCode.DisplayName = _subjectAwarenessCode.getDisplayName();
			} else {
				_AwarenessCode.DisplayName = &quot;&quot;;
			}
	}
		
	return _AwarenessCode;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>8cf2171a-dfea-495f-bef9-b1cb9914423d</id>
            <name>GetSubjectPerson</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998571</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetSubjectPerson(_subjectPersonInfo) {
	var _SubjectPersion = {};
	if(_subjectPersonInfo != null) {
		_SubjectPersion.TemplateIds = GetIIList(_subjectPersonInfo.getTemplateIds());
		_SubjectPersion.SDTCIds  = GetIIList(_subjectPersonInfo.getSDTCIds());
//getNames
		
		_SubjectPersion.AdministrativeGenderCode  = GetCE(_subjectPersonInfo.getAdministrativeGenderCode());
		_SubjectPersion.BirthTime  = GetTS(_subjectPersonInfo.getBirthTime());
		_SubjectPersion.Names = GetPNList(_subjectPersonInfo.getNames());
		//getSDTCDeceasedInd
		_SubjectPersion.DeceasedTime  = GetTS(_subjectPersonInfo.getSDTCDeceasedTime());
		_SubjectPersion.NullFlavor  = GetNullFlavor(_subjectPersonInfo.getNullFlavor());
		_SubjectPersion.ClassCode = GetVocabInfo(_subjectPersonInfo.getClassCode());
		_SubjectPersion.EntityDeterminer = GetVocabInfo(_subjectPersonInfo.getDeterminerCode());
	}
		
	return _SubjectPersion;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>9157d756-710f-4b33-bfcc-62fba3437821</id>
            <name>GetSubstanceAdministration</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996496</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetSubstanceAdministration(_substanceAdministrationInfo) {
	var _SubstanceAdministrations = {};
	if(_substanceAdministrationInfo != null) {
		_SubstanceAdministrations.RealmCodes = GetCSList(_substanceAdministrationInfo.getRealmCodes());
		_SubstanceAdministrations.TypeId  = GetII(_substanceAdministrationInfo.getTypeId());
		_SubstanceAdministrations.TemplateIds  = GetIIList(_substanceAdministrationInfo.getTemplateIds());
		_SubstanceAdministrations.Ids=GetIIList(_substanceAdministrationInfo.getIds());
		_SubstanceAdministrations.Code  = GetCD(_substanceAdministrationInfo.getCode());
		_SubstanceAdministrations.Text  = GetED(_substanceAdministrationInfo.getText());
		_SubstanceAdministrations.StatusCode=GetCS(_substanceAdministrationInfo.getStatusCode());
		_SubstanceAdministrations.EffectiveTime=GetIVL_TS(_substanceAdministrationInfo.getEffectiveTime());
		_SubstanceAdministrations.PriorityCode=GetCE(_substanceAdministrationInfo.getPriorityCode());
		_SubstanceAdministrations.RepeatNumber=GetIVL_INT(_substanceAdministrationInfo.getRepeatNumber());//Template Needed
		_SubstanceAdministrations.RouteCode=GetCE(_substanceAdministrationInfo.getRouteCode());
		_SubstanceAdministrations.ApproachSiteCodes=GetCDList(_substanceAdministrationInfo.getApproachSiteCodes());	
		_SubstanceAdministrations.DoseQuantity=GetIVL_PQ(_substanceAdministrationInfo.getDoseQuantity());// Template Needed	
		_SubstanceAdministrations.RateQuantity=GetIVL_PQ(_substanceAdministrationInfo.getRateQuantity());// Template Needed
		_SubstanceAdministrations.MaxDoseQuantity=GetRTO_PQ_PQ(_substanceAdministrationInfo.getMaxDoseQuantity());// Template Needed
		_SubstanceAdministrations.AdministrationUnitCode=GetCE(_substanceAdministrationInfo.getAdministrationUnitCode());
		_SubstanceAdministrations.Subject=GetSubject(_substanceAdministrationInfo.getSubject());
		_SubstanceAdministrations.Specimens=GetSpecimentList(_substanceAdministrationInfo.getSpecimens());	
		_SubstanceAdministrations.Consumable=GetConsumable(_substanceAdministrationInfo.getConsumable());	//Template Needed
		_SubstanceAdministrations.Performers=GetPerformer2List(_substanceAdministrationInfo.getPerformers());
		_SubstanceAdministrations.Authors=GetAuthorList(_substanceAdministrationInfo.getAuthors());
		_SubstanceAdministrations.Informants=GetInformant12List(_substanceAdministrationInfo.getInformants());
		_SubstanceAdministrations.Participants=GetParticipant2List(_substanceAdministrationInfo.getParticipants());
		_SubstanceAdministrations.EntryRelationships=GetEntryRelationshipList(_substanceAdministrationInfo.getEntryRelationships());
		_SubstanceAdministrations.References=GetReferenceList(_substanceAdministrationInfo.getReferences());
		_SubstanceAdministrations.Preconditions=GetPreconditionList(_substanceAdministrationInfo.getPreconditions());// Template needed
		_SubstanceAdministrations.NullFlavor  = GetNullFlavor(_substanceAdministrationInfo.getNullFlavor());
		_SubstanceAdministrations.ClassCode=GetVocabInfo(_substanceAdministrationInfo.getClassCode());
		_SubstanceAdministrations.MoodCode=GetVocabInfo(_substanceAdministrationInfo.getMoodCode());
		_SubstanceAdministrations.NegationInd=_substanceAdministrationInfo.getNegationInd();
	}
		
	return _SubstanceAdministrations;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>87f5bc30-1b5c-49d3-89de-624e57f20884</id>
            <name>GetSupply</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997434</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetSupply(_supplyInfo) {
	var _Supplys = {};
	if(_supplyInfo != null) {
		_Supplys.RealmCodes = GetCSList(_supplyInfo.getRealmCodes());
		_Supplys.TypeId  = GetII(_supplyInfo.getTypeId());
		_Supplys.TemplateIds  = GetIIList(_supplyInfo.getTemplateIds());
		_Supplys.Ids=GetIIList(_supplyInfo.getIds());
		_Supplys.Code  = GetCD(_supplyInfo.getCode());
		_Supplys.Text  = GetED(_supplyInfo.getText());
		_Supplys.StatusCode=GetCS(_supplyInfo.getStatusCode());
		_Supplys.EffectiveTime=GetIVL_TS(_supplyInfo.getEffectiveTime());
		_Supplys.PriorityCode=GetCE(_supplyInfo.getPriorityCode());
		_Supplys.RepeatNumber=GetIVL_INT(_supplyInfo.getRepeatNumber());//Template Needed
		_Supplys.IndependentInd=GetBL(_supplyInfo.getIndependentInd())
		_Supplys.Quantity=GetPQ(_supplyInfo.getQuantity());
		_Supplys.ExpectedUseTime=GetIVL_TS(_supplyInfo.getExpectedUseTime());
		_Supplys.Subject=GetSubject(_supplyInfo.getSubject());
		_Supplys.Specimens=GetSpecimenList(_supplyInfo.getSpecimens());
		_Supplys.Product=GetProduct(_supplyInfo.getProduct());//Template Needed
		_Supplys.Performers=GetPerformer2List(_supplyInfo.getPerformers());		
		_Supplys.Authors=GetAuthorList(_supplyInfo.getAuthors());
		_Supplys.Informants=GetInformant12List(_supplyInfo.getInformants());
		_Supplys.Participants=GetParticipant2List(_supplyInfo.getParticipants());
		_Supplys.EntryRelationships=GetEntryRelationshipList(_supplyInfo.getEntryRelationships());		
		_Supplys.References=GetReferenceList(_supplyInfo.getReferences());
		_Supplys.Preconditions=GetPreconditionList(_supplyInfo.getPreconditions());// Template needed		
		_Supplys.NullFlavor  = GetNullFlavor(_supplyInfo.getNullFlavor());
		_Supplys.ClassCode=GetVocabInfo(_supplyInfo.getClassCode());
		_Supplys.MoodCode=GetVocabInfo(_supplyInfo.getMoodCode());
	}
		
	return _Supplys;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>5266b4e0-dd67-4cd9-8e40-ddf4bc6e8029</id>
            <name>GetSXCM_PQ</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996739</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetSXCM_PQ(_SXCM_PQInfo) {
	var _SXCM_PQ = {};
	if(_SXCM_PQInfo != null) {
		
			if(_SXCM_PQInfo.getOperator() != null) {
				_SXCM_PQ.Operator = GetVocabInfo(_SXCM_PQInfo.getOperator());
			} else {
				_SXCM_PQ.Operator = &quot;&quot;;
			}

			_SXCM_PQ.PQ = GetPQ(_SXCM_PQInfo);

			
	} else {
		_SXCM_PQ.Operator = &quot;&quot;;
		_SXCM_PQ.PQ = GetPQ(null);
	}
	return _SXCM_PQ;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>67c8d59a-5c16-42d3-a5df-3746e4ac7fe9</id>
            <name>GetSXCM_TS</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998439</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetSXCM_TS(_SXCM_TSInfo) {
	var _SXCM_TS = {};
	if(_SXCM_TSInfo != null) {
		
			if(_SXCM_TSInfo.getOperator() != null) {
				_SXCM_TS.Operator = GetVocabInfo(_SXCM_TSInfo.getOperator());
			} else {
				_SXCM_TS.Operator = &quot;&quot;;
			}

			if(_SXCM_TSInfo instanceof org.openhealthtools.mdht.uml.hl7.datatypes.IVL_TS) {
			_SXCM_TS.IVL_TS = GetIVL_TS(_SXCM_TSInfo);
			} else {
			_SXCM_TS.IVL_TS = {};
			}

			if(_SXCM_TSInfo instanceof org.openhealthtools.mdht.uml.hl7.datatypes.PIVL_TS) {
			_SXCM_TS.PIVL_TS = GetPIVL_TS(_SXCM_TSInfo);
			} else {
			_SXCM_TS.PIVL_TS = {};
			}

			if(_SXCM_TSInfo instanceof org.openhealthtools.mdht.uml.hl7.datatypes.EIVL_TS) {
			_SXCM_TS.EIVL_TS = GetEIVL_TS(_SXCM_TSInfo);
			} else {
			_SXCM_TS.EIVL_TS = {};
			}

			_SXCM_TS.Value = GetTS(_SXCM_TSInfo);
			
	} else {
		_SXCM_TS.Operator = &quot;&quot;;
		_SXCM_TS.Value = &quot;&quot;;
	}
	return _SXCM_TS;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>ab41b3fc-b848-4074-96b4-6abe876b1a55</id>
            <name>GetSXCM_TSList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999966</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetSXCM_TSList(_SXCM_TSs) {
	var _SXCMs = []
	if(_SXCM_TSs != null) {
		var _SXCM_TSsize = _SXCM_TSs.size();
		var _i = 0;
		if(_SXCM_TSsize &gt; 0) {
			for(;_i&lt; _SXCM_TSsize ; _i++) {
			var _sxcm = _SXCM_TSs.get(_i);

			var SXCM  = GetSXCM_TS(_sxcm);
			if(SXCM != null) {
				_SXCMs.push(SXCM);	
			}
		}	
		} else {
			var SXCM  = GetSXCM_TS(null);
			if(SXCM != null) {
				_SXCMs.push(SXCM);	
			}
		}
			
	} else {
		var SXCM  = GetSXCM_TS(null);
			if(SXCM != null) {
				_SXCMs.push(SXCM);	
			}
	}
		
	return _SXCMs;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>a2c18233-4a34-4c2e-aad5-48cb06e5f468</id>
            <name>GetTableasJSON</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307995614</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetTableasJSON(sectionText) {
	// TODO: Enter code here
	importPackage(org.jsoup) // initialize package
	//logger.info(sectionText)
	var contents = sectionText;
	var tdoc = Jsoup.parse(contents);
	if(tdoc.select(&quot;table&quot;)!=&apos;&apos;)
	{
		var tblct=tdoc.select(&quot;table&quot;).size();
		var tabdata=[];
		for(var _tbl=0;_tbl&lt;tblct;_tbl++)
		{
			var table=tdoc.select(&quot;table&quot;).get(_tbl);
			
			if(table.select(&quot;thead&quot;)==&apos;&apos; &amp;&amp; table!=&apos;&apos;)
			{
				
				var tablerow=table.select(&quot;tr&quot;);
				//var tabdata=[];
				tabdata[_tbl]=[];
				for(var ij = 0; ij &lt; tablerow.size(); ij++)
				{
					tabdata[_tbl][ij]={};
					var r=tablerow.get(ij);
					var rdk=r.select(&quot;th&quot;);
					var rdv=r.select(&quot;td&quot;);
					tabdata[_tbl][ij][rdk.text()]=rdv.text();
				}
			}
			else if(table.select(&quot;thead&quot;)!=&apos;&apos; &amp;&amp; table!=&apos;&apos;)
			{
				
				var tbody=table.select(&quot;tbody&quot;);
				
				var thead=table.select(&quot;thead&quot;);
				
				var theaddata=thead.select(&quot;th&quot;);
				
				var tbodyrow=tbody.select(&quot;tr&quot;);
				
				//var tabdata=[];
				tabdata[_tbl]=[];
				for(var ij = 0; ij &lt; tbodyrow.size(); ij++)
				{
					tabdata[_tbl][ij]={};
					var tdatarow=tbodyrow.get(ij);
					
					var tddata=tdatarow.select(&quot;td&quot;);
					
					var r=tbodyrow.get(ij);
					
					for(var h=0;h&lt;theaddata.size();h++)
					{
						var key=theaddata.get(h).text();
						
						var value=tddata.get(h).text();
						
						tabdata[_tbl][ij][key]=value;
					}
					
				}
				
				
			}
		}
	}
	else if(tdoc.select(&quot;content&quot;)!=&apos;&apos;)
	{
		var data=tdoc.select(&quot;content&quot;);
		tabdata=data.text();
	}
	else
	{
		tabdata=tdoc.text()
	}
	
	//logger.info(&apos;GetTableasJSON-&gt;&apos;+JSON.stringify(tabdata));
	return tabdata;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>eda24268-191c-4a81-86d9-ae4005e9175f</id>
            <name>GetTEL</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998544</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>

function GetTEL(_telsObj) {
	var _tel = {};
	if(_telsObj != null) {
			_tel.UsablePeriods  = GetSXCM_TSList(_telsObj.getUseablePeriods());
			_tel.TelecomAddress  = GetAddressUseList(_telsObj.getUses());
			_tel.TEL_URL  = GetURL(_telsObj);
	} else {
		_tel.UsablePeriods  = GetSXCM_TSList(null);
			_tel.TelecomAddress  = GetAddressUseList(null);
			_tel.TEL_URL  = GetURL(null);
	}
	return _tel;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>9cdb42f1-9eee-49e1-9500-4598442a2a14</id>
            <name>GetTELList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999820</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetTELList(_telsObj) {
	var _tels = [];
	if(_telsObj != null) {
		var _telsObjSize = _telsObj.size();
		var _i = 0;

		if(_telsObjSize &gt; 0) {
			for(;_i&lt; _telsObjSize ; _i++) {
			var _tel = {};
			var _telObj = _telsObj.get(_i);

			_tel.UsablePeriods  = GetSXCM_TSList(_telObj .getUseablePeriods());

			_tel.TelecomAddress  = GetAddressUseList(_telObj.getUses());
			
			_tel.TEL_URL  = GetURL(_telObj);

			_tels.push(_tel);
			
		}	
		} else {
			var _tel = {};
			

			_tel.UsablePeriods  = GetSXCM_TSList(null);

			_tel.TelecomAddress  = GetAddressUseList(null);

			_tel.TEL_URL  = GetURL(null);
			
			_tels.push(_tel);	
		}
		
	} else {
		var _tel = {};
			

			_tel.UsablePeriods  = GetSXCM_TSList(null);

			_tel.TelecomAddress  = GetAddressUseList(null);

			_tel.TEL_URL  = GetURL(null);
			
			_tels.push(_tel);
			
	}
		
	return _tels;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>ba60d009-435e-4004-9851-2bc927c39d56</id>
            <name>GetTS</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997110</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetTS(_TSInfo) {
	var _TS = {};
	if(_TSInfo != null) {
		
			if(_TSInfo.getValue() != null) {
				_TS.Value = _TSInfo.getValue();
			} else {
				_TS.Value = &quot;&quot;;
			}
	} else {
		_TS.Value = &quot;&quot;;
	}
	
	return _TS;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>b6b90262-030b-48ea-8e43-212bdcee726c</id>
            <name>GetURL</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997097</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetURL(_URLInfo) {
	var _URL = {};
	if(_URLInfo != null) {
		
			if(_URLInfo.getValue() != null) {
				_URL.Value = _URLInfo.getValue();
			} else {
				_URL.Value = &quot;&quot;;
			}
	} else {
		_URL.Value = &quot;&quot;;
	}
	return _URL;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>71d1c267-0b7f-4535-a2fb-01f4d4d29083</id>
            <name>GetValuebyId</name>
            <revision>16</revision>
            <lastModified>
              <time>1667995862294</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetValuebyId(sectionText,reference) {
	// TODO: Enter code here
	importPackage(org.jsoup) // initialize package
	//logger.info(JSON.stringify(reference));

	
	if(sectionText!=null &amp;&amp; sectionText!=&apos;&apos;&amp;&amp;reference!=&apos;&apos;)
	{
		var contents = sectionText;
	
		var tdoc = Jsoup.parse(contents);

		
		
		if(tdoc.select(reference)!=&apos;&apos; &amp;&amp; tdoc.select(reference)!=null)
		{
			var tblct=tdoc.select(reference).first();
			var id_value=tblct.text();

			
			return id_value;
		}
		else if(tdoc.getElementById(reference)!=&apos;&apos; &amp;&amp; tdoc.getElementById(reference)!=null)
		{
			//logger.info(&apos;GetValuebyId-&gt;&apos;+tdoc.getElementById(reference))
			var element=tdoc.getElementById(reference);
			return element.text();
			
		}
		
	}	
	//logger.info(&apos;GetTableasJSON-&gt;&apos;+JSON.stringify(tabdata));
	
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>93adc7d1-9f88-42ed-8929-14786f641610</id>
            <name>GetValueFromTable</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997573</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetValueFromTable(sectionText,_referenceValue) {
	var _tableValue = &apos;&apos;;
	if(sectionText != null){
										sectionText = sectionText.replace(&apos;&lt;text xmlns=&quot;urn:hl7-org:v3&quot;&gt;&apos;,&apos;&apos;);
										sectionText = sectionText.replace(&apos;&lt;/text&gt;&apos;,&apos;&apos;);
										sectionText = sectionText.replace(&apos;&lt;thead&gt;&apos;,&apos;&apos;);
										sectionText = sectionText.replace(&apos;&lt;/thead&gt;&apos;,&apos;&apos;);
										sectionText = sectionText.replace(&apos;&lt;tbody&gt;&apos;,&apos;&apos;);
										sectionText = sectionText.replace(&apos;&lt;/tbody&gt;&apos;,&apos;&apos;);

										_referenceValue = _referenceValue.replace(&apos;#&apos;,&apos;&apos;);

										var n = sectionText.toLowerCase().indexOf(_referenceValue.toLowerCase());
										if(n != -1){
											var remaningstring = sectionText.substr(n);
											var lessThanIndex = remaningstring.indexOf(&apos;&lt;&apos;);
											if(lessThanIndex != -1){
												var actualValue  = remaningstring.substr(0,lessThanIndex);
												actualValue = actualValue.toLowerCase().replace(_referenceValue.toLowerCase(),&apos;&apos;);
												actualValue = actualValue.replace(&apos;&quot;&gt;&apos;,&apos;&apos;);
												_tableValue = actualValue;
											}
											
										}
									}
	return _tableValue;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>fcd80103-cf81-4295-b0da-18b2ab7e9252</id>
            <name>GetVocabInfo</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999982</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function GetVocabInfo(_vocab) {
	var _vocabInfo = {};
	if(_vocab != null) {
		
			if(_vocab.getValue() != null) {
				_vocabInfo.Value = _vocab.getValue();
			} else {
				_vocabInfo.Value = &quot;&quot;;
			}

			if(_vocab.getName() != null) {
				_vocabInfo.Name = _vocab.getName();
			} else {
				_vocabInfo.Name = &quot;&quot;;
			}

			if(_vocab.getLiteral() != null) {
				_vocabInfo.Literal = _vocab.getLiteral();
			} else {
				_vocabInfo.Literal = &quot;&quot;;
			}		
	} else {
		_vocabInfo.Value = &quot;&quot;;
		_vocabInfo.Name = &quot;&quot;;
		_vocabInfo.Literal = &quot;&quot;;
	}
		
	return _vocabInfo;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>e02ed28c-d668-4057-ad3c-7c5e898057a8</id>
            <name>GetVocabInfoList</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307994776</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetVocabInfoList(_VocabInfoInfo) {
	var _VocabInfos = []
	if(_VocabInfoInfo != null) {
		var _VocabInfoInfosize = _VocabInfoInfo.size();
		var _i = 0;

		if(_VocabInfoInfosize &gt; 0) {
			for(;_i&lt; _VocabInfoInfosize ; _i++) {

			var _VocabInfo = _VocabInfoInfo.get(_i);

			var VocabInfo  = GetVocabInfo(_VocabInfo);
			if(VocabInfo != null) {
				_VocabInfos.push(VocabInfo);
			}
		}	
		} else {
			var VocabInfo  = GetVocabInfo(null);
			if(VocabInfo != null) {
				_VocabInfos.push(VocabInfo);
			}
		}
			
	} else {
		var VocabInfo  = GetVocabInfo(null);
			if(VocabInfo != null) {
				_VocabInfos.push(VocabInfo);
			}
	}
	
	return _VocabInfos;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>f5bc7193-33a1-480d-85af-ff30a89082d0</id>
            <name>PopulateEntityRelationships</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997733</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function PopulateEntityRelationships(_entryrelationship) {
	var entryrelationship = {};
	
	if(_entryrelationship != null){
		entryrelationship.SequenceNumber = GetINT(_entryrelationship.getSequenceNumber());	
	}
	
	var _entryrelationshipObservation = _entryrelationship.getObservation();
			if (_entryrelationshipObservation != null) {
				var entryrelationshipObservation = {};
				entryrelationshipObservation.TemplateIds = GetIIList(_entryrelationshipObservation.getTemplateIds());
				entryrelationshipObservation.Ids = GetIIList(_entryrelationshipObservation.getIds());
				entryrelationshipObservation.Code = GetCD(_entryrelationshipObservation.getCode());
				entryrelationshipObservation.Values = GetAnyList(_entryrelationshipObservation.getValues());
				entryrelationshipObservation.StatusCode = GetCS(_entryrelationshipObservation.getStatusCode());
				entryrelationshipObservation.EffectiveTime = GetIVL_TS(_entryrelationshipObservation.getEffectiveTime());
				entryrelationshipObservation.Authors = GetAuthorList(_entryrelationshipObservation.getAuthors());

				var _entryrelationshipObservationentryrelationships = _entryrelationshipObservation.getEntryRelationships();
				var EntryrelationshipObservationentryrelationships = [];

				if (_entryrelationshipObservationentryrelationships != null) {
					var _entryrelationshipObservationentryrelationshipsSize = _entryrelationshipObservationentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipObservationentryrelationshipsSize; _count++) {
						var EntryrelationshipObservationentryrelationship = {};
						var _entryrelationshipObservationentryrelationship = _entryrelationshipObservationentryrelationships.get(_count);
						EntryrelationshipObservationentryrelationship = PopulateEntityRelationshipsLevel1(_entryrelationshipObservationentryrelationship);
						EntryrelationshipObservationentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipObservationentryrelationship.getTypeCode());
						EntryrelationshipObservationentryrelationships.push(EntryrelationshipObservationentryrelationship);
					}
				}
				entryrelationshipObservation.EntryRelationships = EntryrelationshipObservationentryrelationships;
				entryrelationship.Observation = entryrelationshipObservation;
			}

			var _entryrelationshipEncounter = _entryrelationship.getEncounter();
			if (_entryrelationshipEncounter != null) {
				var entryrelationshipEncounter = {};
				entryrelationshipEncounter.TemplateIds = GetIIList(_entryrelationshipEncounter.getTemplateIds());
				entryrelationshipEncounter.Ids = GetIIList(_entryrelationshipEncounter.getIds());
				entryrelationshipEncounter.Code = GetCD(_entryrelationshipEncounter.getCode());
				entryrelationshipEncounter.EffectiveTime = GetIVL_TS(_entryrelationshipEncounter.getEffectiveTime());
				entryrelationshipEncounter.Performers = GetPerformer2List(_entryrelationshipEncounter.getPerformers());
				var _entryrelationshipEncounterentryrelationships = _entryrelationshipEncounter.getEntryRelationships();
				var EntryrelationshipEncounterentryrelationships = [];

				if (_entryrelationshipEncounterentryrelationships != null) {
					var _entryrelationshipEncounterentryrelationshipsSize = _entryrelationshipEncounterentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipEncounterentryrelationshipsSize; _count++) {
						var EntryrelationshipEncounterentryrelationship = {};
						var _entryrelationshipEncounterentryrelationship = _entryrelationshipEncounterentryrelationships.get(_count);
						EntryrelationshipEncounterentryrelationship = PopulateEntityRelationshipsLevel1(_entryrelationshipEncounterentryrelationship);
						EntryrelationshipEncounterentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipEncounterentryrelationship.getTypeCode());
						EntryrelationshipEncounterentryrelationships.push(EntryrelationshipEncounterentryrelationship);
					}
				}
				entryrelationshipEncounter.EntryRelationships = EntryrelationshipEncounterentryrelationships;
				entryrelationship.Encounter = entryrelationshipEncounter;
			}

			var _entryrelationshipAct = _entryrelationship.getAct();
			if (_entryrelationshipAct != null) {
				var entryrelationshipAct = {};
				entryrelationshipAct.TemplateIds = GetIIList(_entryrelationshipAct.getTemplateIds());
				entryrelationshipAct.Ids = GetIIList(_entryrelationshipAct.getIds());
				entryrelationshipAct.Code = GetCD(_entryrelationshipAct.getCode());
				entryrelationshipAct.StatusCode = GetCS(_entryrelationshipAct.getStatusCode());
				entryrelationshipAct.Text = GetED(_entryrelationshipAct.getText());
				entryrelationshipAct.EffectiveTime = GetIVL_TS(_entryrelationshipAct.getEffectiveTime());
				entryrelationshipAct.Participants = GetParticipant2List(_entryrelationshipAct.getParticipants());
				entryrelationshipAct.Performers = GetPerformer2List(_entryrelationshipAct.getPerformers());

				var _entryrelationshipActentryrelationships = _entryrelationshipAct.getEntryRelationships();
				var EntryrelationshipActentryrelationships = [];

				if (_entryrelationshipActentryrelationships != null) {
					var _entryrelationshipActentryrelationshipsSize = _entryrelationshipActentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipActentryrelationshipsSize; _count++) {
						var EntryrelationshipActentryrelationship = {};
						var _entryrelationshipActentryrelationship = _entryrelationshipActentryrelationships.get(_count);
						EntryrelationshipActentryrelationship = PopulateEntityRelationshipsLevel1(_entryrelationshipActentryrelationship);
						EntryrelationshipActentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipActentryrelationship.getTypeCode());
						EntryrelationshipActentryrelationships.push(EntryrelationshipActentryrelationship);
					}
				}
				entryrelationshipAct.EntryRelationships = EntryrelationshipActentryrelationships;
				entryrelationship.Act = entryrelationshipAct;
			}

			var _entryrelationshipsupply = _entryrelationship.getSupply();
			if (_entryrelationshipsupply != null) {
				var entryrelationshipsupply = {};
				entryrelationshipsupply.TemplateIds = GetIIList(_entryrelationshipsupply.getTemplateIds());
				entryrelationshipsupply.MoodCode=GetVocabInfo(_entryrelationshipsupply.getMoodCode());
				entryrelationshipsupply.Ids = GetIIList(_entryrelationshipsupply.getIds());
				entryrelationshipsupply.Code = GetCD(_entryrelationshipsupply.getCode());
				entryrelationshipsupply.Quantity = GetPQ(_entryrelationshipsupply.getQuantity());
				entryrelationshipsupply.StatusCode = GetCS(_entryrelationshipsupply.getStatusCode());
				entryrelationshipsupply.EffectiveTimes = GetSXCM_TSList(_entryrelationshipsupply.getEffectiveTimes());
				entryrelationshipsupply.Participants = GetParticipant2List(_entryrelationshipsupply.getParticipants());
				entryrelationshipsupply.Product = GetProduct(_entryrelationshipsupply.getProduct());

				var _entryrelationshipsupplyentryrelationships = _entryrelationshipsupply.getEntryRelationships();
				var Entryrelationshipsupplyentryrelationships = [];

				if (_entryrelationshipsupplyentryrelationships != null) {
					var _entryrelationshipsupplyentryrelationshipsSize = _entryrelationshipsupplyentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipsupplyentryrelationshipsSize; _count++) {
						var Entryrelationshipsupplyentryrelationship = {};
						var _entryrelationshipsupplyentryrelationship = _entryrelationshipsupplyentryrelationships.get(_count);
						Entryrelationshipsupplyentryrelationship = PopulateEntityRelationshipsLevel1(_entryrelationshipsupplyentryrelationship);
						Entryrelationshipsupplyentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipsupplyentryrelationship.getTypeCode());
						Entryrelationshipsupplyentryrelationships.push(Entryrelationshipsupplyentryrelationship);
					}
				}
				entryrelationshipsupply.EntryRelationships = Entryrelationshipsupplyentryrelationships;
				entryrelationship.supply = entryrelationshipsupply;
			}

			var _entryrelationshipProcedure = _entryrelationship.getProcedure();
			if (_entryrelationshipProcedure != null) {
				var entryrelationshipProcedure = {};
				entryrelationshipProcedure.TemplateIds = GetIIList(_entryrelationshipProcedure.getTemplateIds());
				entryrelationshipProcedure.Ids = GetIIList(_entryrelationshipProcedure.getIds());
				entryrelationshipProcedure.Code = GetCD(_entryrelationshipProcedure.getCode());
				entryrelationshipProcedure.StatusCode = GetCS(_entryrelationshipProcedure.getStatusCode());
				entryrelationshipProcedure.Text = GetED(_entryrelationshipProcedure.getText());
				entryrelationshipProcedure.EffectiveTime = GetIVL_TS(_entryrelationshipProcedure.getEffectiveTime());
				entryrelationshipProcedure.TargetSiteCodes = GetCDList(_entryrelationshipProcedure.getTargetSiteCodes());
				entryrelationshipProcedure.PriorityCode = GetCE(_entryrelationshipProcedure.getPriorityCode());
				entryrelationshipProcedure.MethodCodes = GetCEList(_entryrelationshipProcedure.getMethodCodes());
				entryrelationshipProcedure.Authors = GetAuthorList(_entryrelationshipProcedure.getAuthors());
				entryrelationshipProcedure.Participants = GetParticipant2List(_entryrelationshipProcedure.getParticipants());
				entryrelationshipProcedure.Performers = GetPerformer2List(_entryrelationshipProcedure.getPerformers());
				entryrelationshipProcedure.Specimens = GetSpecimenList(_entryrelationshipProcedure.getSpecimens());

				var _entryrelationshipProcedureentryrelationships = _entryrelationshipProcedure.getEntryRelationships();
				var EntryrelationshipProcedureentryrelationships = [];

				if (_entryrelationshipProcedureentryrelationships != null) {
					var _entryrelationshipProcedureentryrelationshipsSize = _entryrelationshipProcedureentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipProcedureentryrelationshipsSize; _count++) {
						var EntryrelationshipProcedureentryrelationship = {};
						var _entryrelationshipProcedureentryrelationship = _entryrelationshipProcedureentryrelationships.get(_count);
						EntryrelationshipProcedureentryrelationship = PopulateEntityRelationshipsLevel1(_entryrelationshipProcedureentryrelationship);
						EntryrelationshipProcedureentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipProcedureentryrelationship.getTypeCode());
						EntryrelationshipProcedureentryrelationships.push(EntryrelationshipProcedureentryrelationship);
					}
				}
				entryrelationshipProcedure.EntryRelationships = EntryrelationshipProcedureentryrelationships;
				entryrelationship.Procedure = entryrelationshipProcedure;
			}

			var _entryrelationshipsubstanceAdministration = _entryrelationship.getSubstanceAdministration();
			if (_entryrelationshipsubstanceAdministration != null) {
				var entryrelationshipsubstanceAdministration = {};
				entryrelationshipsubstanceAdministration.TemplateIds = GetIIList(_entryrelationshipsubstanceAdministration.getTemplateIds());
				entryrelationshipsubstanceAdministration.Ids = GetIIList(_entryrelationshipsubstanceAdministration.getIds());
				entryrelationshipsubstanceAdministration.Code = GetCD(_entryrelationshipsubstanceAdministration.getCode());
				entryrelationshipsubstanceAdministration.Text = GetED(_entryrelationshipsubstanceAdministration.getText());

				entryrelationshipsubstanceAdministration.MoodCode = GetVocabInfo(_entryrelationshipsubstanceAdministration.getMoodCode());
				entryrelationshipsubstanceAdministration.StatusCode = GetCS(_entryrelationshipsubstanceAdministration.getStatusCode());
				entryrelationshipsubstanceAdministration.EffectiveTimes = GetSXCM_TSList(_entryrelationshipsubstanceAdministration.getEffectiveTimes());
				entryrelationshipsubstanceAdministration.RepeatNumber = GetIVL_INT(_entryrelationshipsubstanceAdministration.getRepeatNumber());
				entryrelationshipsubstanceAdministration.RouteCode = GetCE(_entryrelationshipsubstanceAdministration.getRouteCode());
				entryrelationshipsubstanceAdministration.ApproachSiteCodes = GetCDList(_entryrelationshipsubstanceAdministration.getApproachSiteCodes());
				entryrelationshipsubstanceAdministration.DoseQuantity = GetIVL_PQ(_entryrelationshipsubstanceAdministration.getDoseQuantity());
				entryrelationshipsubstanceAdministration.RateQuantity = GetIVL_PQ(_entryrelationshipsubstanceAdministration.getRateQuantity());
				entryrelationshipsubstanceAdministration.MaxDoseQuantity = GetRTO_PQ_PQ(_entryrelationshipsubstanceAdministration.getMaxDoseQuantity());
				entryrelationshipsubstanceAdministration.Consumable = GetConsumable(_entryrelationshipsubstanceAdministration.getConsumable());
				entryrelationshipsubstanceAdministration.Performers = GetPerformer2List(_entryrelationshipsubstanceAdministration.getPerformers());
				entryrelationshipsubstanceAdministration.Preconditions = GetPreconditionList(_entryrelationshipsubstanceAdministration.getPreconditions());
				entryrelationshipsubstanceAdministration.Participants = GetParticipant2List(_entryrelationshipsubstanceAdministration.getParticipants());
				entryrelationshipsubstanceAdministration.Authors = GetAuthorList(_entryrelationshipsubstanceAdministration.getAuthors());

				var _entryrelationshipsubstanceAdministrationentryrelationships = _entryrelationshipsubstanceAdministration.getEntryRelationships();
				var EntryrelationshipsubstanceAdministrationentryrelationships = [];

				if (_entryrelationshipsubstanceAdministrationentryrelationships != null) {
					var _entryrelationshipsubstanceAdministrationentryrelationshipsSize = _entryrelationshipsubstanceAdministrationentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipsubstanceAdministrationentryrelationshipsSize; _count++) {
						var EntryrelationshipsubstanceAdministrationentryrelationship = {};
						var _entryrelationshipsubstanceAdministrationentryrelationship = _entryrelationshipsubstanceAdministrationentryrelationships.get(_count);
						EntryrelationshipsubstanceAdministrationentryrelationship = PopulateEntityRelationshipsLevel1(_entryrelationshipsubstanceAdministrationentryrelationship);
						EntryrelationshipsubstanceAdministrationentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipsubstanceAdministrationentryrelationship.getTypeCode());
						EntryrelationshipsubstanceAdministrationentryrelationships.push(EntryrelationshipsubstanceAdministrationentryrelationship);
					}
				}

				entryrelationshipsubstanceAdministration.EntryRelationships = EntryrelationshipsubstanceAdministrationentryrelationships;
				entryrelationship.substanceAdministration = entryrelationshipsubstanceAdministration;
			}

	return entryrelationship;			
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>aea97ea3-72c8-4b92-bab8-e24e8cafb934</id>
            <name>PopulateEntityRelationships_with_Textsection</name>
            <revision>15</revision>
            <lastModified>
              <time>1667471151106</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function PopulateEntityRelationshipswithText(_entryrelationship,_sectionText) {
	var entryrelationship = {};
	
	if(_entryrelationship != null){
		entryrelationship.SequenceNumber = GetINT(_entryrelationship.getSequenceNumber());	
		entryrelationship.TypeCode = GetVocabInfo(_entryrelationship.getTypeCode());
	}
	
	var _entryrelationshipObservation = _entryrelationship.getObservation();
			if (_entryrelationshipObservation != null) {
				var entryrelationshipObservation = {};
				entryrelationshipObservation.TemplateIds = GetIIList(_entryrelationshipObservation.getTemplateIds());
				entryrelationshipObservation.MoodCode = GetVocabInfo(_entryrelationshipObservation.getMoodCode());
				entryrelationshipObservation.Ids = GetIIList(_entryrelationshipObservation.getIds());
				entryrelationshipObservation.Code = GetCD(_entryrelationshipObservation.getCode());
				if(entryrelationshipObservation.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; entryrelationshipObservation.Code.OriginalText.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipObservation.Code.OriginalText.Reference.TEL_URL.Value;
					entryrelationshipObservation.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
				entryrelationshipObservation.Values = GetAnyList(_entryrelationshipObservation.getValues());
				if(entryrelationshipObservation.hasOwnProperty(&apos;Values&apos;))
				{
					//logger.info(&apos;PopulateEntityRelationshipswithText-&gt;&apos;+JSON.stringify(entryrelationshipObservation))
					if(entryrelationshipObservation.Values.length&gt;0)
					{
						if(entryrelationshipObservation.Values[0].CD.OriginalText.Reference.TEL_URL != null &amp;&amp; entryrelationshipObservation.Values[0].CD.OriginalText.Reference.TEL_URL != undefined)
						{
							var _referenceValue = entryrelationshipObservation.Values[0].CD.OriginalText.Reference.TEL_URL.Value;
						
							entryrelationshipObservation.Values[0].CD.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
						}
					}
				}
				

				
				entryrelationshipObservation.StatusCode = GetCS(_entryrelationshipObservation.getStatusCode());
				entryrelationshipObservation.EffectiveTime = GetIVL_TS(_entryrelationshipObservation.getEffectiveTime());
				entryrelationshipObservation.Authors = GetAuthorList(_entryrelationshipObservation.getAuthors());
				entryrelationshipObservation.Participants = GetParticipant2List(_entryrelationshipObservation.getParticipants());

				if(entryrelationshipObservation.Participants[0].ParticipantRole.PlayingEntity.Code.hasOwnProperty(&apos;OriginalText&apos;))
                     {
                        if(entryrelationshipObservation.Participants[0].ParticipantRole.PlayingEntity.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; entryrelationshipObservation.Participants[0].ParticipantRole.PlayingEntity.Code.OriginalText.Reference.TEL_URL !== undefined)
                        {
                           var _referenceValueForCode=entryrelationshipObservation.Participants[0].ParticipantRole.PlayingEntity.Code.OriginalText.Reference.TEL_URL.Value;
                           entryrelationshipObservation.Participants[0].ParticipantRole.PlayingEntity.Code.OriginalText.Reference.TEL_URL.Value=GetValuebyId(_sectionText,_referenceValueForCode);
                        }
                     }
				
				var _entryrelationshipObservationentryrelationships = _entryrelationshipObservation.getEntryRelationships();
				var EntryrelationshipObservationentryrelationships = [];

				if (_entryrelationshipObservationentryrelationships != null) {
					var _entryrelationshipObservationentryrelationshipsSize = _entryrelationshipObservationentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipObservationentryrelationshipsSize; _count++) {
						var EntryrelationshipObservationentryrelationship = {};
						var _entryrelationshipObservationentryrelationship = _entryrelationshipObservationentryrelationships.get(_count);
						EntryrelationshipObservationentryrelationship = PopulateEntityRelationshipsLevel1withText(_entryrelationshipObservationentryrelationship,_sectionText);
						EntryrelationshipObservationentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipObservationentryrelationship.getTypeCode());
						EntryrelationshipObservationentryrelationships.push(EntryrelationshipObservationentryrelationship);
					}
				}
				entryrelationshipObservation.EntryRelationships = EntryrelationshipObservationentryrelationships;
				entryrelationship.Observation = entryrelationshipObservation;
			}

			var _entryrelationshipEncounter = _entryrelationship.getEncounter();
			if (_entryrelationshipEncounter != null) {
				var entryrelationshipEncounter = {};
				entryrelationshipEncounter.TemplateIds = GetIIList(_entryrelationshipEncounter.getTemplateIds());
				entryrelationshipEncounter.MoodCode = GetVocabInfo(_entryrelationshipEncounter.getMoodCode());
				entryrelationshipEncounter.Ids = GetIIList(_entryrelationshipEncounter.getIds());
				entryrelationshipEncounter.Code = GetCD(_entryrelationshipEncounter.getCode());
				if(entryrelationshipEncounter.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; entryrelationshipEncounter.Code.OriginalText.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipEncounter.Code.OriginalText.Reference.TEL_URL.Value;
					entryrelationshipEncounter.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
			
				var _entryrelationshipEncounterentryrelationships = _entryrelationshipEncounter.getEntryRelationships();
				var EntryrelationshipEncounterentryrelationships = [];

				if (_entryrelationshipEncounterentryrelationships != null) {
					var _entryrelationshipEncounterentryrelationshipsSize = _entryrelationshipEncounterentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipEncounterentryrelationshipsSize; _count++) {
						var EntryrelationshipEncounterentryrelationship = {};
						var _entryrelationshipEncounterentryrelationship = _entryrelationshipEncounterentryrelationships.get(_count);
						EntryrelationshipEncounterentryrelationship = PopulateEntityRelationshipsLevel1withText(_entryrelationshipEncounterentryrelationship,_sectionText);
						EntryrelationshipEncounterentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipEncounterentryrelationship.getTypeCode());
						EntryrelationshipEncounterentryrelationships.push(EntryrelationshipEncounterentryrelationship);
					}
				}
				entryrelationshipEncounter.EntryRelationships = EntryrelationshipEncounterentryrelationships;
				entryrelationship.Encounter = entryrelationshipEncounter;
			}

			var _entryrelationshipAct = _entryrelationship.getAct();
			if (_entryrelationshipAct != null) {
				var entryrelationshipAct = {};
				entryrelationshipAct.TemplateIds = GetIIList(_entryrelationshipAct.getTemplateIds());
				entryrelationshipAct.MoodCode = GetVocabInfo(_entryrelationshipAct.getMoodCode());
				entryrelationshipAct.Ids = GetIIList(_entryrelationshipAct.getIds());
				entryrelationshipAct.Code = GetCD(_entryrelationshipAct.getCode());
				if(entryrelationshipAct.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; entryrelationshipAct.Code.OriginalText.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipAct.Code.OriginalText.Reference.TEL_URL.Value;
					entryrelationshipAct.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
				entryrelationshipAct.StatusCode = GetCS(_entryrelationshipAct.getStatusCode());
				entryrelationshipAct.Text = GetED(_entryrelationshipAct.getText());
				if(entryrelationshipAct.Text.Reference.TEL_URL != null &amp;&amp; entryrelationshipAct.Text.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipAct.Text.Reference.TEL_URL.Value;
					entryrelationshipAct.Text.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
				entryrelationshipAct.EffectiveTime = GetIVL_TS(_entryrelationshipAct.getEffectiveTime());
				entryrelationshipAct.Participants = GetParticipant2List(_entryrelationshipAct.getParticipants());

				
				entryrelationshipAct.Performers = GetPerformer2List(_entryrelationshipAct.getPerformers());

				var _entryrelationshipActentryrelationships = _entryrelationshipAct.getEntryRelationships();
				var EntryrelationshipActentryrelationships = [];

				if (_entryrelationshipActentryrelationships != null) {
					var _entryrelationshipActentryrelationshipsSize = _entryrelationshipActentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipActentryrelationshipsSize; _count++) {
						var EntryrelationshipActentryrelationship = {};
						var _entryrelationshipActentryrelationship = _entryrelationshipActentryrelationships.get(_count);
						EntryrelationshipActentryrelationship = PopulateEntityRelationshipsLevel1withText(_entryrelationshipActentryrelationship,_sectionText);
						EntryrelationshipActentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipActentryrelationship.getTypeCode());
						EntryrelationshipActentryrelationships.push(EntryrelationshipActentryrelationship);
					}
				}
				entryrelationshipAct.EntryRelationships = EntryrelationshipActentryrelationships;
				entryrelationship.Act = entryrelationshipAct;
			}

			var _entryrelationshipsupply = _entryrelationship.getSupply();
			if (_entryrelationshipsupply != null) {
				var entryrelationshipsupply = {};
				entryrelationshipsupply.TemplateIds = GetIIList(_entryrelationshipsupply.getTemplateIds());
				entryrelationshipsupply.MoodCode = GetVocabInfo(_entryrelationshipsupply.getMoodCode());
				entryrelationshipsupply.MoodCode=GetVocabInfo(_entryrelationshipsupply.getMoodCode());
				entryrelationshipsupply.Ids = GetIIList(_entryrelationshipsupply.getIds());
				entryrelationshipsupply.Code = GetCD(_entryrelationshipsupply.getCode());
				if(entryrelationshipsupply.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; entryrelationshipsupply.Code.OriginalText.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipsupply.Code.OriginalText.Reference.TEL_URL.Value;
					entryrelationshipsupply.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
			
				entryrelationshipsupply.Quantity = GetPQ(_entryrelationshipsupply.getQuantity());
				entryrelationshipsupply.StatusCode = GetCS(_entryrelationshipsupply.getStatusCode());
				entryrelationshipsupply.EffectiveTimes = GetSXCM_TSList(_entryrelationshipsupply.getEffectiveTimes());
				entryrelationshipsupply.Participants = GetParticipant2List(_entryrelationshipsupply.getParticipants());
				entryrelationshipsupply.Product = GetProduct(_entryrelationshipsupply.getProduct());

				var _entryrelationshipsupplyentryrelationships = _entryrelationshipsupply.getEntryRelationships();
				var Entryrelationshipsupplyentryrelationships = [];

				if (_entryrelationshipsupplyentryrelationships != null) {
					var _entryrelationshipsupplyentryrelationshipsSize = _entryrelationshipsupplyentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipsupplyentryrelationshipsSize; _count++) {
						var Entryrelationshipsupplyentryrelationship = {};
						var _entryrelationshipsupplyentryrelationship = _entryrelationshipsupplyentryrelationships.get(_count);
						Entryrelationshipsupplyentryrelationship = PopulateEntityRelationshipsLevel1withText(_entryrelationshipsupplyentryrelationship,_sectionText);
						Entryrelationshipsupplyentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipsupplyentryrelationship.getTypeCode());
						Entryrelationshipsupplyentryrelationships.push(Entryrelationshipsupplyentryrelationship);
					}
				}
				entryrelationshipsupply.EntryRelationships = Entryrelationshipsupplyentryrelationships;
				entryrelationship.supply = entryrelationshipsupply;
			}

			var _entryrelationshipProcedure = _entryrelationship.getProcedure();
			if (_entryrelationshipProcedure != null) {
				var entryrelationshipProcedure = {};
				entryrelationshipProcedure.TemplateIds = GetIIList(_entryrelationshipProcedure.getTemplateIds());
				entryrelationshipProcedure.MoodCode = GetVocabInfo(_entryrelationshipProcedure.getMoodCode());
				entryrelationshipProcedure.Ids = GetIIList(_entryrelationshipProcedure.getIds());
				entryrelationshipProcedure.Code = GetCD(_entryrelationshipProcedure.getCode());
				if(entryrelationshipProcedure.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; entryrelationshipProcedure.Code.OriginalText.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipProcedure.Code.OriginalText.Reference.TEL_URL.Value;
					entryrelationshipProcedure.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
				entryrelationshipProcedure.StatusCode = GetCS(_entryrelationshipProcedure.getStatusCode());
				entryrelationshipProcedure.Text = GetED(_entryrelationshipProcedure.getText());
				entryrelationshipProcedure.EffectiveTime = GetIVL_TS(_entryrelationshipProcedure.getEffectiveTime());
				entryrelationshipProcedure.TargetSiteCodes = GetCDList(_entryrelationshipProcedure.getTargetSiteCodes());
				entryrelationshipProcedure.PriorityCode = GetCE(_entryrelationshipProcedure.getPriorityCode());
				entryrelationshipProcedure.MethodCodes = GetCEList(_entryrelationshipProcedure.getMethodCodes());
				entryrelationshipProcedure.Authors = GetAuthorList(_entryrelationshipProcedure.getAuthors());
				entryrelationshipProcedure.Participants = GetParticipant2List(_entryrelationshipProcedure.getParticipants());
				entryrelationshipProcedure.Performers = GetPerformer2List(_entryrelationshipProcedure.getPerformers());
				entryrelationshipProcedure.Specimens = GetSpecimenList(_entryrelationshipProcedure.getSpecimens());

				var _entryrelationshipProcedureentryrelationships = _entryrelationshipProcedure.getEntryRelationships();
				var EntryrelationshipProcedureentryrelationships = [];

				if (_entryrelationshipProcedureentryrelationships != null) {
					var _entryrelationshipProcedureentryrelationshipsSize = _entryrelationshipProcedureentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipProcedureentryrelationshipsSize; _count++) {
						var EntryrelationshipProcedureentryrelationship = {};
						var _entryrelationshipProcedureentryrelationship = _entryrelationshipProcedureentryrelationships.get(_count);
						EntryrelationshipProcedureentryrelationship = PopulateEntityRelationshipsLevel1withText(_entryrelationshipProcedureentryrelationship,_sectionText);
						EntryrelationshipProcedureentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipProcedureentryrelationship.getTypeCode());
						EntryrelationshipProcedureentryrelationships.push(EntryrelationshipProcedureentryrelationship);
					}
				}
				entryrelationshipProcedure.EntryRelationships = EntryrelationshipProcedureentryrelationships;
				entryrelationship.Procedure = entryrelationshipProcedure;
			}

			var _entryrelationshipsubstanceAdministration = _entryrelationship.getSubstanceAdministration();
			if (_entryrelationshipsubstanceAdministration != null) {
				var entryrelationshipsubstanceAdministration = {};
				entryrelationshipsubstanceAdministration.TemplateIds = GetIIList(_entryrelationshipsubstanceAdministration.getTemplateIds());
				entryrelationshipsubstanceAdministration.MoodCode = GetVocabInfo(_entryrelationshipsubstanceAdministration.getMoodCode());
				entryrelationshipsubstanceAdministration.Ids = GetIIList(_entryrelationshipsubstanceAdministration.getIds());
				entryrelationshipsubstanceAdministration.Code = GetCD(_entryrelationshipsubstanceAdministration.getCode());
				if(entryrelationshipsubstanceAdministration.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; entryrelationshipsubstanceAdministration.Code.OriginalText.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipsubstanceAdministration.Code.OriginalText.Reference.TEL_URL.Value;
					entryrelationshipsubstanceAdministration.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
				entryrelationshipsubstanceAdministration.Text = GetED(_entryrelationshipsubstanceAdministration.getText());
				if(entryrelationshipsubstanceAdministration.Text.Reference.TEL_URL != null &amp;&amp; entryrelationshipsubstanceAdministration.Text.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipsubstanceAdministration.Text.Reference.TEL_URL.Value;
					entryrelationshipsubstanceAdministration.Text.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
				entryrelationshipsubstanceAdministration.MoodCode = GetVocabInfo(_entryrelationshipsubstanceAdministration.getMoodCode());
				entryrelationshipsubstanceAdministration.StatusCode = GetCS(_entryrelationshipsubstanceAdministration.getStatusCode());
				entryrelationshipsubstanceAdministration.EffectiveTimes = GetSXCM_TSList(_entryrelationshipsubstanceAdministration.getEffectiveTimes());
				entryrelationshipsubstanceAdministration.RepeatNumber = GetIVL_INT(_entryrelationshipsubstanceAdministration.getRepeatNumber());
				entryrelationshipsubstanceAdministration.RouteCode = GetCE(_entryrelationshipsubstanceAdministration.getRouteCode());
				entryrelationshipsubstanceAdministration.ApproachSiteCodes = GetCDList(_entryrelationshipsubstanceAdministration.getApproachSiteCodes());
				entryrelationshipsubstanceAdministration.DoseQuantity = GetIVL_PQ(_entryrelationshipsubstanceAdministration.getDoseQuantity());
				entryrelationshipsubstanceAdministration.RateQuantity = GetIVL_PQ(_entryrelationshipsubstanceAdministration.getRateQuantity());
				entryrelationshipsubstanceAdministration.MaxDoseQuantity = GetRTO_PQ_PQ(_entryrelationshipsubstanceAdministration.getMaxDoseQuantity());
				entryrelationshipsubstanceAdministration.Consumable = GetConsumable(_entryrelationshipsubstanceAdministration.getConsumable());
				if(entryrelationshipsubstanceAdministration.Consumable.ManufacturedProduct.Material.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; entryrelationshipsubstanceAdministration.Consumable.ManufacturedProduct.Material.Code.OriginalText.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipsubstanceAdministration.Consumable.ManufacturedProduct.Material.Code.OriginalText.Reference.TEL_URL.Value;
					entryrelationshipsubstanceAdministration.Consumable.ManufacturedProduct.Material.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
				entryrelationshipsubstanceAdministration.Performers = GetPerformer2List(_entryrelationshipsubstanceAdministration.getPerformers());
				entryrelationshipsubstanceAdministration.Preconditions = GetPreconditionList(_entryrelationshipsubstanceAdministration.getPreconditions());
				entryrelationshipsubstanceAdministration.Participants = GetParticipant2List(_entryrelationshipsubstanceAdministration.getParticipants());
				entryrelationshipsubstanceAdministration.Authors = GetAuthorList(_entryrelationshipsubstanceAdministration.getAuthors());

				var _entryrelationshipsubstanceAdministrationentryrelationships = _entryrelationshipsubstanceAdministration.getEntryRelationships();
				var EntryrelationshipsubstanceAdministrationentryrelationships = [];

				if (_entryrelationshipsubstanceAdministrationentryrelationships != null) {
					var _entryrelationshipsubstanceAdministrationentryrelationshipsSize = _entryrelationshipsubstanceAdministrationentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipsubstanceAdministrationentryrelationshipsSize; _count++) {
						var EntryrelationshipsubstanceAdministrationentryrelationship = {};
						var _entryrelationshipsubstanceAdministrationentryrelationship = _entryrelationshipsubstanceAdministrationentryrelationships.get(_count);
						EntryrelationshipsubstanceAdministrationentryrelationship = PopulateEntityRelationshipsLevel1withText(_entryrelationshipsubstanceAdministrationentryrelationship,_sectionText);
						EntryrelationshipsubstanceAdministrationentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipsubstanceAdministrationentryrelationship.getTypeCode());
						EntryrelationshipsubstanceAdministrationentryrelationships.push(EntryrelationshipsubstanceAdministrationentryrelationship);
					}
				}

				entryrelationshipsubstanceAdministration.EntryRelationships = EntryrelationshipsubstanceAdministrationentryrelationships;
				entryrelationship.substanceAdministration = entryrelationshipsubstanceAdministration;
			}

	return entryrelationship;			
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>2ee6bdcf-0075-4faa-bf16-95a49f7a41d9</id>
            <name>PopulateEntityRelationshipsLevel1</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999779</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function PopulateEntityRelationshipsLevel1(_entryrelationship) {
	var entryrelationship = {};
	
	if(_entryrelationship != null){
		entryrelationship.SequenceNumber = GetINT(_entryrelationship.getSequenceNumber());	
	}
	var _entryrelationshipObservation = _entryrelationship.getObservation();
			if (_entryrelationshipObservation != null) {
				var entryrelationshipObservation = {};
				entryrelationshipObservation.TemplateIds = GetIIList(_entryrelationshipObservation.getTemplateIds());
				entryrelationshipObservation.Ids = GetIIList(_entryrelationshipObservation.getIds());
				entryrelationshipObservation.Code = GetCE(_entryrelationshipObservation.getCode());
				entryrelationshipObservation.Values = GetAnyList(_entryrelationshipObservation.getValues());
				entryrelationshipObservation.StatusCode = GetCS(_entryrelationshipObservation.getStatusCode());
				entryrelationshipObservation.EffectiveTime = GetIVL_TS(_entryrelationshipObservation.getEffectiveTime());

				var _entryrelationshipObservationentryrelationships = _entryrelationshipObservation.getEntryRelationships();
				var EntryrelationshipObservationentryrelationships = [];

				if (_entryrelationshipObservationentryrelationships != null) {
					var _entryrelationshipObservationentryrelationshipsSize = _entryrelationshipObservationentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipObservationentryrelationshipsSize; _count++) {
						var EntryrelationshipObservationentryrelationship = {};
						var _entryrelationshipObservationentryrelationship = _entryrelationshipObservationentryrelationships.get(_count);
						EntryrelationshipObservationentryrelationship = PopulateEntityRelationshipsLevel2(_entryrelationshipObservationentryrelationship);
						EntryrelationshipObservationentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipObservationentryrelationship.getTypeCode());
						EntryrelationshipObservationentryrelationships.push(EntryrelationshipObservationentryrelationship);
					}
				}
				entryrelationshipObservation.EntryRelationships = EntryrelationshipObservationentryrelationships;
				entryrelationship.Observation = entryrelationshipObservation;
			}

			var _entryrelationshipEncounter = _entryrelationship.getEncounter();
			if (_entryrelationshipEncounter != null) {
				var entryrelationshipEncounter = {};
				entryrelationshipEncounter.TemplateIds = GetIIList(_entryrelationshipEncounter.getTemplateIds());
				entryrelationshipEncounter.Ids = GetIIList(_entryrelationshipEncounter.getIds());
				entryrelationshipEncounter.Code = GetCE(_entryrelationshipEncounter.getCode());

				var _entryrelationshipEncounterentryrelationships = _entryrelationshipEncounter.getEntryRelationships();
				var EntryrelationshipEncounterentryrelationships = [];

				if (_entryrelationshipEncounterentryrelationships != null) {
					var _entryrelationshipEncounterentryrelationshipsSize = _entryrelationshipEncounterentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipEncounterentryrelationshipsSize; _count++) {
						var EntryrelationshipEncounterentryrelationship = {};
						var _entryrelationshipEncounterentryrelationship = _entryrelationshipEncounterentryrelationships.get(_count);
						EntryrelationshipEncounterentryrelationship = PopulateEntityRelationshipsLevel2(_entryrelationshipEncounterentryrelationship);
						EntryrelationshipEncounterentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipEncounterentryrelationship.getTypeCode());
						EntryrelationshipEncounterentryrelationships.push(EntryrelationshipEncounterentryrelationship);
					}
				}
				entryrelationshipEncounter.EntryRelationships = EntryrelationshipEncounterentryrelationships;
				entryrelationship.Encounter = entryrelationshipEncounter;
			}

			var _entryrelationshipAct = _entryrelationship.getAct();
			if (_entryrelationshipAct != null) {
				var entryrelationshipAct = {};
				entryrelationshipAct.TemplateIds = GetIIList(_entryrelationshipAct.getTemplateIds());
				entryrelationshipAct.Ids = GetIIList(_entryrelationshipAct.getIds());
				entryrelationshipAct.Code = GetCE(_entryrelationshipAct.getCode());
				entryrelationshipAct.Text = GetED(_entryrelationshipAct.getText());
				entryrelationshipAct.EffectiveTime = GetIVL_TS(_entryrelationshipAct.getEffectiveTime());
				entryrelationshipAct.Participants = GetParticipant2List(_entryrelationshipAct.getParticipants());
				entryrelationshipAct.Performers = GetPerformer2List(_entryrelationshipAct.getPerformers());
				
				var _entryrelationshipActentryrelationships = _entryrelationshipAct.getEntryRelationships();
				var EntryrelationshipActentryrelationships = [];

				if (_entryrelationshipActentryrelationships != null) {
					var _entryrelationshipActentryrelationshipsSize = _entryrelationshipActentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipActentryrelationshipsSize; _count++) {
						var EntryrelationshipActentryrelationship = {};
						var _entryrelationshipActentryrelationship = _entryrelationshipActentryrelationships.get(_count);
						EntryrelationshipActentryrelationship = PopulateEntityRelationshipsLevel2(_entryrelationshipActentryrelationship);
						EntryrelationshipActentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipActentryrelationship.getTypeCode());
						EntryrelationshipActentryrelationships.push(EntryrelationshipActentryrelationship);
					}
				}
				entryrelationshipAct.EntryRelationships = EntryrelationshipActentryrelationships;
				entryrelationship.Act = entryrelationshipAct;
			}

			var _entryrelationshipsupply = _entryrelationship.getSupply();
			if (_entryrelationshipsupply != null) {
				var entryrelationshipsupply = {};
				entryrelationshipsupply.TemplateIds = GetIIList(_entryrelationshipsupply.getTemplateIds());
				entryrelationshipsupply.MoodCode=GetVocabInfo(_entryrelationshipsupply.getMoodCode());
				entryrelationshipsupply.Ids = GetIIList(_entryrelationshipsupply.getIds());
				entryrelationshipsupply.Code = GetCE(_entryrelationshipsupply.getCode());
				entryrelationshipsupply.Quantity = GetPQ(_entryrelationshipsupply.getQuantity());
				entryrelationshipsupply.StatusCode = GetCS(_entryrelationshipsupply.getStatusCode());
				entryrelationshipsupply.EffectiveTimes = GetSXCM_TSList(_entryrelationshipsupply.getEffectiveTimes());
				entryrelationshipsupply.Participants = GetParticipant2List(_entryrelationshipsupply.getParticipants());

				var _entryrelationshipsupplyentryrelationships = _entryrelationshipsupply.getEntryRelationships();
				var Entryrelationshipsupplyentryrelationships = [];

				if (_entryrelationshipsupplyentryrelationships != null) {
					var _entryrelationshipsupplyentryrelationshipsSize = _entryrelationshipsupplyentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipsupplyentryrelationshipsSize; _count++) {
						var Entryrelationshipsupplyentryrelationship = {};
						var _entryrelationshipsupplyentryrelationship = _entryrelationshipsupplyentryrelationships.get(_count);
						Entryrelationshipsupplyentryrelationship = PopulateEntityRelationshipsLevel2(_entryrelationshipsupplyentryrelationship);
						Entryrelationshipsupplyentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipsupplyentryrelationship.getTypeCode());
						Entryrelationshipsupplyentryrelationships.push(Entryrelationshipsupplyentryrelationship);
					}
				}
				entryrelationshipsupply.EntryRelationships = Entryrelationshipsupplyentryrelationships;
				entryrelationship.supply = entryrelationshipsupply;
			}

			var _entryrelationshipProcedure = _entryrelationship.getProcedure();
			if (_entryrelationshipProcedure != null) {
				var entryrelationshipProcedure = {};
				entryrelationshipProcedure.TemplateIds = GetIIList(_entryrelationshipProcedure.getTemplateIds());
				entryrelationshipProcedure.Ids = GetIIList(_entryrelationshipProcedure.getIds());
				entryrelationshipProcedure.Code = GetCE(_entryrelationshipProcedure.getCode());
				entryrelationshipProcedure.StatusCode = GetCS(_entryrelationshipProcedure.getStatusCode());
				entryrelationshipProcedure.Text = GetED(_entryrelationshipProcedure.getText());
				entryrelationshipProcedure.EffectiveTime = GetIVL_TS(_entryrelationshipProcedure.getEffectiveTime());
				entryrelationshipProcedure.TargetSiteCodes = GetCDList(_entryrelationshipProcedure.getTargetSiteCodes());
				entryrelationshipProcedure.PriorityCode = GetCE(_entryrelationshipProcedure.getPriorityCode());
				entryrelationshipProcedure.MethodCodes = GetCEList(_entryrelationshipProcedure.getMethodCodes());
				entryrelationshipProcedure.Authors = GetAuthorList(_entryrelationshipProcedure.getAuthors());
				entryrelationshipProcedure.Participants = GetParticipant2List(_entryrelationshipProcedure.getParticipants());
				entryrelationshipProcedure.Performers = GetPerformer2List(_entryrelationshipProcedure.getPerformers());
				entryrelationshipProcedure.Specimens = GetSpecimenList(_entryrelationshipProcedure.getSpecimens());

				var _entryrelationshipProcedureentryrelationships = _entryrelationshipProcedure.getEntryRelationships();
				var EntryrelationshipProcedureentryrelationships = [];

				if (_entryrelationshipProcedureentryrelationships != null) {
					var _entryrelationshipProcedureentryrelationshipsSize = _entryrelationshipProcedureentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipProcedureentryrelationshipsSize; _count++) {
						var EntryrelationshipProcedureentryrelationship = {};
						var _entryrelationshipProcedureentryrelationship = _entryrelationshipProcedureentryrelationships.get(_count);
						EntryrelationshipProcedureentryrelationship = PopulateEntityRelationshipsLevel2(_entryrelationshipProcedureentryrelationship);
						EntryrelationshipProcedureentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipProcedureentryrelationship.getTypeCode());
						EntryrelationshipProcedureentryrelationships.push(EntryrelationshipProcedureentryrelationship);
					}
				}
				entryrelationshipProcedure.EntryRelationships = EntryrelationshipProcedureentryrelationships;
				entryrelationship.Procedure = entryrelationshipProcedure;
			}

			var _entryrelationshipsubstanceAdministration = _entryrelationship.getSubstanceAdministration();
			if (_entryrelationshipsubstanceAdministration != null) {
				var entryrelationshipsubstanceAdministration = {};
				entryrelationshipsubstanceAdministration.TemplateIds = GetIIList(_entryrelationshipsubstanceAdministration.getTemplateIds());
				entryrelationshipsubstanceAdministration.Ids = GetIIList(_entryrelationshipsubstanceAdministration.getIds());
				entryrelationshipsubstanceAdministration.Code = GetCE(_entryrelationshipsubstanceAdministration.getCode());
				entryrelationshipsubstanceAdministration.Text = GetED(_entryrelationshipsubstanceAdministration.getText());

				entryrelationshipsubstanceAdministration.MoodCode = GetVocabInfo(_entryrelationshipsubstanceAdministration.getMoodCode());
				entryrelationshipsubstanceAdministration.StatusCode = GetCS(_entryrelationshipsubstanceAdministration.getStatusCode());
				entryrelationshipsubstanceAdministration.EffectiveTimes = GetSXCM_TSList(_entryrelationshipsubstanceAdministration.getEffectiveTimes());
				entryrelationshipsubstanceAdministration.RepeatNumber = GetIVL_INT(_entryrelationshipsubstanceAdministration.getRepeatNumber());
				entryrelationshipsubstanceAdministration.RouteCode = GetCE(_entryrelationshipsubstanceAdministration.getRouteCode());
				entryrelationshipsubstanceAdministration.ApproachSiteCodes = GetCDList(_entryrelationshipsubstanceAdministration.getApproachSiteCodes());
				entryrelationshipsubstanceAdministration.DoseQuantity = GetIVL_PQ(_entryrelationshipsubstanceAdministration.getDoseQuantity());
				entryrelationshipsubstanceAdministration.RateQuantity = GetIVL_PQ(_entryrelationshipsubstanceAdministration.getRateQuantity());
				entryrelationshipsubstanceAdministration.MaxDoseQuantity = GetRTO_PQ_PQ(_entryrelationshipsubstanceAdministration.getMaxDoseQuantity());
				entryrelationshipsubstanceAdministration.Consumable = GetConsumable(_entryrelationshipsubstanceAdministration.getConsumable());
				entryrelationshipsubstanceAdministration.Performers = GetPerformer2List(_entryrelationshipsubstanceAdministration.getPerformers());
				entryrelationshipsubstanceAdministration.Preconditions = GetPreconditionList(_entryrelationshipsubstanceAdministration.getPreconditions());
				entryrelationshipsubstanceAdministration.Participants = GetParticipant2List(_entryrelationshipsubstanceAdministration.getParticipants());
				entryrelationshipsubstanceAdministration.Authors = GetAuthorList(_entryrelationshipsubstanceAdministration.getAuthors());

				var _entryrelationshipsubstanceAdministrationentryrelationships = _entryrelationshipsubstanceAdministration.getEntryRelationships();
				var EntryrelationshipsubstanceAdministrationentryrelationships = [];

				if (_entryrelationshipsubstanceAdministrationentryrelationships != null) {
					var _entryrelationshipsubstanceAdministrationentryrelationshipsSize = _entryrelationshipsubstanceAdministrationentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipsubstanceAdministrationentryrelationshipsSize; _count++) {
						var EntryrelationshipsubstanceAdministrationentryrelationship = {};
						var _entryrelationshipsubstanceAdministrationentryrelationship = _entryrelationshipsubstanceAdministrationentryrelationships.get(_count);
						EntryrelationshipsubstanceAdministrationentryrelationship = PopulateEntityRelationshipsLevel2(_entryrelationshipsubstanceAdministrationentryrelationship);
						EntryrelationshipsubstanceAdministrationentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getTypeCode());
						EntryrelationshipsubstanceAdministrationentryrelationships.push(EntryrelationshipsubstanceAdministrationentryrelationship);
					}
				}

				entryrelationshipsubstanceAdministration.EntryRelationships = EntryrelationshipsubstanceAdministrationentryrelationships;
				entryrelationship.substanceAdministration = entryrelationshipsubstanceAdministration;
			}

	return entryrelationship;			
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>5d2eb809-343b-4052-99e5-8b10c3c4e654</id>
            <name>PopulateEntityRelationshipsLevel1withText</name>
            <revision>6</revision>
            <lastModified>
              <time>1667471217394</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function PopulateEntityRelationshipsLevel1withText(_entryrelationship,_sectionText) {
	var entryrelationship = {};
	
	if(_entryrelationship != null){
		entryrelationship.SequenceNumber = GetINT(_entryrelationship.getSequenceNumber());	
	}
	var _entryrelationshipObservation = _entryrelationship.getObservation();
			if (_entryrelationshipObservation != null) {
				var entryrelationshipObservation = {};
				entryrelationshipObservation.TemplateIds = GetIIList(_entryrelationshipObservation.getTemplateIds());
				entryrelationshipObservation.MoodCode = GetVocabInfo(_entryrelationshipObservation.getMoodCode());
				entryrelationshipObservation.Ids = GetIIList(_entryrelationshipObservation.getIds());
				entryrelationshipObservation.Text = GetED(_entryrelationshipObservation.getText());
				if(entryrelationshipObservation.Text.Reference.TEL_URL != null &amp;&amp; entryrelationshipObservation.Text.Reference.TEL_URL != undefined)
				{
					var _referenceValue = entryrelationshipObservation.Text.Reference.TEL_URL.Value;
					
					entryrelationshipObservation.Text.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
					
					
				}
				entryrelationshipObservation.Code = GetCD(_entryrelationshipObservation.getCode());
				if(entryrelationshipObservation.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; entryrelationshipObservation.Code.OriginalText.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipObservation.Code.OriginalText.Reference.TEL_URL.Value;
					entryrelationshipObservation.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
				entryrelationshipObservation.Values = GetAnyList(_entryrelationshipObservation.getValues());
				if(entryrelationshipObservation.Values[0].CD.OriginalText.Reference.TEL_URL != null &amp;&amp; entryrelationshipObservation.Values[0].CD.OriginalText.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipObservation.Values[0].CD.OriginalText.Reference.TEL_URL.Value;
					
					entryrelationshipObservation.Values[0].CD.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
				
				entryrelationshipObservation.StatusCode = GetCS(_entryrelationshipObservation.getStatusCode());
				entryrelationshipObservation.EffectiveTime = GetIVL_TS(_entryrelationshipObservation.getEffectiveTime());

				var _entryrelationshipObservationentryrelationships = _entryrelationshipObservation.getEntryRelationships();
				var EntryrelationshipObservationentryrelationships = [];

				if (_entryrelationshipObservationentryrelationships != null) {
					var _entryrelationshipObservationentryrelationshipsSize = _entryrelationshipObservationentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipObservationentryrelationshipsSize; _count++) {
						var EntryrelationshipObservationentryrelationship = {};
						var _entryrelationshipObservationentryrelationship = _entryrelationshipObservationentryrelationships.get(_count);
						EntryrelationshipObservationentryrelationship = PopulateEntityRelationshipsLevel2withText(_entryrelationshipObservationentryrelationship,_sectionText);
						EntryrelationshipObservationentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipObservationentryrelationship.getTypeCode());
						EntryrelationshipObservationentryrelationships.push(EntryrelationshipObservationentryrelationship);
					}
				}
				entryrelationshipObservation.EntryRelationships = EntryrelationshipObservationentryrelationships;
				entryrelationship.Observation = entryrelationshipObservation;
			}

			var _entryrelationshipEncounter = _entryrelationship.getEncounter();
			if (_entryrelationshipEncounter != null) {
				var entryrelationshipEncounter = {};
				entryrelationshipEncounter.TemplateIds = GetIIList(_entryrelationshipEncounter.getTemplateIds());
				entryrelationshipEncounter.MoodCode = GetVocabInfo(_entryrelationshipEncounter.getMoodCode());
				entryrelationshipEncounter.Ids = GetIIList(_entryrelationshipEncounter.getIds());
				entryrelationshipEncounter.Code = GetCD(_entryrelationshipEncounter.getCode());
				if(entryrelationshipEncounter.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; entryrelationshipEncounter.Code.OriginalText.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipEncounter.Code.OriginalText.Reference.TEL_URL.Value;
					entryrelationshipEncounter.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}

				var _entryrelationshipEncounterentryrelationships = _entryrelationshipEncounter.getEntryRelationships();
				var EntryrelationshipEncounterentryrelationships = [];

				if (_entryrelationshipEncounterentryrelationships != null) {
					var _entryrelationshipEncounterentryrelationshipsSize = _entryrelationshipEncounterentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipEncounterentryrelationshipsSize; _count++) {
						var EntryrelationshipEncounterentryrelationship = {};
						var _entryrelationshipEncounterentryrelationship = _entryrelationshipEncounterentryrelationships.get(_count);
						EntryrelationshipEncounterentryrelationship = PopulateEntityRelationshipsLevel2withText(_entryrelationshipEncounterentryrelationship,_sectionText);
						EntryrelationshipEncounterentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipEncounterentryrelationship.getTypeCode());
						EntryrelationshipEncounterentryrelationships.push(EntryrelationshipEncounterentryrelationship);
					}
				}
				entryrelationshipEncounter.EntryRelationships = EntryrelationshipEncounterentryrelationships;
				entryrelationship.Encounter = entryrelationshipEncounter;
			}

			var _entryrelationshipAct = _entryrelationship.getAct();
			if (_entryrelationshipAct != null) {
				var entryrelationshipAct = {};
				entryrelationshipAct.TemplateIds = GetIIList(_entryrelationshipAct.getTemplateIds());
				entryrelationshipAct.MoodCode = GetVocabInfo(_entryrelationshipAct.getMoodCode());
				entryrelationshipAct.Ids = GetIIList(_entryrelationshipAct.getIds());
				entryrelationshipAct.Code = GetCD(_entryrelationshipAct.getCode());
				if(entryrelationshipAct.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; entryrelationshipAct.Code.OriginalText.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipAct.Code.OriginalText.Reference.TEL_URL.Value;
					entryrelationshipAct.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
				entryrelationshipAct.Text = GetED(_entryrelationshipAct.getText());
				if(entryrelationshipAct.Text.Reference.TEL_URL != null &amp;&amp; entryrelationshipAct.Text.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipAct.Text.Reference.TEL_URL.Value;
					entryrelationshipAct.Text.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
				entryrelationshipAct.EffectiveTime = GetIVL_TS(_entryrelationshipAct.getEffectiveTime());
				entryrelationshipAct.Participants = GetParticipant2List(_entryrelationshipAct.getParticipants());
				entryrelationshipAct.Performers = GetPerformer2List(_entryrelationshipAct.getPerformers());
				
				var _entryrelationshipActentryrelationships = _entryrelationshipAct.getEntryRelationships();
				var EntryrelationshipActentryrelationships = [];

				if (_entryrelationshipActentryrelationships != null) {
					var _entryrelationshipActentryrelationshipsSize = _entryrelationshipActentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipActentryrelationshipsSize; _count++) {
						var EntryrelationshipActentryrelationship = {};
						var _entryrelationshipActentryrelationship = _entryrelationshipActentryrelationships.get(_count);
						EntryrelationshipActentryrelationship = PopulateEntityRelationshipsLevel2withText(_entryrelationshipActentryrelationship,_sectionText);
						EntryrelationshipActentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipActentryrelationship.getTypeCode());
						EntryrelationshipActentryrelationships.push(EntryrelationshipActentryrelationship);
					}
				}
				entryrelationshipAct.EntryRelationships = EntryrelationshipActentryrelationships;
				entryrelationship.Act = entryrelationshipAct;
			}

			var _entryrelationshipsupply = _entryrelationship.getSupply();
			if (_entryrelationshipsupply != null) {
				var entryrelationshipsupply = {};
				entryrelationshipsupply.TemplateIds = GetIIList(_entryrelationshipsupply.getTemplateIds());
				entryrelationshipsupply.MoodCode = GetVocabInfo(_entryrelationshipsupply.getMoodCode());
				entryrelationshipsupply.MoodCode=GetVocabInfo(_entryrelationshipsupply.getMoodCode());
				entryrelationshipsupply.Ids = GetIIList(_entryrelationshipsupply.getIds());
				entryrelationshipsupply.Code = GetCD(_entryrelationshipsupply.getCode());
				if(entryrelationshipsupply.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; entryrelationshipsupply.Code.OriginalText.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipsupply.Code.OriginalText.Reference.TEL_URL.Value;
					entryrelationshipsupply.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
				entryrelationshipsupply.Quantity = GetPQ(_entryrelationshipsupply.getQuantity());
				entryrelationshipsupply.StatusCode = GetCS(_entryrelationshipsupply.getStatusCode());
				entryrelationshipsupply.EffectiveTimes = GetSXCM_TSList(_entryrelationshipsupply.getEffectiveTimes());
				entryrelationshipsupply.Participants = GetParticipant2List(_entryrelationshipsupply.getParticipants());

				var _entryrelationshipsupplyentryrelationships = _entryrelationshipsupply.getEntryRelationships();
				var Entryrelationshipsupplyentryrelationships = [];

				if (_entryrelationshipsupplyentryrelationships != null) {
					var _entryrelationshipsupplyentryrelationshipsSize = _entryrelationshipsupplyentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipsupplyentryrelationshipsSize; _count++) {
						var Entryrelationshipsupplyentryrelationship = {};
						var _entryrelationshipsupplyentryrelationship = _entryrelationshipsupplyentryrelationships.get(_count);
						Entryrelationshipsupplyentryrelationship = PopulateEntityRelationshipsLevel2withText(_entryrelationshipsupplyentryrelationship,_sectionText);
						Entryrelationshipsupplyentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipsupplyentryrelationship.getTypeCode());
						Entryrelationshipsupplyentryrelationships.push(Entryrelationshipsupplyentryrelationship);
					}
				}
				entryrelationshipsupply.EntryRelationships = Entryrelationshipsupplyentryrelationships;
				entryrelationship.supply = entryrelationshipsupply;
			}

			var _entryrelationshipProcedure = _entryrelationship.getProcedure();
			if (_entryrelationshipProcedure != null) {
				var entryrelationshipProcedure = {};
				entryrelationshipProcedure.TemplateIds = GetIIList(_entryrelationshipProcedure.getTemplateIds());
				entryrelationshipProcedure.MoodCode = GetVocabInfo(_entryrelationshipProcedure.getMoodCode());
				entryrelationshipProcedure.Ids = GetIIList(_entryrelationshipProcedure.getIds());
				entryrelationshipProcedure.Code = GetCD(_entryrelationshipProcedure.getCode());
				if(entryrelationshipProcedure.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; entryrelationshipProcedure.Code.OriginalText.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipProcedure.Code.OriginalText.Reference.TEL_URL.Value;
					entryrelationshipProcedure.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
				entryrelationshipProcedure.StatusCode = GetCS(_entryrelationshipProcedure.getStatusCode());
				entryrelationshipProcedure.Text = GetED(_entryrelationshipProcedure.getText());
				entryrelationshipProcedure.EffectiveTime = GetIVL_TS(_entryrelationshipProcedure.getEffectiveTime());
				entryrelationshipProcedure.TargetSiteCodes = GetCDList(_entryrelationshipProcedure.getTargetSiteCodes());
				entryrelationshipProcedure.PriorityCode = GetCE(_entryrelationshipProcedure.getPriorityCode());
				entryrelationshipProcedure.MethodCodes = GetCEList(_entryrelationshipProcedure.getMethodCodes());
				entryrelationshipProcedure.Authors = GetAuthorList(_entryrelationshipProcedure.getAuthors());
				entryrelationshipProcedure.Participants = GetParticipant2List(_entryrelationshipProcedure.getParticipants());
				entryrelationshipProcedure.Performers = GetPerformer2List(_entryrelationshipProcedure.getPerformers());
				entryrelationshipProcedure.Specimens = GetSpecimenList(_entryrelationshipProcedure.getSpecimens());

				var _entryrelationshipProcedureentryrelationships = _entryrelationshipProcedure.getEntryRelationships();
				var EntryrelationshipProcedureentryrelationships = [];

				if (_entryrelationshipProcedureentryrelationships != null) {
					var _entryrelationshipProcedureentryrelationshipsSize = _entryrelationshipProcedureentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipProcedureentryrelationshipsSize; _count++) {
						var EntryrelationshipProcedureentryrelationship = {};
						var _entryrelationshipProcedureentryrelationship = _entryrelationshipProcedureentryrelationships.get(_count);
						EntryrelationshipProcedureentryrelationship = PopulateEntityRelationshipsLevel2withText(_entryrelationshipProcedureentryrelationship,_sectionText);
						EntryrelationshipProcedureentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipProcedureentryrelationship.getTypeCode());
						EntryrelationshipProcedureentryrelationships.push(EntryrelationshipProcedureentryrelationship);
					}
				}
				entryrelationshipProcedure.EntryRelationships = EntryrelationshipProcedureentryrelationships;
				entryrelationship.Procedure = entryrelationshipProcedure;
			}

			var _entryrelationshipsubstanceAdministration = _entryrelationship.getSubstanceAdministration();
			if (_entryrelationshipsubstanceAdministration != null) {
				var entryrelationshipsubstanceAdministration = {};
				entryrelationshipsubstanceAdministration.TemplateIds = GetIIList(_entryrelationshipsubstanceAdministration.getTemplateIds());
				entryrelationshipsubstanceAdministration.MoodCode = GetVocabInfo(_entryrelationshipsubstanceAdministration.getMoodCode());
				entryrelationshipsubstanceAdministration.Ids = GetIIList(_entryrelationshipsubstanceAdministration.getIds());
				entryrelationshipsubstanceAdministration.Code = GetCD(_entryrelationshipsubstanceAdministration.getCode());
				if(entryrelationshipsubstanceAdministration.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; entryrelationshipsubstanceAdministration.Code.OriginalText.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipsubstanceAdministration.Code.OriginalText.Reference.TEL_URL.Value;
					entryrelationshipsubstanceAdministration.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
				entryrelationshipsubstanceAdministration.Text = GetED(_entryrelationshipsubstanceAdministration.getText());
				if(entryrelationshipsubstanceAdministration.Text.Reference.TEL_URL != null &amp;&amp; entryrelationshipsubstanceAdministration.Text.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipsubstanceAdministration.Text.Reference.TEL_URL.Value;
					entryrelationshipsubstanceAdministration.Text.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
				entryrelationshipsubstanceAdministration.MoodCode = GetVocabInfo(_entryrelationshipsubstanceAdministration.getMoodCode());
				entryrelationshipsubstanceAdministration.StatusCode = GetCS(_entryrelationshipsubstanceAdministration.getStatusCode());
				entryrelationshipsubstanceAdministration.EffectiveTimes = GetSXCM_TSList(_entryrelationshipsubstanceAdministration.getEffectiveTimes());
				entryrelationshipsubstanceAdministration.RepeatNumber = GetIVL_INT(_entryrelationshipsubstanceAdministration.getRepeatNumber());
				entryrelationshipsubstanceAdministration.RouteCode = GetCE(_entryrelationshipsubstanceAdministration.getRouteCode());
				entryrelationshipsubstanceAdministration.ApproachSiteCodes = GetCDList(_entryrelationshipsubstanceAdministration.getApproachSiteCodes());
				entryrelationshipsubstanceAdministration.DoseQuantity = GetIVL_PQ(_entryrelationshipsubstanceAdministration.getDoseQuantity());
				entryrelationshipsubstanceAdministration.RateQuantity = GetIVL_PQ(_entryrelationshipsubstanceAdministration.getRateQuantity());
				entryrelationshipsubstanceAdministration.MaxDoseQuantity = GetRTO_PQ_PQ(_entryrelationshipsubstanceAdministration.getMaxDoseQuantity());
				entryrelationshipsubstanceAdministration.Consumable = GetConsumable(_entryrelationshipsubstanceAdministration.getConsumable());
				if(entryrelationshipsubstanceAdministration.Consumable.ManufacturedProduct.Material.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; entryrelationshipsubstanceAdministration.Consumable.ManufacturedProduct.Material.Code.OriginalText.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipsubstanceAdministration.Consumable.ManufacturedProduct.Material.Code.OriginalText.Reference.TEL_URL.Value;
					entryrelationshipsubstanceAdministration.Consumable.ManufacturedProduct.Material.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
				entryrelationshipsubstanceAdministration.Performers = GetPerformer2List(_entryrelationshipsubstanceAdministration.getPerformers());
				entryrelationshipsubstanceAdministration.Preconditions = GetPreconditionList(_entryrelationshipsubstanceAdministration.getPreconditions());
				entryrelationshipsubstanceAdministration.Participants = GetParticipant2List(_entryrelationshipsubstanceAdministration.getParticipants());
				entryrelationshipsubstanceAdministration.Authors = GetAuthorList(_entryrelationshipsubstanceAdministration.getAuthors());

				var _entryrelationshipsubstanceAdministrationentryrelationships = _entryrelationshipsubstanceAdministration.getEntryRelationships();
				var EntryrelationshipsubstanceAdministrationentryrelationships = [];

				if (_entryrelationshipsubstanceAdministrationentryrelationships != null) {
					var _entryrelationshipsubstanceAdministrationentryrelationshipsSize = _entryrelationshipsubstanceAdministrationentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipsubstanceAdministrationentryrelationshipsSize; _count++) {
						var EntryrelationshipsubstanceAdministrationentryrelationship = {};
						var _entryrelationshipsubstanceAdministrationentryrelationship = _entryrelationshipsubstanceAdministrationentryrelationships.get(_count);
						EntryrelationshipsubstanceAdministrationentryrelationship = PopulateEntityRelationshipsLevel2withText(_entryrelationshipsubstanceAdministrationentryrelationship,_sectionText);
						EntryrelationshipsubstanceAdministrationentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getTypeCode());
						EntryrelationshipsubstanceAdministrationentryrelationships.push(EntryrelationshipsubstanceAdministrationentryrelationship);
					}
				}

				entryrelationshipsubstanceAdministration.EntryRelationships = EntryrelationshipsubstanceAdministrationentryrelationships;
				entryrelationship.substanceAdministration = entryrelationshipsubstanceAdministration;
			}

	return entryrelationship;			
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>635ec2b4-5665-4b3a-826f-8aabbc5c30ee</id>
            <name>PopulateEntityRelationshipsLevel2</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996215</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function PopulateEntityRelationshipsLevel2(_entryrelationship) {
	var entryrelationship = {};
	
	if(_entryrelationship != null){
		entryrelationship.SequenceNumber = GetINT(_entryrelationship.getSequenceNumber());	
	}
	
	var _entryrelationshipObservation = _entryrelationship.getObservation();
			if (_entryrelationshipObservation != null) {
				var entryrelationshipObservation = {};
				entryrelationshipObservation.TemplateIds = GetIIList(_entryrelationshipObservation.getTemplateIds());
				entryrelationshipObservation.Ids = GetIIList(_entryrelationshipObservation.getIds());
				entryrelationshipObservation.Code = GetCE(_entryrelationshipObservation.getCode());
				entryrelationshipObservation.Values = GetAnyList(_entryrelationshipObservation.getValues());
				entryrelationshipObservation.StatusCode = GetCS(_entryrelationshipObservation.getStatusCode());
				entryrelationshipObservation.EffectiveTime = GetIVL_TS(_entryrelationshipObservation.getEffectiveTime());

				var _entryrelationshipObservationentryrelationships = _entryrelationshipObservation.getEntryRelationships();
				var EntryrelationshipObservationentryrelationships = [];

				if (_entryrelationshipObservationentryrelationships != null) {
					var _entryrelationshipObservationentryrelationshipsSize = _entryrelationshipObservationentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipObservationentryrelationshipsSize; _count++) {
						var EntryrelationshipObservationentryrelationship = {};
						var _entryrelationshipObservationentryrelationship = _entryrelationshipObservationentryrelationships.get(_count);
						var _entryrelationshipObservationentryrelationshipObservation = _entryrelationshipObservationentryrelationship.getObservation();
						if (_entryrelationshipObservationentryrelationshipObservation != null) {
							var EntryrelationshipObservationentryrelationshipObservation = {};
							EntryrelationshipObservationentryrelationshipObservation.Ids = GetIIList(_entryrelationshipObservationentryrelationshipObservation.getIds());
							EntryrelationshipObservationentryrelationshipObservation.Values = GetCEList(_entryrelationshipObservationentryrelationshipObservation.getValues());
							EntryrelationshipObservationentryrelationshipObservation.Authors = GetAuthorList(_entryrelationshipObservationentryrelationshipObservation.getAuthors());
							EntryrelationshipObservationentryrelationshipObservation.Code = GetCE(_entryrelationshipObservationentryrelationshipObservation.getCode());
							EntryrelationshipObservationentryrelationshipObservation.EffectiveTime = GetIVL_TS(_entryrelationshipObservationentryrelationshipObservation.getEffectiveTime());
							EntryrelationshipObservationentryrelationshipObservation.ClassCode = GetVocabInfo(_entryrelationshipObservationentryrelationshipObservation.getClassCode());
							EntryrelationshipObservationentryrelationshipObservation.MoodCode = GetVocabInfo(_entryrelationshipObservationentryrelationshipObservation.getMoodCode());

							EntryrelationshipObservationentryrelationship.Observation = EntryrelationshipObservationentryrelationshipObservation;
						}
						EntryrelationshipObservationentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipObservationentryrelationship.getTypeCode());
						EntryrelationshipObservationentryrelationships.push(EntryrelationshipObservationentryrelationship);
					}
				}
				entryrelationshipObservation.EntryRelationships = EntryrelationshipObservationentryrelationships;
				entryrelationship.Observation = entryrelationshipObservation;
			}

			var _entryrelationshipEncounter = _entryrelationship.getEncounter();
			if (_entryrelationshipEncounter != null) {
				var entryrelationshipEncounter = {};
				entryrelationshipEncounter.TemplateIds = GetIIList(_entryrelationshipEncounter.getTemplateIds());
				entryrelationshipEncounter.Ids = GetIIList(_entryrelationshipEncounter.getIds());
				entryrelationshipEncounter.Code = GetCE(_entryrelationshipEncounter.getCode());

				var _entryrelationshipEncounterentryrelationships = _entryrelationshipEncounter.getEntryRelationships();
				var EntryrelationshipEncounterentryrelationships = [];

				if (_entryrelationshipEncounterentryrelationships != null) {
					var _entryrelationshipEncounterentryrelationshipsSize = _entryrelationshipEncounterentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipEncounterentryrelationshipsSize; _count++) {
						var EntryrelationshipEncounterentryrelationship = {};
						var _entryrelationshipEncounterentryrelationship = _entryrelationshipEncounterentryrelationships.get(_count);
						var _entryrelationshipEncounterentryrelationshipEncounter = _entryrelationshipEncounterentryrelationship.getEncounter();
						if (_entryrelationshipEncounterentryrelationshipEncounter != null) {
							var EntryrelationshipEncounterentryrelationshipEncounter = {};
							EntryrelationshipEncounterentryrelationshipEncounter.Ids = GetIIList(_entryrelationshipEncounterentryrelationshipEncounter.getIds());
							EntryrelationshipEncounterentryrelationshipEncounter.Values = GetCEList(_entryrelationshipEncounterentryrelationshipEncounter.getValues());
							EntryrelationshipEncounterentryrelationshipEncounter.ClassCode = GetVocabInfo(_entryrelationshipEncounterentryrelationshipEncounter.getClassCode());
							EntryrelationshipEncounterentryrelationshipEncounter.MoodCode = GetVocabInfo(_entryrelationshipEncounterentryrelationshipEncounter.getMoodCode());

							EntryrelationshipEncounterentryrelationship.Encounter = EntryrelationshipEncounterentryrelationshipEncounter;
						}
						EntryrelationshipEncounterentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipEncounterentryrelationship.getTypeCode());
						EntryrelationshipEncounterentryrelationships.push(EntryrelationshipEncounterentryrelationship);
					}
				}
				entryrelationshipEncounter.EntryRelationships = EntryrelationshipEncounterentryrelationships;
				entryrelationship.Encounter = entryrelationshipEncounter;
			}

			var _entryrelationshipAct = _entryrelationship.getAct();
			if (_entryrelationshipAct != null) {
				var entryrelationshipAct = {};
				entryrelationshipAct.TemplateIds = GetIIList(_entryrelationshipAct.getTemplateIds());
				entryrelationshipAct.Ids = GetIIList(_entryrelationshipAct.getIds());
				entryrelationshipAct.Code = GetCE(_entryrelationshipAct.getCode());
				entryrelationshipAct.Text = GetED(_entryrelationshipAct.getText());
				entryrelationshipAct.EffectiveTime = GetIVL_TS(_entryrelationshipAct.getEffectiveTime());
				entryrelationshipAct.Participants = GetParticipant2List(_entryrelationshipAct.getParticipants());
				entryrelationshipAct.Performers = GetPerformer2List(_entryrelationshipAct.getPerformers());

				var _entryrelationshipActentryrelationships = _entryrelationshipAct.getEntryRelationships();
				var EntryrelationshipActentryrelationships = [];

				if (_entryrelationshipActentryrelationships != null) {
					var _entryrelationshipActentryrelationshipsSize = _entryrelationshipActentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipActentryrelationshipsSize; _count++) {
						var EntryrelationshipActentryrelationship = {};
						var _entryrelationshipActentryrelationship = _entryrelationshipActentryrelationships.get(_count);
						var _entryrelationshipActentryrelationshipAct = _entryrelationshipActentryrelationship.getAct();
						if (_entryrelationshipActentryrelationshipAct != null) {
							var EntryrelationshipActentryrelationshipAct = {};
							EntryrelationshipActentryrelationshipAct.Ids = GetIIList(_entryrelationshipActentryrelationshipAct.getIds());
							EntryrelationshipActentryrelationshipAct.Text = GetED(_entryrelationshipActentryrelationshipAct.getText());
							EntryrelationshipActentryrelationshipAct.EffectiveTime = GetIVL_TS(_entryrelationshipActentryrelationshipAct.getEffectiveTime());
							EntryrelationshipActentryrelationshipAct.Participants = GetParticipant2List(_entryrelationshipActentryrelationshipAct.getParticipants());
							EntryrelationshipActentryrelationshipAct.Performers = GetPerformer2List(_entryrelationshipActentryrelationshipAct.getPerformers());
				
							EntryrelationshipActentryrelationshipAct.ClassCode = GetVocabInfo(_entryrelationshipActentryrelationshipAct.getClassCode());
							EntryrelationshipActentryrelationshipAct.MoodCode = GetVocabInfo(_entryrelationshipActentryrelationshipAct.getMoodCode());

							EntryrelationshipActentryrelationship.Act = EntryrelationshipActentryrelationshipAct;
						}
						EntryrelationshipActentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipActentryrelationship.getTypeCode());
						EntryrelationshipActentryrelationships.push(EntryrelationshipActentryrelationship);
					}
				}
				entryrelationshipAct.EntryRelationships = EntryrelationshipActentryrelationships;
				entryrelationship.Act = entryrelationshipAct;
			}

			var _entryrelationshipsupply = _entryrelationship.getSupply();
			if (_entryrelationshipsupply != null) {
				var entryrelationshipsupply = {};
				entryrelationshipsupply.TemplateIds = GetIIList(_entryrelationshipsupply.getTemplateIds());
				entryrelationshipsupply.MoodCode=GetVocabInfo(_entryrelationshipsupply.getMoodCode());
				entryrelationshipsupply.Ids = GetIIList(_entryrelationshipsupply.getIds());
				entryrelationshipsupply.Code = GetCE(_entryrelationshipsupply.getCode());
				entryrelationshipsupply.Quantity = GetPQ(_entryrelationshipsupply.getQuantity());
				entryrelationshipsupply.StatusCode = GetCS(_entryrelationshipsupply.getStatusCode());
				entryrelationshipsupply.EffectiveTimes = GetSXCM_TSList(_entryrelationshipsupply.getEffectiveTimes());
				entryrelationshipsupply.Participants = GetParticipant2List(_entryrelationshipsupply.getParticipants());

				var _entryrelationshipsupplyentryrelationships = _entryrelationshipsupply.getEntryRelationships();
				var Entryrelationshipsupplyentryrelationships = [];

				if (_entryrelationshipsupplyentryrelationships != null) {
					var _entryrelationshipsupplyentryrelationshipsSize = _entryrelationshipsupplyentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipsupplyentryrelationshipsSize; _count++) {
						var Entryrelationshipsupplyentryrelationship = {};
						var _entryrelationshipsupplyentryrelationship = _entryrelationshipsupplyentryrelationships.get(_count);
						var _entryrelationshipsupplyentryrelationshipsupply = _entryrelationshipsupplyentryrelationship.getSupply();
						if (_entryrelationshipsupplyentryrelationshipsupply != null) {
							var Entryrelationshipsupplyentryrelationshipsupply = {};
							Entryrelationshipsupplyentryrelationshipsupply.Ids = GetIIList(_entryrelationshipsupplyentryrelationshipsupply.getIds());
							Entryrelationshipsupplyentryrelationshipsupply.Quantity = GetPQ(_entryrelationshipsupplyentryrelationshipsupply.getQuantity());
							Entryrelationshipsupplyentryrelationshipsupply.Authors = GetAuthorList(_entryrelationshipsupplyentryrelationshipsupply.getAuthors());
							Entryrelationshipsupplyentryrelationshipsupply.Code = GetCE(_entryrelationshipsupplyentryrelationshipsupply.getCode());
							Entryrelationshipsupplyentryrelationshipsupply.EffectiveTimes = GetSXCM_TSList(_entryrelationshipsupplyentryrelationshipsupply.getEffectiveTimes());
							Entryrelationshipsupplyentryrelationshipsupply.Participants = GetParticipant2List(_entryrelationshipsupplyentryrelationshipsupply.getParticipants());
							Entryrelationshipsupplyentryrelationshipsupply.ClassCode = GetVocabInfo(_entryrelationshipsupplyentryrelationshipsupply.getClassCode());
							Entryrelationshipsupplyentryrelationshipsupply.MoodCode = GetVocabInfo(_entryrelationshipsupplyentryrelationshipsupply.getMoodCode());

							Entryrelationshipsupplyentryrelationship.Supply = Entryrelationshipsupplyentryrelationshipsupply;
						}
						Entryrelationshipsupplyentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipsupplyentryrelationship.getTypeCode());
						Entryrelationshipsupplyentryrelationships.push(Entryrelationshipsupplyentryrelationship);
					}
				}
				entryrelationshipsupply.EntryRelationships = Entryrelationshipsupplyentryrelationships;
				entryrelationship.supply = entryrelationshipsupply;
			}

			var _entryrelationshipProcedure = _entryrelationship.getProcedure();
			if (_entryrelationshipProcedure != null) {
				var entryrelationshipProcedure = {};
				entryrelationshipProcedure.TemplateIds = GetIIList(_entryrelationshipProcedure.getTemplateIds());
				entryrelationshipProcedure.Ids = GetIIList(_entryrelationshipProcedure.getIds());
				entryrelationshipProcedure.Code = GetCE(_entryrelationshipProcedure.getCode());
				entryrelationshipProcedure.StatusCode = GetCS(_entryrelationshipProcedure.getStatusCode());
				entryrelationshipProcedure.Text = GetED(_entryrelationshipProcedure.getText());
				entryrelationshipProcedure.EffectiveTime = GetIVL_TS(_entryrelationshipProcedure.getEffectiveTime());
				entryrelationshipProcedure.TargetSiteCodes = GetCDList(_entryrelationshipProcedure.getTargetSiteCodes());
				entryrelationshipProcedure.PriorityCode = GetCE(_entryrelationshipProcedure.getPriorityCode());
				entryrelationshipProcedure.MethodCodes = GetCEList(_entryrelationshipProcedure.getMethodCodes());
				entryrelationshipProcedure.Authors = GetAuthorList(_entryrelationshipProcedure.getAuthors());
				entryrelationshipProcedure.Participants = GetParticipant2List(_entryrelationshipProcedure.getParticipants());
				entryrelationshipProcedure.Performers = GetPerformer2List(_entryrelationshipProcedure.getPerformers());
				entryrelationshipProcedure.Specimens = GetSpecimenList(_entryrelationshipProcedure.getSpecimens());

				var _entryrelationshipProcedureentryrelationships = _entryrelationshipProcedure.getEntryRelationships();
				var EntryrelationshipProcedureentryrelationships = [];

				if (_entryrelationshipProcedureentryrelationships != null) {
					var _entryrelationshipProcedureentryrelationshipsSize = _entryrelationshipProcedureentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipProcedureentryrelationshipsSize; _count++) {
						var EntryrelationshipProcedureentryrelationship = {};
						var _entryrelationshipProcedureentryrelationship = _entryrelationshipProcedureentryrelationships.get(_count);
						var _entryrelationshipProcedureentryrelationshipProcedure = _entryrelationshipProcedureentryrelationship.getProcedure();
						if (_entryrelationshipProcedureentryrelationshipProcedure != null) {
							var EntryrelationshipProcedureentryrelationshipProcedure = {};
							EntryrelationshipProcedureentryrelationshipProcedure.Ids = GetIIList(_entryrelationshipProcedureentryrelationshipProcedure.getIds());
							EntryrelationshipProcedureentryrelationshipProcedure.Text = GetED(_entryrelationshipProcedureentryrelationshipProcedure.getText());
							EntryrelationshipProcedureentryrelationshipProcedure.Code = GetCE(_entryrelationshipProcedureentryrelationshipProcedure.getCode());
							EntryrelationshipProcedureentryrelationshipProcedure.StatusCode = GetCS(_entryrelationshipProcedureentryrelationshipProcedure.getStatusCode());
							EntryrelationshipProcedureentryrelationshipProcedure.Text = GetED(_entryrelationshipProcedureentryrelationshipProcedure.getText());
							EntryrelationshipProcedureentryrelationshipProcedure.EffectiveTime = GetIVL_TS(_entryrelationshipProcedureentryrelationshipProcedure.getEffectiveTime());
							EntryrelationshipProcedureentryrelationshipProcedure.TargetSiteCodes = GetCDList(_entryrelationshipProcedureentryrelationshipProcedure.getTargetSiteCodes());
							EntryrelationshipProcedureentryrelationshipProcedure.PriorityCode = GetCE(_entryrelationshipProcedureentryrelationshipProcedure.getPriorityCode());
							EntryrelationshipProcedureentryrelationshipProcedure.MethodCodes = GetCEList(_entryrelationshipProcedureentryrelationshipProcedure.getMethodCodes());
							EntryrelationshipProcedureentryrelationshipProcedure.Authors = GetAuthorList(_entryrelationshipProcedureentryrelationshipProcedure.getAuthors());
							EntryrelationshipProcedureentryrelationshipProcedure.Participants = GetParticipant2List(_entryrelationshipProcedureentryrelationshipProcedure.getParticipants());
							EntryrelationshipProcedureentryrelationshipProcedure.Performers = GetPerformer2List(_entryrelationshipProcedureentryrelationshipProcedure.getPerformers());
							EntryrelationshipProcedureentryrelationshipProcedure.Specimens = GetSpecimenList(_entryrelationshipProcedureentryrelationshipProcedure.getSpecimens());
							EntryrelationshipProcedureentryrelationshipProcedure.ClassCode = GetVocabInfo(_entryrelationshipProcedureentryrelationshipProcedure.getClassCode());
							EntryrelationshipProcedureentryrelationshipProcedure.MoodCode = GetVocabInfo(_entryrelationshipProcedureentryrelationshipProcedure.getMoodCode());

							EntryrelationshipProcedureentryrelationship.Procedure = EntryrelationshipProcedureentryrelationshipProcedure;
						}
						EntryrelationshipProcedureentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipProcedureentryrelationship.getTypeCode());
						EntryrelationshipProcedureentryrelationships.push(EntryrelationshipProcedureentryrelationship);
					}
				}
				entryrelationshipProcedure.EntryRelationships = EntryrelationshipProcedureentryrelationships;
				entryrelationship.Procedure = entryrelationshipProcedure;
			}

			var _entryrelationshipsubstanceAdministration = _entryrelationship.getSubstanceAdministration();
			if (_entryrelationshipsubstanceAdministration != null) {
				var entryrelationshipsubstanceAdministration = {};
				entryrelationshipsubstanceAdministration.TemplateIds = GetIIList(_entryrelationshipsubstanceAdministration.getTemplateIds());
				entryrelationshipsubstanceAdministration.Ids = GetIIList(_entryrelationshipsubstanceAdministration.getIds());
				entryrelationshipsubstanceAdministration.Code = GetCE(_entryrelationshipsubstanceAdministration.getCode());
				entryrelationshipsubstanceAdministration.Text = GetED(_entryrelationshipsubstanceAdministration.getText());

				entryrelationshipsubstanceAdministration.MoodCode = GetVocabInfo(_entryrelationshipsubstanceAdministration.getMoodCode());
				entryrelationshipsubstanceAdministration.StatusCode = GetCS(_entryrelationshipsubstanceAdministration.getStatusCode());
				entryrelationshipsubstanceAdministration.EffectiveTimes = GetSXCM_TSList(_entryrelationshipsubstanceAdministration.getEffectiveTimes());
				entryrelationshipsubstanceAdministration.RepeatNumber = GetIVL_INT(_entryrelationshipsubstanceAdministration.getRepeatNumber());
				entryrelationshipsubstanceAdministration.RouteCode = GetCE(_entryrelationshipsubstanceAdministration.getRouteCode());
				entryrelationshipsubstanceAdministration.ApproachSiteCodes = GetCDList(_entryrelationshipsubstanceAdministration.getApproachSiteCodes());
				entryrelationshipsubstanceAdministration.DoseQuantity = GetIVL_PQ(_entryrelationshipsubstanceAdministration.getDoseQuantity());
				entryrelationshipsubstanceAdministration.RateQuantity = GetIVL_PQ(_entryrelationshipsubstanceAdministration.getRateQuantity());
				entryrelationshipsubstanceAdministration.MaxDoseQuantity = GetRTO_PQ_PQ(_entryrelationshipsubstanceAdministration.getMaxDoseQuantity());
				entryrelationshipsubstanceAdministration.Consumable = GetConsumable(_entryrelationshipsubstanceAdministration.getConsumable());
				entryrelationshipsubstanceAdministration.Performers = GetPerformer2List(_entryrelationshipsubstanceAdministration.getPerformers());
				entryrelationshipsubstanceAdministration.Preconditions = GetPreconditionList(_entryrelationshipsubstanceAdministration.getPreconditions());
				entryrelationshipsubstanceAdministration.Participants = GetParticipant2List(_entryrelationshipsubstanceAdministration.getParticipants());
				entryrelationshipsubstanceAdministration.Authors = GetAuthorList(_entryrelationshipsubstanceAdministration.getAuthors());

				var _entryrelationshipsubstanceAdministrationentryrelationships = _entryrelationshipsubstanceAdministration.getEntryRelationships();
				var EntryrelationshipsubstanceAdministrationentryrelationships = [];

				if (_entryrelationshipsubstanceAdministrationentryrelationships != null) {
					var _entryrelationshipsubstanceAdministrationentryrelationshipsSize = _entryrelationshipsubstanceAdministrationentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipsubstanceAdministrationentryrelationshipsSize; _count++) {
						var EntryrelationshipsubstanceAdministrationentryrelationship = {};
						var _entryrelationshipsubstanceAdministrationentryrelationship = _entryrelationshipsubstanceAdministrationentryrelationships.get(_count);
						var _entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration = _entryrelationshipsubstanceAdministrationentryrelationship.getsubstanceAdministration();
						if (_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration != null) {
							var EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration = {};
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Ids = GetIIList(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getIds());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Code = GetCE(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getCode());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Text = GetED(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getText());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.MoodCode = GetVocabInfo(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getMoodCode());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.StatusCode = GetCS(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getStatusCode());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.EffectiveTimes = GetSXCM_TSList(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getEffectiveTimes());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.RepeatNumber = GetIVL_INT(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getRepeatNumber());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.RouteCode = GetCE(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getRouteCode());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.ApproachSiteCodes = GetCDList(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getApproachSiteCodes());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.DoseQuantity = GetIVL_PQ(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getDoseQuantity());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.RateQuantity = GetIVL_PQ(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getRateQuantity());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.MaxDoseQuantity = GetRTO_PQ_PQ(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getMaxDoseQuantity());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Consumable = GetConsumable(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getConsumable());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Performers = GetPerformer2List(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getPerformers());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Preconditions = GetPreconditionsList(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getPreconditions());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Participants = GetParticipant2List(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getParticipants());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Authors = GetAuthorList(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getAuthors());

							EntryrelationshipsubstanceAdministrationentryrelationship.substanceAdministration = EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration;
						}
						EntryrelationshipsubstanceAdministrationentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getTypeCode());
						EntryrelationshipsubstanceAdministrationentryrelationships.push(EntryrelationshipsubstanceAdministrationentryrelationship);
					}
				}

				entryrelationshipsubstanceAdministration.EntryRelationships = EntryrelationshipsubstanceAdministrationentryrelationships;
				entryrelationship.substanceAdministration = entryrelationshipsubstanceAdministration;
			}

	return entryrelationship;			
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>e27faf60-41d6-4c49-818c-09c851aab315</id>
            <name>PopulateEntityRelationshipsLevel2withText</name>
            <revision>5</revision>
            <lastModified>
              <time>1667471286177</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
function PopulateEntityRelationshipsLevel2withText(_entryrelationship,_sectionText) {
	var entryrelationship = {};
	
	if(_entryrelationship != null){
		entryrelationship.SequenceNumber = GetINT(_entryrelationship.getSequenceNumber());	
	}
	
	var _entryrelationshipObservation = _entryrelationship.getObservation();
			if (_entryrelationshipObservation != null) {
				var entryrelationshipObservation = {};
				entryrelationshipObservation.TemplateIds = GetIIList(_entryrelationshipObservation.getTemplateIds());
				entryrelationshipObservation.MoodCode = GetVocabInfo(_entryrelationshipObservation.getMoodCode());
				entryrelationshipObservation.Ids = GetIIList(_entryrelationshipObservation.getIds());
				entryrelationshipObservation.Text = GetED(_entryrelationshipObservation.getText());
				if(entryrelationshipObservation.Text.Reference.TEL_URL != null &amp;&amp; entryrelationshipObservation.Text.Reference.TEL_URL != undefined)
				{
					var _referenceValue = entryrelationshipObservation.Text.Reference.TEL_URL.Value;
					entryrelationshipObservation.Text.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
					
					if(entryrelationshipObservation.Text.Text==&apos;&apos;)
					{
						logger.info(entryrelationshipObservation.Text.Text)
						entryrelationshipObservation.Text.Text=entryrelationshipObservation.Text.Reference.TEL_URL.Value;
					}
				}
				entryrelationshipObservation.Code = GetCD(_entryrelationshipObservation.getCode());
				if(entryrelationshipObservation.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; entryrelationshipObservation.Code.OriginalText.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipObservation.Code.OriginalText.Reference.TEL_URL.Value;
					entryrelationshipObservation.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
				entryrelationshipObservation.Values = GetAnyList(_entryrelationshipObservation.getValues());
				entryrelationshipObservation.StatusCode = GetCS(_entryrelationshipObservation.getStatusCode());
				entryrelationshipObservation.EffectiveTime = GetIVL_TS(_entryrelationshipObservation.getEffectiveTime());

				var _entryrelationshipObservationentryrelationships = _entryrelationshipObservation.getEntryRelationships();
				var EntryrelationshipObservationentryrelationships = [];

				if (_entryrelationshipObservationentryrelationships != null) {
					var _entryrelationshipObservationentryrelationshipsSize = _entryrelationshipObservationentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipObservationentryrelationshipsSize; _count++) {
						var EntryrelationshipObservationentryrelationship = {};
						var _entryrelationshipObservationentryrelationship = _entryrelationshipObservationentryrelationships.get(_count);
						var _entryrelationshipObservationentryrelationshipObservation = _entryrelationshipObservationentryrelationship.getObservation();
						if (_entryrelationshipObservationentryrelationshipObservation != null) {
							var EntryrelationshipObservationentryrelationshipObservation = {};
							EntryrelationshipObservationentryrelationshipObservation.Ids = GetIIList(_entryrelationshipObservationentryrelationshipObservation.getIds());
							EntryrelationshipObservationentryrelationshipObservation.Values = GetCEList(_entryrelationshipObservationentryrelationshipObservation.getValues());
							EntryrelationshipObservationentryrelationshipObservation.Authors = GetAuthorList(_entryrelationshipObservationentryrelationshipObservation.getAuthors());
							EntryrelationshipObservationentryrelationshipObservation.Code = GetCD(_entryrelationshipObservationentryrelationshipObservation.getCode());

							if(EntryrelationshipObservationentryrelationshipObservation.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; EntryrelationshipObservationentryrelationshipObservation.Code.OriginalText.Reference.TEL_URL != undefined){
								var _referenceValue = EntryrelationshipObservationentryrelationshipObservation.Code.OriginalText.Reference.TEL_URL.Value;
								EntryrelationshipObservationentryrelationshipObservation.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
							}
							EntryrelationshipObservationentryrelationshipObservation.EffectiveTime = GetIVL_TS(_entryrelationshipObservationentryrelationshipObservation.getEffectiveTime());
							EntryrelationshipObservationentryrelationshipObservation.ClassCode = GetVocabInfo(_entryrelationshipObservationentryrelationshipObservation.getClassCode());
							EntryrelationshipObservationentryrelationshipObservation.MoodCode = GetVocabInfo(_entryrelationshipObservationentryrelationshipObservation.getMoodCode());

							EntryrelationshipObservationentryrelationship.Observation = EntryrelationshipObservationentryrelationshipObservation;
						}
						EntryrelationshipObservationentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipObservationentryrelationship.getTypeCode());
						EntryrelationshipObservationentryrelationships.push(EntryrelationshipObservationentryrelationship);
					}
				}
				entryrelationshipObservation.EntryRelationships = EntryrelationshipObservationentryrelationships;
				entryrelationship.Observation = entryrelationshipObservation;
			}

			var _entryrelationshipEncounter = _entryrelationship.getEncounter();
			if (_entryrelationshipEncounter != null) {
				var entryrelationshipEncounter = {};
				entryrelationshipEncounter.TemplateIds = GetIIList(_entryrelationshipEncounter.getTemplateIds());
				entryrelationshipEncounter.MoodCode = GetVocabInfo(_entryrelationshipEncounter.getMoodCode());
				entryrelationshipEncounter.Ids = GetIIList(_entryrelationshipEncounter.getIds());
				entryrelationshipEncounter.Code = GetCD(_entryrelationshipEncounter.getCode());
				if(entryrelationshipEncounter.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; entryrelationshipEncounter.Code.OriginalText.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipEncounter.Code.OriginalText.Reference.TEL_URL.Value;
					entryrelationshipEncounter.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
				var _entryrelationshipEncounterentryrelationships = _entryrelationshipEncounter.getEntryRelationships();
				var EntryrelationshipEncounterentryrelationships = [];

				if (_entryrelationshipEncounterentryrelationships != null) {
					var _entryrelationshipEncounterentryrelationshipsSize = _entryrelationshipEncounterentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipEncounterentryrelationshipsSize; _count++) {
						var EntryrelationshipEncounterentryrelationship = {};
						var _entryrelationshipEncounterentryrelationship = _entryrelationshipEncounterentryrelationships.get(_count);
						var _entryrelationshipEncounterentryrelationshipEncounter = _entryrelationshipEncounterentryrelationship.getEncounter();
						if (_entryrelationshipEncounterentryrelationshipEncounter != null) {
							var EntryrelationshipEncounterentryrelationshipEncounter = {};
							EntryrelationshipEncounterentryrelationshipEncounter.Ids = GetIIList(_entryrelationshipEncounterentryrelationshipEncounter.getIds());
							EntryrelationshipEncounterentryrelationshipEncounter.Values = GetCEList(_entryrelationshipEncounterentryrelationshipEncounter.getValues());
							EntryrelationshipEncounterentryrelationshipEncounter.ClassCode = GetVocabInfo(_entryrelationshipEncounterentryrelationshipEncounter.getClassCode());
							EntryrelationshipEncounterentryrelationshipEncounter.MoodCode = GetVocabInfo(_entryrelationshipEncounterentryrelationshipEncounter.getMoodCode());

							EntryrelationshipEncounterentryrelationship.Encounter = EntryrelationshipEncounterentryrelationshipEncounter;
						}
						EntryrelationshipEncounterentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipEncounterentryrelationship.getTypeCode());
						EntryrelationshipEncounterentryrelationships.push(EntryrelationshipEncounterentryrelationship);
					}
				}
				entryrelationshipEncounter.EntryRelationships = EntryrelationshipEncounterentryrelationships;
				entryrelationship.Encounter = entryrelationshipEncounter;
			}

			var _entryrelationshipAct = _entryrelationship.getAct();
			if (_entryrelationshipAct != null) {
				var entryrelationshipAct = {};
				entryrelationshipAct.TemplateIds = GetIIList(_entryrelationshipAct.getTemplateIds());
				entryrelationshipAct.MoodCode = GetVocabInfo(_entryrelationshipAct.getMoodCode());
				entryrelationshipAct.Ids = GetIIList(_entryrelationshipAct.getIds());
				entryrelationshipAct.Code = GetCD(_entryrelationshipAct.getCode());
				if(entryrelationshipAct.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; entryrelationshipAct.Code.OriginalText.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipAct.Code.OriginalText.Reference.TEL_URL.Value;
					entryrelationshipAct.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
				entryrelationshipAct.Text = GetED(_entryrelationshipAct.getText());
				if(entryrelationshipAct.Text.Reference.TEL_URL != null &amp;&amp; entryrelationshipAct.Text.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipAct.Text.Reference.TEL_URL.Value;
					entryrelationshipAct.Text.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
				entryrelationshipAct.EffectiveTime = GetIVL_TS(_entryrelationshipAct.getEffectiveTime());
				entryrelationshipAct.Participants = GetParticipant2List(_entryrelationshipAct.getParticipants());
				entryrelationshipAct.Performers = GetPerformer2List(_entryrelationshipAct.getPerformers());

				var _entryrelationshipActentryrelationships = _entryrelationshipAct.getEntryRelationships();
				var EntryrelationshipActentryrelationships = [];

				if (_entryrelationshipActentryrelationships != null) {
					var _entryrelationshipActentryrelationshipsSize = _entryrelationshipActentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipActentryrelationshipsSize; _count++) {
						var EntryrelationshipActentryrelationship = {};
						var _entryrelationshipActentryrelationship = _entryrelationshipActentryrelationships.get(_count);
						var _entryrelationshipActentryrelationshipAct = _entryrelationshipActentryrelationship.getAct();
						if (_entryrelationshipActentryrelationshipAct != null) {
							var EntryrelationshipActentryrelationshipAct = {};
							EntryrelationshipActentryrelationshipAct.Ids = GetIIList(_entryrelationshipActentryrelationshipAct.getIds());
							EntryrelationshipActentryrelationshipAct.Text = GetED(_entryrelationshipActentryrelationshipAct.getText());
							if(EntryrelationshipActentryrelationshipAct.Text.Reference.TEL_URL != null &amp;&amp; EntryrelationshipActentryrelationshipAct.Text.Reference.TEL_URL != undefined){
								var _referenceValue = EntryrelationshipActentryrelationshipAct.Text.Reference.TEL_URL.Value;
								EntryrelationshipActentryrelationshipAct.Text.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
							}			
							
							EntryrelationshipActentryrelationshipAct.EffectiveTime = GetIVL_TS(_entryrelationshipActentryrelationshipAct.getEffectiveTime());
							EntryrelationshipActentryrelationshipAct.Participants = GetParticipant2List(_entryrelationshipActentryrelationshipAct.getParticipants());
							EntryrelationshipActentryrelationshipAct.Performers = GetPerformer2List(_entryrelationshipActentryrelationshipAct.getPerformers());
				
							EntryrelationshipActentryrelationshipAct.ClassCode = GetVocabInfo(_entryrelationshipActentryrelationshipAct.getClassCode());
							EntryrelationshipActentryrelationshipAct.MoodCode = GetVocabInfo(_entryrelationshipActentryrelationshipAct.getMoodCode());

							EntryrelationshipActentryrelationship.Act = EntryrelationshipActentryrelationshipAct;
						}
						EntryrelationshipActentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipActentryrelationship.getTypeCode());
						EntryrelationshipActentryrelationships.push(EntryrelationshipActentryrelationship);
					}
				}
				entryrelationshipAct.EntryRelationships = EntryrelationshipActentryrelationships;
				entryrelationship.Act = entryrelationshipAct;
			}

			var _entryrelationshipsupply = _entryrelationship.getSupply();
			if (_entryrelationshipsupply != null) {
				var entryrelationshipsupply = {};
				entryrelationshipsupply.TemplateIds = GetIIList(_entryrelationshipsupply.getTemplateIds());
				entryrelationshipsupply.MoodCode = GetVocabInfo(_entryrelationshipsupply.getMoodCode());
				entryrelationshipsupply.MoodCode=GetVocabInfo(_entryrelationshipsupply.getMoodCode());
				entryrelationshipsupply.Ids = GetIIList(_entryrelationshipsupply.getIds());
				entryrelationshipsupply.Code = GetCD(_entryrelationshipsupply.getCode());
				if(entryrelationshipsupply.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; entryrelationshipsupply.Code.OriginalText.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipsupply.Code.OriginalText.Reference.TEL_URL.Value;
					entryrelationshipsupply.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
				entryrelationshipsupply.Quantity = GetPQ(_entryrelationshipsupply.getQuantity());
				entryrelationshipsupply.StatusCode = GetCS(_entryrelationshipsupply.getStatusCode());
				entryrelationshipsupply.EffectiveTimes = GetSXCM_TSList(_entryrelationshipsupply.getEffectiveTimes());
				entryrelationshipsupply.Participants = GetParticipant2List(_entryrelationshipsupply.getParticipants());

				var _entryrelationshipsupplyentryrelationships = _entryrelationshipsupply.getEntryRelationships();
				var Entryrelationshipsupplyentryrelationships = [];

				if (_entryrelationshipsupplyentryrelationships != null) {
					var _entryrelationshipsupplyentryrelationshipsSize = _entryrelationshipsupplyentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipsupplyentryrelationshipsSize; _count++) {
						var Entryrelationshipsupplyentryrelationship = {};
						var _entryrelationshipsupplyentryrelationship = _entryrelationshipsupplyentryrelationships.get(_count);
						var _entryrelationshipsupplyentryrelationshipsupply = _entryrelationshipsupplyentryrelationship.getSupply();
						if (_entryrelationshipsupplyentryrelationshipsupply != null) {
							var Entryrelationshipsupplyentryrelationshipsupply = {};
							Entryrelationshipsupplyentryrelationshipsupply.Ids = GetIIList(_entryrelationshipsupplyentryrelationshipsupply.getIds());
							Entryrelationshipsupplyentryrelationshipsupply.Quantity = GetPQ(_entryrelationshipsupplyentryrelationshipsupply.getQuantity());
							Entryrelationshipsupplyentryrelationshipsupply.Authors = GetAuthorList(_entryrelationshipsupplyentryrelationshipsupply.getAuthors());
							Entryrelationshipsupplyentryrelationshipsupply.Code = GetCD(_entryrelationshipsupplyentryrelationshipsupply.getCode());
							if(Entryrelationshipsupplyentryrelationshipsupply.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; Entryrelationshipsupplyentryrelationshipsupply.Code.OriginalText.Reference.TEL_URL != undefined){
								var _referenceValue = Entryrelationshipsupplyentryrelationshipsupply.Code.OriginalText.Reference.TEL_URL.Value;
								Entryrelationshipsupplyentryrelationshipsupply.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
							}
							
							Entryrelationshipsupplyentryrelationshipsupply.EffectiveTimes = GetSXCM_TSList(_entryrelationshipsupplyentryrelationshipsupply.getEffectiveTimes());
							Entryrelationshipsupplyentryrelationshipsupply.Participants = GetParticipant2List(_entryrelationshipsupplyentryrelationshipsupply.getParticipants());
							Entryrelationshipsupplyentryrelationshipsupply.ClassCode = GetVocabInfo(_entryrelationshipsupplyentryrelationshipsupply.getClassCode());
							Entryrelationshipsupplyentryrelationshipsupply.MoodCode = GetVocabInfo(_entryrelationshipsupplyentryrelationshipsupply.getMoodCode());

							Entryrelationshipsupplyentryrelationship.Supply = Entryrelationshipsupplyentryrelationshipsupply;
						}
						Entryrelationshipsupplyentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipsupplyentryrelationship.getTypeCode());
						Entryrelationshipsupplyentryrelationships.push(Entryrelationshipsupplyentryrelationship);
					}
				}
				entryrelationshipsupply.EntryRelationships = Entryrelationshipsupplyentryrelationships;
				entryrelationship.supply = entryrelationshipsupply;
			}

			var _entryrelationshipProcedure = _entryrelationship.getProcedure();
			if (_entryrelationshipProcedure != null) {
				var entryrelationshipProcedure = {};
				entryrelationshipProcedure.TemplateIds = GetIIList(_entryrelationshipProcedure.getTemplateIds());
				entryrelationshipProcedure.MoodCode = GetVocabInfo(_entryrelationshipProcedure.getMoodCode());
				entryrelationshipProcedure.Ids = GetIIList(_entryrelationshipProcedure.getIds());
				entryrelationshipProcedure.Code = GetCD(_entryrelationshipProcedure.getCode());
				if(entryrelationshipProcedure.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; entryrelationshipProcedure.Code.OriginalText.Reference.TEL_URL != undefined){
						var _referenceValue = entryrelationshipProcedure.Code.OriginalText.Reference.TEL_URL.Value;
						entryrelationshipProcedure.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
					}
				entryrelationshipProcedure.StatusCode = GetCS(_entryrelationshipProcedure.getStatusCode());
				entryrelationshipProcedure.Text = GetED(_entryrelationshipProcedure.getText());
				if(entryrelationshipProcedure.Text.Reference.TEL_URL != null &amp;&amp; entryrelationshipProcedure.Text.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipProcedure.Text.Reference.TEL_URL.Value;
					entryrelationshipProcedure.Text.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
				entryrelationshipProcedure.EffectiveTime = GetIVL_TS(_entryrelationshipProcedure.getEffectiveTime());
				entryrelationshipProcedure.TargetSiteCodes = GetCDList(_entryrelationshipProcedure.getTargetSiteCodes());
				entryrelationshipProcedure.PriorityCode = GetCE(_entryrelationshipProcedure.getPriorityCode());
				entryrelationshipProcedure.MethodCodes = GetCEList(_entryrelationshipProcedure.getMethodCodes());
				entryrelationshipProcedure.Authors = GetAuthorList(_entryrelationshipProcedure.getAuthors());
				entryrelationshipProcedure.Participants = GetParticipant2List(_entryrelationshipProcedure.getParticipants());
				entryrelationshipProcedure.Performers = GetPerformer2List(_entryrelationshipProcedure.getPerformers());
				entryrelationshipProcedure.Specimens = GetSpecimenList(_entryrelationshipProcedure.getSpecimens());

				var _entryrelationshipProcedureentryrelationships = _entryrelationshipProcedure.getEntryRelationships();
				var EntryrelationshipProcedureentryrelationships = [];

				if (_entryrelationshipProcedureentryrelationships != null) {
					var _entryrelationshipProcedureentryrelationshipsSize = _entryrelationshipProcedureentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipProcedureentryrelationshipsSize; _count++) {
						var EntryrelationshipProcedureentryrelationship = {};
						var _entryrelationshipProcedureentryrelationship = _entryrelationshipProcedureentryrelationships.get(_count);
						var _entryrelationshipProcedureentryrelationshipProcedure = _entryrelationshipProcedureentryrelationship.getProcedure();
						if (_entryrelationshipProcedureentryrelationshipProcedure != null) {
							var EntryrelationshipProcedureentryrelationshipProcedure = {};
							EntryrelationshipProcedureentryrelationshipProcedure.Ids = GetIIList(_entryrelationshipProcedureentryrelationshipProcedure.getIds());
							EntryrelationshipProcedureentryrelationshipProcedure.Text = GetED(_entryrelationshipProcedureentryrelationshipProcedure.getText());
							if(EntryrelationshipProcedureentryrelationshipProcedure.Text.Reference.TEL_URL != null &amp;&amp; EntryrelationshipProcedureentryrelationshipProcedure.Text.Reference.TEL_URL != undefined){
								var _referenceValue = EntryrelationshipProcedureentryrelationshipProcedure.Text.Reference.TEL_URL.Value;
								EntryrelationshipProcedureentryrelationshipProcedure.Text.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
							}
							EntryrelationshipProcedureentryrelationshipProcedure.Code = GetCD(_entryrelationshipProcedureentryrelationshipProcedure.getCode());
							if(EntryrelationshipProcedureentryrelationshipProcedure.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; EntryrelationshipProcedureentryrelationshipProcedure.Code.OriginalText.Reference.TEL_URL != undefined){
								var _referenceValue = EntryrelationshipProcedureentryrelationshipProcedure.Code.OriginalText.Reference.TEL_URL.Value;
								EntryrelationshipProcedureentryrelationshipProcedure.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
							}
						
							EntryrelationshipProcedureentryrelationshipProcedure.StatusCode = GetCS(_entryrelationshipProcedureentryrelationshipProcedure.getStatusCode());
							//EntryrelationshipProcedureentryrelationshipProcedure.Text = GetED(_entryrelationshipProcedureentryrelationshipProcedure.getText());
							EntryrelationshipProcedureentryrelationshipProcedure.EffectiveTime = GetIVL_TS(_entryrelationshipProcedureentryrelationshipProcedure.getEffectiveTime());
							EntryrelationshipProcedureentryrelationshipProcedure.TargetSiteCodes = GetCDList(_entryrelationshipProcedureentryrelationshipProcedure.getTargetSiteCodes());
							EntryrelationshipProcedureentryrelationshipProcedure.PriorityCode = GetCE(_entryrelationshipProcedureentryrelationshipProcedure.getPriorityCode());
							EntryrelationshipProcedureentryrelationshipProcedure.MethodCodes = GetCEList(_entryrelationshipProcedureentryrelationshipProcedure.getMethodCodes());
							EntryrelationshipProcedureentryrelationshipProcedure.Authors = GetAuthorList(_entryrelationshipProcedureentryrelationshipProcedure.getAuthors());
							EntryrelationshipProcedureentryrelationshipProcedure.Participants = GetParticipant2List(_entryrelationshipProcedureentryrelationshipProcedure.getParticipants());
							EntryrelationshipProcedureentryrelationshipProcedure.Performers = GetPerformer2List(_entryrelationshipProcedureentryrelationshipProcedure.getPerformers());
							EntryrelationshipProcedureentryrelationshipProcedure.Specimens = GetSpecimenList(_entryrelationshipProcedureentryrelationshipProcedure.getSpecimens());
							EntryrelationshipProcedureentryrelationshipProcedure.ClassCode = GetVocabInfo(_entryrelationshipProcedureentryrelationshipProcedure.getClassCode());
							EntryrelationshipProcedureentryrelationshipProcedure.MoodCode = GetVocabInfo(_entryrelationshipProcedureentryrelationshipProcedure.getMoodCode());

							EntryrelationshipProcedureentryrelationship.Procedure = EntryrelationshipProcedureentryrelationshipProcedure;
						}
						EntryrelationshipProcedureentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipProcedureentryrelationship.getTypeCode());
						EntryrelationshipProcedureentryrelationships.push(EntryrelationshipProcedureentryrelationship);
					}
				}
				entryrelationshipProcedure.EntryRelationships = EntryrelationshipProcedureentryrelationships;
				entryrelationship.Procedure = entryrelationshipProcedure;
			}

			var _entryrelationshipsubstanceAdministration = _entryrelationship.getSubstanceAdministration();
			if (_entryrelationshipsubstanceAdministration != null) {
				var entryrelationshipsubstanceAdministration = {};
				entryrelationshipsubstanceAdministration.TemplateIds = GetIIList(_entryrelationshipsubstanceAdministration.getTemplateIds());
				entryrelationshipsubstanceAdministration.MoodCode = GetVocabInfo(_entryrelationshipsubstanceAdministration.getMoodCode());
				entryrelationshipsubstanceAdministration.Ids = GetIIList(_entryrelationshipsubstanceAdministration.getIds());
				entryrelationshipsubstanceAdministration.Code = GetCD(_entryrelationshipsubstanceAdministration.getCode());
				if(entryrelationshipsubstanceAdministration.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; entryrelationshipsubstanceAdministration.Code.OriginalText.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipsubstanceAdministration.Code.OriginalText.Reference.TEL_URL.Value;
					entryrelationshipsubstanceAdministration.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
				entryrelationshipsubstanceAdministration.Text = GetED(_entryrelationshipsubstanceAdministration.getText());
				if(entryrelationshipsubstanceAdministration.Text.Reference.TEL_URL != null &amp;&amp; entryrelationshipsubstanceAdministration.Text.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipsubstanceAdministration.Text.Reference.TEL_URL.Value;
					entryrelationshipsubstanceAdministration.Text.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
				entryrelationshipsubstanceAdministration.MoodCode = GetVocabInfo(_entryrelationshipsubstanceAdministration.getMoodCode());
				entryrelationshipsubstanceAdministration.StatusCode = GetCS(_entryrelationshipsubstanceAdministration.getStatusCode());
				entryrelationshipsubstanceAdministration.EffectiveTimes = GetSXCM_TSList(_entryrelationshipsubstanceAdministration.getEffectiveTimes());
				entryrelationshipsubstanceAdministration.RepeatNumber = GetIVL_INT(_entryrelationshipsubstanceAdministration.getRepeatNumber());
				entryrelationshipsubstanceAdministration.RouteCode = GetCE(_entryrelationshipsubstanceAdministration.getRouteCode());
				entryrelationshipsubstanceAdministration.ApproachSiteCodes = GetCDList(_entryrelationshipsubstanceAdministration.getApproachSiteCodes());
				entryrelationshipsubstanceAdministration.DoseQuantity = GetIVL_PQ(_entryrelationshipsubstanceAdministration.getDoseQuantity());
				entryrelationshipsubstanceAdministration.RateQuantity = GetIVL_PQ(_entryrelationshipsubstanceAdministration.getRateQuantity());
				entryrelationshipsubstanceAdministration.MaxDoseQuantity = GetRTO_PQ_PQ(_entryrelationshipsubstanceAdministration.getMaxDoseQuantity());
				entryrelationshipsubstanceAdministration.Consumable = GetConsumable(_entryrelationshipsubstanceAdministration.getConsumable());
				if(entryrelationshipsubstanceAdministration.Consumable.ManufacturedProduct.Material.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; entryrelationshipsubstanceAdministration.Consumable.ManufacturedProduct.Material.Code.OriginalText.Reference.TEL_URL != undefined){
					var _referenceValue = entryrelationshipsubstanceAdministration.Consumable.ManufacturedProduct.Material.Code.OriginalText.Reference.TEL_URL.Value;
					entryrelationshipsubstanceAdministration.Consumable.ManufacturedProduct.Material.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
				}
				entryrelationshipsubstanceAdministration.Performers = GetPerformer2List(_entryrelationshipsubstanceAdministration.getPerformers());
				entryrelationshipsubstanceAdministration.Preconditions = GetPreconditionList(_entryrelationshipsubstanceAdministration.getPreconditions());
				entryrelationshipsubstanceAdministration.Participants = GetParticipant2List(_entryrelationshipsubstanceAdministration.getParticipants());
				entryrelationshipsubstanceAdministration.Authors = GetAuthorList(_entryrelationshipsubstanceAdministration.getAuthors());

				var _entryrelationshipsubstanceAdministrationentryrelationships = _entryrelationshipsubstanceAdministration.getEntryRelationships();
				var EntryrelationshipsubstanceAdministrationentryrelationships = [];

				if (_entryrelationshipsubstanceAdministrationentryrelationships != null) {
					var _entryrelationshipsubstanceAdministrationentryrelationshipsSize = _entryrelationshipsubstanceAdministrationentryrelationships.size();
					var _count = 0;
					for (_count = 0; _count &lt; _entryrelationshipsubstanceAdministrationentryrelationshipsSize; _count++) {
						var EntryrelationshipsubstanceAdministrationentryrelationship = {};
						var _entryrelationshipsubstanceAdministrationentryrelationship = _entryrelationshipsubstanceAdministrationentryrelationships.get(_count);
						var _entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration = _entryrelationshipsubstanceAdministrationentryrelationship.getsubstanceAdministration();
						if (_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration != null) {
							var EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration = {};
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Ids = GetIIList(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getIds());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Code = GetCD(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getCode());
							if(EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Code.OriginalText.Reference.TEL_URL != undefined){
								var _referenceValue = EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Code.OriginalText.Reference.TEL_URL.Value;
								EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
							}
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Text = GetED(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getText());
							if(EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Text.Reference.TEL_URL != null &amp;&amp; EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Text.Reference.TEL_URL != undefined){
								var _referenceValue = EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Text.Reference.TEL_URL.Value;
								EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Text.Reference.TEL_URL.Value = GetValuebyId(_sectionText,_referenceValue);
							}
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.MoodCode = GetVocabInfo(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getMoodCode());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.StatusCode = GetCS(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getStatusCode());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.EffectiveTimes = GetSXCM_TSList(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getEffectiveTimes());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.RepeatNumber = GetIVL_INT(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getRepeatNumber());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.RouteCode = GetCE(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getRouteCode());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.ApproachSiteCodes = GetCDList(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getApproachSiteCodes());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.DoseQuantity = GetIVL_PQ(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getDoseQuantity());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.RateQuantity = GetIVL_PQ(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getRateQuantity());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.MaxDoseQuantity = GetRTO_PQ_PQ(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getMaxDoseQuantity());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Consumable = GetConsumable(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getConsumable());
							if(EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Consumable.ManufacturedProduct.Material.Code.OriginalText.Reference.TEL_URL != null &amp;&amp; EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Consumable.ManufacturedProduct.Material.Code.OriginalText.Reference.TEL_URL != undefined){
							var _referenceValue = EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Consumable.ManufacturedProduct.Material.Code.OriginalText.Reference.TEL_URL.Value;
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Consumable.ManufacturedProduct.Material.Code.OriginalText.Reference.TEL_URL.Value = GetValuebyId(_secttionText,_referenceValue);
							}
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Performers = GetPerformer2List(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getPerformers());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Preconditions = GetPreconditionsList(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getPreconditions());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Participants = GetParticipant2List(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getParticipants());
							EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.Authors = GetAuthorList(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getAuthors());

							EntryrelationshipsubstanceAdministrationentryrelationship.substanceAdministration = EntryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration;
						}
						EntryrelationshipsubstanceAdministrationentryrelationship.TypeCode = GetVocabInfo(_entryrelationshipsubstanceAdministrationentryrelationshipsubstanceAdministration.getTypeCode());
						EntryrelationshipsubstanceAdministrationentryrelationships.push(EntryrelationshipsubstanceAdministrationentryrelationship);
					}
				}

				entryrelationshipsubstanceAdministration.EntryRelationships = EntryrelationshipsubstanceAdministrationentryrelationships;
				entryrelationship.substanceAdministration = entryrelationshipsubstanceAdministration;
			}

	return entryrelationship;			
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>33cb7206-048a-4a2e-8c72-2f812439d9a7</id>
            <name>replacenamespace</name>
            <revision>2</revision>
            <lastModified>
              <time>1666429682571</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function replacenamespace(arg1) {
	// TODO: Enter code here
	arg1=arg1.replace(/&apos;xmlns=&quot;urn:hl7-org:v3&quot;&apos;/g,&apos;&apos;)
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="3.12.0">
        <id>37a60ffd-4008-4cda-b60f-31f4d20ba4ff</id>
        <name>HAPI FHIR Library</name>
        <revision>128</revision>
        <lastModified>
          <time>1669130240293</time>
          <timezone>Asia/Calcutta</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>false</includeNewChannels>
        <enabledChannelIds>
          <string>268c87ee-b6cc-435b-a498-3484197be2ca</string>
          <string>abf8a28b-b96e-439d-ae18-e79e27a26915</string>
          <string>efd79df6-4275-42e1-b342-4c186eb0dccc</string>
          <string>264cf267-3368-4571-87d8-c0562c3a6912</string>
          <string>cdc68cb2-21f4-447e-b7b9-a0d120a91aed</string>
          <string>40a447a8-89f7-494c-b224-5880c7e86c73</string>
          <string>aba9f80e-e0c2-4b14-b365-9f5f416d51e5</string>
          <string>6485566a-e026-44c1-98cf-f7c62a948022</string>
          <string>617546b5-34e3-4e61-9b1d-5c40909c3787</string>
          <string>92472400-a82a-4805-b3fe-f92b5980aa2f</string>
          <string>b9b54c9b-eda4-43c9-8109-fa41bd6cc8fb</string>
          <string>601011b3-f0e9-4bbc-9cf4-dfa658c79e09</string>
          <string>dd76bbd8-85b9-4718-b8e2-bdcbb018a611</string>
          <string>8199c8b2-befa-4924-a390-526c4f3b1d31</string>
        </enabledChannelIds>
        <disabledChannelIds>
          <string>41380607-1411-4b46-a8a7-460267132a58</string>
          <string>7ce93031-5a1b-421b-bc6f-8de76ee2cba1</string>
          <string>5220c4fd-f531-43ff-b9ce-27a4cc8bfa52</string>
          <string>a8209ef7-0a7f-440b-9cdf-8cf0b7b1ab3d</string>
          <string>33599d3c-8359-4fab-b161-9d99484c8247</string>
          <string>c51960a1-1265-4d64-8c3f-5db07bb89f7c</string>
          <string>02ac2b89-fb25-4fdb-b91f-d3db2de6f3d6</string>
          <string>abdefaaf-d511-480e-9e7f-beeb9c320b63</string>
          <string>301fad6a-2981-4e1d-868c-8dc98f755f2d</string>
          <string>e77c34d0-0846-4d33-8455-6032d1c8fbc8</string>
          <string>beba7b91-73a8-4056-8d22-ecd0109d8675</string>
        </disabledChannelIds>
        <codeTemplates>
          <codeTemplate version="3.12.0">
            <id>ef8780c1-7d9b-4ef9-b607-802e1875626c</id>
            <name>AddAddressNode</name>
            <revision>9</revision>
            <lastModified>
              <time>1668183288345</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function AddAddressNode(arg1)
{

   importPackage(org.hl7.fhir.r4.model);
   var period=new Period();
   var addresslist=[];

   //logger.info(&apos;AddAddressNode-&gt;&apos;+typeof arg1);
   for (var _a=0; _a &lt; arg1.length; _a++) 
   {
      addr=new Address();
      var temaddr=arg1[_a];

      if(temaddr.PostalAddress[0].Name!=&apos;&apos; &amp;&amp; MapAddressUse(temaddr.PostalAddress[0].Name)!=null)
      {
         addr.setUse(Address.AddressUse.valueOf(MapAddressUse(temaddr.PostalAddress[0].Name)))
      }
                            
      if(temaddr.StreetAddressLines[0].ADXP_ST!=&apos;&apos;)
      {
         addr.addLine(temaddr.StreetAddressLines[0].ADXP_ST.trim());
      }

      if(temaddr.Cities[0].ADXP_ST!=&apos;&apos;)
      {
         addr.setCity(temaddr.Cities[0].ADXP_ST)
      }

      if(temaddr.States[0].ADXP_ST!=&apos;&apos;)
      {
         addr.setState(temaddr.States[0].ADXP_ST);
      }
                            
      if(temaddr.PostalCodes[0].ADXP_ST!=&apos;&apos;)
      {
         addr.setPostalCode(temaddr.PostalCodes[0].ADXP_ST);
      }

      if(temaddr.Countries[0].ADXP_ST!=&apos;&apos;)
      {
         addr.setCountry(temaddr.Countries[0].ADXP_ST);
      }

      if(temaddr.UsablePeriods[0].hasOwnProperty(&apos;IVL_TS&apos;))
      {
          if(temaddr.UsablePeriods[0].IVL_TS.Low.TS.Value!=&apos;&apos;)
         {
            period.setStartElement(new DateTimeType(formatdate(temaddr.UsablePeriods[0].IVL_TS.Low.TS.Value)));
            addr.setPeriod(period);
         }

         if(temaddr.UsablePeriods[0].IVL_TS.High.TS.Value!=&apos;&apos;)
         {
            period.setEndElement(new DateTimeType(formatdate(temaddr.UsablePeriods[0].IVL_TS.High.TS.Value)));
            addr.setPeriod(period);
         }
      }
     

      addresslist.push(addr)
   }

   if(addresslist.length&gt;0)
   {
      return addresslist
   }
}

</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>76044826-2855-4c6d-a256-1c7beaff99e2</id>
            <name>AddNameNode</name>
            <revision>5</revision>
            <lastModified>
              <time>1667469953350</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function AddNameNode(arg1)
{

   importPackage(org.hl7.fhir.r4.model);
   var period=new Period();
   var namelist=[];
   for (var _n=0; _n &lt; arg1.length; _n++) 
   {
      var tempname=arg1[_n];
      var name=new HumanName();

      if(tempname.Families[0].ENXP_ST!=&apos;&apos;)
      {
         name.setFamily(tempname.Families[0].ENXP_ST)   
      }
      
      if(tempname.Givens[0].ENXP_ST!=&apos;&apos;)
      {
         name.addGiven(tempname.Givens[0].ENXP_ST)   
      }
      
                             
      if(tempname.Givens[1] != null &amp;&amp; tempname.Givens[1] != undefined) 
      {
         name.addGiven(tempname.Givens[1].ENXP_ST);
      }

      if(tempname.EntityNameUses[0].Name!=&apos;&apos;)
      {
         name.setUse(HumanName.NameUse.valueOf(MapEntityNameUse(tempname.EntityNameUses[0].Name)));  
      }

      if(tempname.Prefixes[0].ENXP_ST!=&apos;&apos;)
      {
         name.addPrefix(tempname.Prefixes[0].ENXP_ST);  
      }

      if(tempname.Suffixes[0].ENXP_ST!=&apos;&apos;)
      {
         name.addSuffix(tempname.Suffixes[0].ENXP_ST);  
      }

      if(tempname.ValidTime.Low.TS.Value!=&apos;&apos;)
      {
         period.setStartElement(new DateTimeType(formatdate(tempname.ValidTime.Low.TS.Value)));
         name.setPeriod(period)
      }

      if(tempname.ValidTime.High.TS.Value!=&apos;&apos;)
      {
         period.setEndElement(new DateTimeType(formatdate(tempname.ValidTime.High.TS.Value)));
         name.setPeriod(period)
      }

      namelist.push(name)
   }

   if(namelist.length&gt;0)
   {
      return namelist
   }
}

</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>06f0353f-1bf7-4e46-a0f1-411063e57851</id>
            <name>AddTelecomNode</name>
            <revision>4</revision>
            <lastModified>
              <time>1667303950267</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function AddTelecomNode(arg1)
{

   importPackage(org.hl7.fhir.r4.model);
   var telecomlist=[];
   for (var _t=0; _t &lt; arg1.length; _t++) 
   {
      var tempcontact=arg1[_t];
      var telecom=new ContactPoint();
      if(arg1[_t].TEL_URL.Value!=&apos;&apos;)
      {
      	telecom.setValue(arg1[_t].TEL_URL.Value)
      	telecom.setSystem(ContactPoint.ContactPointSystem.valueOf(MapTelecomSystem(arg1[_t].TelecomAddress[0].Name)));      
      }

      
      
      
      telecomlist.push(telecom)
   }

   if(telecomlist.length&gt;0)
   {
      return telecomlist
   }
}

</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>67c523b9-0abc-403a-895c-468958c193a2</id>
            <name>AdvanceDirectiveBundle</name>
            <revision>9</revision>
            <lastModified>
              <time>1669212304921</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function AdvanceDirectiveBundle(arg1,text,patientid,bundleid) 
{
   
    
   var obj=JSON.parse(arg1);
   
   if(obj.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=obj.Entries.length;
       bundle.entry=[];
   }
   

   //looping through entries
   for(var _a=0;_a&lt;obj.Entries.length;_a++)
   {
      if(obj.Entries[_a].hasOwnProperty(&apos;Observation&apos;))
      {
        var temp={};
        temp.resource=AdvanceDirectiveObservationResource(obj.Entries[_a].Observation,text,patientid);
        bundle.entry.push(temp)

        SavefhirResource(temp.resource,bundleid,obj.Code)
      }
   }  

   //logger.info(&apos;AdvanceDirectiveBundle-&gt;&apos;+JSON.stringify(bundle)) 
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>702d8f66-3f9b-4067-9807-6fafc170c0e1</id>
            <name>AdvanceDirectiveObservationResource</name>
            <revision>18</revision>
            <lastModified>
              <time>1668944442361</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function AdvanceDirectiveObservationResource(arg1,txt,patientid)
{
    importPackage(org.hl7.fhir.r4.model);
    var observation = new org.hl7.fhir.r4.model.Observation();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  
   
    for(var _id=0;_id&lt;arg1.Ids.length;_id++)
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            observation.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }  
    }

    if(txt!=&apos;&apos; &amp;&amp; GetNarrative(txt)!=null)
    {
        observation.setText(GetNarrative(txt))
    }

    observation.setStatus(Observation.ObservationStatus.FINAL);
    observation.addCategory(new CodeableConcept(new Coding().setCode(&apos;42348-3&apos;).setDisplay(&apos;Advance Directives&apos;).setSystem(&apos;http://terminology.hl7.org/CodeSystem/observation-category&apos;)));
    
    observation.setCode(CodeableConcept(GetCoding(arg1.Code)));
    observation.setSubject(new Reference().setReference(patientid));    

    var tempdate=GetEffectiveTimeInfo(arg1);
    if(tempdate.startdatetime!=&apos;&apos;)
    {
        observation.setEffective(new DateTimeType(formatdate(tempdate.startdatetime)));
    }

    var observedvalue=GetMergedCodeList(arg1.Values[0].CD);
    if(observedvalue.length&gt;0)
    {
        observation.setValue(CodeableConcept(GetCoding(observedvalue[0])));
    }


    for(var _p=0;_p&lt;arg1.Participants.length&gt;0;_p++)
    {
        var participant=arg1.Participants[_p];
        if(participant.TypeCode.Name==&apos;VRF&apos;)
        {
            var tempparticipant=ParticipanttoPractictioner(participant.ParticipantRole);
            if(tempparticipant!=undefined)
            {
                var authenticator=&apos;#&apos;+new Resource(tempparticipant.getId());
                observation.addContained(tempparticipant);        
            }
            
        }

        if(participant.TypeCode.Name==&apos;CST&apos;)
        {
            var tempcustodian=ParticipanttoPractictioner(participant.ParticipantRole);
            if(tempcustodian!=undefined)
            {
                var custodian=&apos;#&apos;+new Resource(tempcustodian.getId());
                observation.addContained(tempcustodian);        
            }
            
        }
    }

    for(var _r=0;_r&lt;arg1.References.length;_r++)
    {
        var tempreference=arg1.References[_r];
        
        var tempdocument=ExternalDocumentReference(tempreference,patientid,authenticator,custodian);
        if(tempdocument!=undefined)
        {
            observation.addDerivedFrom(new Reference().setReference(&apos;#&apos;+new Resource(tempdocument.getId())));
            observation.addContained(tempdocument);    
        }
        
    }   

    observation.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(observation))));
    //var oObservation=JSON.parse(parser.encodeResourceToString(observation));
    //logger.info(&apos;EncounterResource-&gt;&apos;+parser.encodeResourceToString(encounter));

    return observation;
    

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>92eda919-b1d6-4b1f-b76b-e83c1c464337</id>
            <name>AllergyIntoleranceBundle</name>
            <revision>13</revision>
            <lastModified>
              <time>1669212305684</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function AllergyIntoleranceBundle(arg1,text,patientid,bundleId) 
{
   var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
   var parser = ctx.newJsonParser();
	//logger.info(&apos;AllergyIntoleranceBundle-&gt;&apos;+text);
   var allergy=JSON.parse(arg1);
   
   if(allergy.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=allergy.Entries.length;
       bundle.entry=[];
   }
   

   //looping through entries
   for(var _a=0;_a&lt;allergy.Entries.length;_a++)
   {
      bundle.entry.push(AllergyIntoleranceResource(allergy.Entries[_a].Act,text,patientid));

      SavefhirResource(bundle.entry[_a],bundleId,allergy.Code);
   }  

   //logger.info(JSON.stringify(bundle)) 
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>aac72619-a521-42c0-9736-19d2aaecf551</id>
            <name>AllergyIntoleranceResource</name>
            <revision>63</revision>
            <lastModified>
              <time>1668944580059</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function AllergyIntoleranceResource(arg1,txt,patientid)
{
   var allergyresource = new org.hl7.fhir.r4.model.AllergyIntolerance();
   var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
   var parser = ctx.newJsonParser();
   
   for(var _id=0;_id&lt;arg1.Ids.length;_id++)
   {
      if(arg1.Ids[_id].Extension!=&apos;&apos;)
      {
            allergyresource.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);
      }
   }

   if(txt!=&apos;&apos; &amp;&amp; GetNarrative(txt)!=null)
   {
     allergyresource.setText(GetNarrative(txt))
      
   }
     
   var tempdate=GetEffectiveTimeInfo(arg1);
      
   if(tempdate.startdatetime!=&apos;&apos;)
   {
      allergyresource.setOnset(new DateTimeType((formatdate(tempdate.startdatetime))));   
   }

   if(arg1.Authors[0].Time.Value!=&apos;&apos;)
   {
      allergyresource.setRecordedDateElement(new DateTimeType((formatdate(arg1.Authors[0].Time.Value))));
   }

   
   allergyresource.setPatient(new Reference().setReference(patientid));

   var recorder=AuthortoPractictionerRole(arg1.Authors[0].AssignedAuthor);
   if(recorder!= undefined)
   {
      allergyresource.addContained(recorder);  
      
      allergyresource.setRecorder(new Reference().setReference(&apos;#&apos;+new Resource(recorder.getId())));
   }

   var recorderperson=AuthortoPractictioner(arg1.Authors[0].AssignedAuthor)
   if(recorderperson!= undefined)
   {
      allergyresource.addContained(recorderperson);
   }

   var recorderorganization=AuthortoOrganization(arg1.Authors[0].AssignedAuthor.Organization);
   if(recorderorganization!= undefined)
   {
      allergyresource.addContained(recorderorganization);
   }
   
   
   
   

   //Loop through Act.EntryRelationship
   for(var _a_oe=0;_a_oe&lt;arg1.EntryRelationships.length;_a_oe++)
   {
      var temp_e_er=arg1.EntryRelationships[_a_oe];
       
      //start of EntryRelationship.Observation
      if(temp_e_er.hasOwnProperty(&apos;Observation&apos;))
      {

         if(temp_e_er.TypeCode.Name==&apos;SUBJ&apos;)
         {
            var allergytype=GetMergedCodeList(temp_e_er.Observation.Code);
            if(allergytype.length&gt;0)
            {
               allergyresource.setType(AllergyIntolerance.AllergyIntoleranceType.valueOf(MapAllergyType(allergytype[0])))   
            }

            if(temp_e_er.Observation.Participants[0].ParticipantRole.PlayingEntity.Code.Code!=&apos;&apos; || temp_e_er.Observation.Participants[0].ParticipantRole.PlayingEntity.Code.DisplayName!=&apos;&apos; || temp_e_er.Observation.Participants[0].ParticipantRole.PlayingEntity.Code.OriginalText.Text!=&apos;&apos;)
            {
               allergyresource.setCode(new CodeableConcept().setCoding(GetCodingList(temp_e_er.Observation.Participants[0].ParticipantRole.PlayingEntity.Code)))
            }
            else if(temp_e_er.Observation.Values[0].CD.OriginalText.Reference.TEL_URL.Value!=&apos;&apos;)
            {
               var allergycode=new Coding();
               allergycode.setSystem(&apos;http://snomed.info/sct&apos;).setCode(&apos;716186003&apos;).setDisplay(&apos;No known allergy&apos;);
               allergyresource.SetCode(CodeableConcept(allergycode))
            }

               //verificationStatus
            allergyresource.setVerificationStatus(CodeableConcept(GetCoding(MapVerificationStatus(temp_e_er.Observation.StatusCode))));
         }

         var reaction=[];
         
         //Start of Observation.EntryRelationship
         for(var _a_oe_oe=0;_a_oe_oe&lt;temp_e_er.Observation.EntryRelationships.length;_a_oe_oe++)
         {
            var temp_e_er_er=temp_e_er.Observation.EntryRelationships[_a_oe_oe];
            
            if(temp_e_er_er.TypeCode.Name==&apos;SUBJ&apos;)
            {
               //Clinicalstatus
               if(temp_e_er_er.Observation.Code.Code==&apos;33999-4&apos;)
               {
                  var clinicalstatus=GetMergedCodeList(temp_e_er_er.Observation.Values[0].CD);
                  if(clinicalstatus.length&gt;0)
                  {
                     allergyresource.setClinicalStatus(CodeableConcept(GetCoding(MapAllergyClinicalStatus(temp_e_er_er.Observation.Values[0].CD))))   
                  }
               }

               //Criticality
               if(temp_e_er_er.Observation.Code.Code==&apos;82606-5&apos;)
               {
                  allergyresource.setCriticality(AllergyIntolerance.AllergyIntoleranceCriticality.valueOf(MapAllergyCriticality(temp_e_er_er.Observation.Values[0].CD)))
               }
            }

            
            if(temp_e_er_er.TypeCode.Name==&apos;MFST&apos; || temp_e_er_er.Observation.Code.Code==&apos;SEV&apos;)
            {

                  
                  //Reaction
                  if(temp_e_er_er.Observation.Code.Code==&apos;ASSERTION&apos; || temp_e_er_er.Observation.Code.Code==&apos;&apos;)
                  {
                        //logic to check for multiple reactions  
                        
                        if(temp_e_er_er.TypeCode.Name==&apos;MFST&apos;)
                        {
                              var reactioncomponent=new org.hl7.fhir.r4.model.AllergyIntolerance.AllergyIntoleranceReactionComponent();      
                        }
                        
                        if(temp_e_er_er.Observation.Code.Code==&apos;ASSERTION&apos; || temp_e_er_er.Observation.Code.Code==&apos;&apos;)
                        {
                              for(var m=0;m&lt;temp_e_er_er.Observation.Values.length;m++)
                              {
                                    var reactionlist=GetMergedCodeList(temp_e_er_er.Observation.Values[m].CD);
                                    if(reactionlist.length&gt;0)
                                    {
                                          reactioncomponent.addManifestation(CodeableConcept(GetCoding(reactionlist[0])));
                                    }
                              }//endlogic to check for multiple reactions

                              //loop for 3 level Entry relationship
                              for(var _a_oe3=0;_a_oe3&lt;temp_e_er_er.Observation.EntryRelationships.length;_a_oe3++)
                              {
                                    var temp_er3=temp_e_er_er.Observation.EntryRelationships[_a_oe3];

                                    //severity
                                    if(temp_er3.Observation.Code.Code==&apos;SEV&apos;)
                                    {
                                          if(temp_er3.Observation.Values[0].CD.Code!=&apos;&apos;)
                                          {
                                          
                                                reactioncomponent.setSeverity(AllergyIntolerance.AllergyIntoleranceSeverity.valueOf(MapAllergySeverity(temp_er3.Observation.Values[0].CD)))
                                          }
                              
                                    } //end of Severity
                              }//end of 3rd EntryRelationship
                        }
                  }//end of reaction
                  
                  //Severity
                  if(temp_e_er_er.Observation.Code.Code==&apos;SEV&apos;)
                  {
                        
                        reactioncomponent.setSeverity(AllergyIntolerance.AllergyIntoleranceSeverity.valueOf(MapAllergySeverity(temp_e_er_er.Observation.Values[0].CD)))
                  }

                  reaction.push(reactioncomponent)
            }//end of MFST
           
      }//end of _a_oe_oe 

      if(reaction.length&gt;0)
      {
            allergyresource.setReaction(removeDuplicates(reaction));
      }


      }//end onEntryRelationship.Observation
   }//end of Act.EntryRelationship

   allergyresource.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(allergyresource))));
   //var oAllergy=JSON.parse(parser.encodeResourceToString(allergyresource));

   return allergyresource;

             
}     
            
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>42b0ab0f-e48c-424a-969a-335e2c672404</id>
            <name>AuthortoOrganization</name>
            <revision>13</revision>
            <lastModified>
              <time>1668252312704</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function AuthortoOrganization(arg1)
{
   //takes Authors[0].AssignedAuthor.Organization node as input
  //logger.info(&apos;AuthortoOrganization-&gt;&apos;+JSON.stringify(arg1))

   importPackage(org.hl7.fhir.r4.model);
   var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
   var parser = ctx.newJsonParser();
	//logger.info(&apos;AuthortoOrganization-&gt;&apos;+JSON.stringify(arg1));
    var organization = new org.hl7.fhir.r4.model.Organization();

    for (var _id = 0; _id &lt; arg1.Ids.length; _id++) 
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            organization.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }
    }

   organization.setAddress(AddAddressNode(arg1.Address));
   organization.setTelecom(AddTelecomNode(arg1.Telecoms));

   if(arg1.Names.length&gt;0)
   {	
	   if(arg1.Names[0].Text!=&apos;&apos;)
	   {
	      organization.setName(arg1.Names[0].Text.trim());   
	   }
   }
   
   
   
   
   organization.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(organization))));
	
   //logger.info(&apos;AuthortoOrganization-&gt;&apos;+countkey(parser.encodeResourceToString(organization)))
   //logger.info(&apos;AuthortoOrganization-&gt;&apos;+parser.encodeResourceToString(organization))
   if(countkey(parser.encodeResourceToString(organization))&gt;2)
   {
   	return organization
   }
   

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>7ca8e61b-d97b-4301-9203-8b392de4162a</id>
            <name>AuthortoPractictioner</name>
            <revision>21</revision>
            <lastModified>
              <time>1668953651223</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function AuthortoPractictioner(arg1)
{
   //takes Authors[0].AssignedAuthor node as input

	//logger.info(&apos;AuthortoPractictioner-&gt;&apos;+JSON.stringify(arg1))
   importPackage(org.hl7.fhir.r4.model);
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();

    var practitioner = new org.hl7.fhir.r4.model.Practitioner();

    for (var _id = 0; _id &lt; arg1.Ids.length; _id++) 
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            practitioner.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }
    }

   practitioner.setAddress(AddAddressNode(arg1.Address));
   practitioner.setTelecom(AddTelecomNode(arg1.Telecoms));

   practitioner.setName(AddNameNode(arg1.Person.Names));
   
   
   
   practitioner.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(practitioner))));
   

	
   if(countkey(parser.encodeResourceToString(practitioner))&gt;2)
   {
   	
   	return practitioner
   }
   /*
   else
   {
   	logger.info(&apos;AuthortoPractictioner-&gt; Returning null&apos;)
   	return null
   }*/
  
   
   

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>c3de3726-322a-4812-b350-04a667842ec8</id>
            <name>AuthortoPractictionerRole</name>
            <revision>25</revision>
            <lastModified>
              <time>1667845006407</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function AuthortoPractictionerRole(arg1)
{
	//takes Authors[0].AssignedAuthor node as input
	//logger.info(&apos;AuthortoPractictionerRole:AuthortoPractictioner-&gt;&apos;+JSON.stringify(arg1))

	importPackage(org.hl7.fhir.r4.model);
    	var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    	var parser = ctx.newJsonParser();

    var practitionerrole = new org.hl7.fhir.r4.model.PractitionerRole();

    for (var _id = 0; _id &lt; arg1.Ids.length; _id++) 
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            practitionerrole.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }
    }

	
	
	//logger.info(&apos;AuthortoPractictionerRole:AuthortoPractictioner-&gt;&apos;+AuthortoPractictioner(arg1))
	if(AuthortoPractictioner(arg1)!= undefined)
	{
		
		//practitionerrole.setPractitioner(new Reference((AuthortoPractictioner(arg1))));	
		practitionerrole.setPractitioner(new Reference().setReference(&apos;#&apos;+new Resource(AuthortoPractictioner(arg1).getId())));
	}

	if(arg1.hasOwnProperty(&apos;Organization&apos;))
	{
		if(AuthortoOrganization(arg1.Organization)!= undefined)
		{
		
			practitionerrole.setOrganization(new Reference().setReference(&apos;#&apos;+new Resource(AuthortoOrganization(arg1.Organization).getId())));
		}	
	}
	else if(arg1.hasOwnProperty(&apos;Organizations&apos;))
	{
		if(AuthortoOrganization(arg1.Organizations[0])!= undefined)
		{
		
			practitionerrole.setOrganization(new Reference().setReference(&apos;#&apos;+new Resource(AuthortoOrganization(arg1.Organizations[0]).getId())));
		}	
	}


	var specialtylist=GetMergedCodeList(arg1.Code);
	//logger.info(&apos;AuthortoPractictionerRole-&gt;&apos;+JSON.stringify(specialtylist));
	for(var _s=0;_s&lt;specialtylist.length;_s++)
	{
		practitionerrole.addSpecialty(CodeableConcept(GetCoding(specialtylist[_s])));
	}
	
	

	practitionerrole.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(practitionerrole))));
     
   	//logger.info(&apos;AuthortoPractictionerRole-&gt;&apos;+countkey(parser.encodeResourceToString(practitionerrole)))
   	//logger.info(&apos;AuthortoPractictionerRole-&gt;&apos;+parser.encodeResourceToString(practitionerrole))
   	if(countkey(parser.encodeResourceToString(practitionerrole))&gt;2)
   	{
   	   	return practitionerrole
   	}
   	
   	

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>3264fda2-22ab-4f88-89b6-ec48f38a93d2</id>
            <name>CareplanBundle</name>
            <revision>10</revision>
            <lastModified>
              <time>1669212306376</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function CareplanBundle(arg1,text,patientid,bundleid) 
{
   
   var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
   var parser = ctx.newJsonParser();
    
   var obj=JSON.parse(arg1);
   
   if(obj.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=obj.Entries.length;
       bundle.entry=[];
   }
   

   //looping through entries
   for(var _a=0;_a&lt;obj.Entries.length;_a++)
   {
        var record=obj.Entries[_a]
        var temp={};

        if(countkey(JSON.stringify(record.SubstanceAdministration))&gt;0)
        {
            temp.resource=CareplanMedicationRequest(record.SubstanceAdministration,text,patientid);   
            bundle.entry.push(temp);
            SavefhirResource(temp.resource,bundleid,obj.Code)   
        }

        
   }  

   //logger.info(&apos;CareplanBundle-&gt;&apos;+JSON.stringify(bundle)) 
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>d6afd6ce-c35e-4fc5-9265-5a20238ee4c5</id>
            <name>CareplanMedicationRequest</name>
            <revision>7</revision>
            <lastModified>
              <time>1668527950434</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function CareplanMedicationRequest(arg1,text,patientid)
{
   importPackage(org.hl7.fhir.r4.model);
   var careplan = new org.hl7.fhir.r4.model.CarePlan();
   var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
   var parser = ctx.newJsonParser();
   var activity=new org.hl7.fhir.r4.model.CarePlan.CarePlanActivityComponent();
   var activitydetail=new org.hl7.fhir.r4.model.CarePlan.CarePlanActivityDetailComponent();

   
   for(var _id=0;_id&lt;arg1.Ids.length;_id++)
   {
      if(arg1.Ids[_id].Extension!=&apos;&apos;)
      {
         careplan.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
      }
        
   }

   if(text!=&apos;&apos;)
   {
     careplan.setText(GetNarrative(text))
   }

   careplan.setStatus(CarePlan.CarePlanStatus.UNKNOWN);

   careplan.setIntent(CarePlan.CarePlanIntent.valueOf(MapCareplanIntent(arg1.MoodCode.Name)));

   careplan.setSubject(new Reference().setReference(patientid));

   if(arg1.hasOwnProperty(&apos;Informants&apos;))
   {

        for(var _inf=0;_inf&lt;arg1.Informants.length;_inf++)
        {
            var tempinformant=arg1.Informants[_inf];

            /Informant Block Start/
            if(AuthortoPractictionerRole(tempinformant.AssignedEntity)!= undefined)
            {
                careplan.addContained(AuthortoPractictionerRole(tempinformant.AssignedEntity));    
                careplan.addContributor(new Reference().setReference(&apos;#&apos;+new Resource(AuthortoPractictionerRole(tempinformant.AssignedEntity).getId())));
            }

            if(AuthortoPractictioner(tempinformant.AssignedEntity)!= undefined)
            {
                careplan.addContained(AuthortoPractictioner(tempinformant.AssignedEntity));
            }
                   
            if(AuthortoOrganization(tempinformant.AssignedEntity.Organizations[0])!= undefined)
            {
                careplan.addContained(AuthortoOrganization(tempinformant.AssignedEntity.Organizations[0]));
            }

            /Informant Block End/      
        }
      

   }

   activitydetail.setKind(CarePlan.CarePlanActivityKind.MEDICATIONREQUEST);

   activitydetail.setStatus(CarePlan.CarePlanActivityStatus.valueOf(MapCareplanStatus(arg1.StatusCode.Code)));

   var tempdate=GetEffectiveTimeInfo(arg1);

   if(tempdate.startdatetime!=&apos;&apos; &amp;&amp; tempdate.enddatetime!=&apos;&apos;)
   {
      var period=new Period();
      period.setStartElement(new DateTimeType(formatdate(tempdate.startdatetime)));
      period.setEndElement(new DateTimeType(formatdate(tempdate.enddatetime)));
      activitydetail.setScheduled(period)
   }
   else if(tempdate.startdatetime!=&apos;&apos;)
   {
        activitydetail.setScheduled(new StringType(formatdate(tempdate.startdatetime)))
   }


   activitydetail.setProduct(new CodeableConcept().setCoding(GetCodingList(arg1.Consumable.ManufacturedProduct.Material.Code)));

   activity.setDetail(activitydetail);
   careplan.addActivity(activity);

   careplan.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(careplan))));

  // logger.info(&apos;careplan Resource-&gt;&apos;+parser.encodeResourceToString(careplan));

   return careplan;

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>caf126fc-1371-4852-a025-d87595c7fbc1</id>
            <name>CompositionResource</name>
            <revision>16</revision>
            <lastModified>
              <time>1668944757672</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function CompositionResource(arg1,patientid,bundleId)
{
    
   importPackage(org.hl7.fhir.r4.model);
    var composition = new org.hl7.fhir.r4.model.Composition();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  
   
    if(arg1.Id.Extension!=&apos;&apos;)
    {
        composition.setIdentifier(new Identifier().setSystem(GetSystem(arg1.Id.Root)).setValue(arg1.Id.Extension));   
    }  
    
    
    composition.setStatus(Composition.CompositionStatus.FINAL);
    composition.setType(new CodeableConcept().setCoding(GetCodingList(arg1.Code)));
    composition.setSubject(new Reference().setReference(patientid)); 

    if(arg1.Effective.Value!=&apos;&apos;)
    {
        composition.setDateElement(new DateTimeType(formatdate(arg1.Effective.Value)))    
    }  
    
    composition.setTitle(arg1.Title);

    if(arg1.ConfidentialityCode.Code!=&apos;&apos;)
    {
        composition.setConfidentiality(Composition.DocumentConfidentiality.valueOf(MapConfidentiality(arg1.ConfidentialityCode.Code)))
    }


    var tempcustodian=ParticipanttoOrganization(arg1.Custodian.AssignedCustodian.CustodianOrganization);
    if(tempcustodian!=undefined)
    {
        composition.addContained(tempcustodian)
        composition.setCustodian(new Reference().setReference(&apos;#&apos;+new Resource(tempcustodian.getId())))
    }

    if(arg1.DocumentationOfs.length&gt;0)
    {
        if(arg1.DocumentationOfs[0].ServiceEvent.IVL_TS.Low.TS.Value!=&apos;&apos;)
        {
            var period=new Period()
            period.setStartElement(new DateTimeType(formatdate(arg1.DocumentationOfs[0].ServiceEvent.IVL_TS.Low.TS.Value)))

            if(arg1.DocumentationOfs[0].ServiceEvent.IVL_TS.High.TS.Value!=&apos;&apos;)
            {
                period.setEndElement(new DateTimeType(formatdate(arg1.DocumentationOfs[0].ServiceEvent.IVL_TS.High.TS.Value)))    
            }

            composition.addEvent(new org.hl7.fhir.r4.model.Composition.CompositionEventComponent().setPeriod(period));
            
        }
    }
   
    for(var _a=0;_a&lt;arg1.Authors.length;_a++)
    {
        var tempauthor=arg1.Authors[_a];

        /Author Block Start/
        var tauthor=AuthortoPractictionerRole(tempauthor.AssignedAuthor);
        if(tauthor!= undefined)
        {
            composition.addContained(tauthor);    
            composition.addAuthor(new Reference().setReference(&apos;#&apos;+new Resource(tauthor.getId())));
        }

        var tauthorperson=AuthortoPractictioner(tempauthor.AssignedAuthor);
        if(tauthorperson!= undefined)
        {
            composition.addContained(tauthorperson);
        }
                 
        var tauthorg=AuthortoOrganization(tempauthor.AssignedAuthor.Organization);
        if(tauthorg!= undefined)
        {
            composition.addContained(tauthorg);
        }

        /Author Block End/

    }

    var oComposition=JSON.parse(parser.encodeResourceToString(composition));

    //SavefhirResource(parser.encodeResourceToString(composition),composition.getId(),&apos;Composition&apos;,bundleId,null);
    SavefhirResource(composition,bundleId,null);
    
    return oComposition;
    
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>24abdd23-9a53-4905-a7be-a2969904ff83</id>
            <name>ConditionBundle</name>
            <revision>4</revision>
            <lastModified>
              <time>1669212307599</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
function ConditionBundle(arg1,text,patientid,bundleId) 
{
    var problem=JSON.parse(arg1);  

    if(problem.hasOwnProperty(&apos;Entries&apos;))
    {
    
         if(problem.Entries.length&gt;0)
         {
               var bundle={};
                bundle.resourceType=&apos;Bundle&apos;;
                bundle.type=&apos;batch&apos;;
                bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
                bundle.total=problem.Entries.length;
                bundle.entry=[];
         }
        
        //looping through entries
        for(var _p=0;_p&lt;problem.Entries.length;_p++)
        {
           bundle.entry[_p]={};
           bundle.entry[_p].resource=ConditionResource(problem.Entries[_p].Act,text,patientid)

           SavefhirResource(bundle.entry[_p].resource,bundleId,problem.Code);
        }//end of _p

        //logger.info(&apos;ConditionBundle-&gt;&apos;+JSON.stringify(bundle));
        return bundle;
    }
    
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>d0b0f04e-5478-4e70-988b-00e67434834a</id>
            <name>ConditionResource</name>
            <revision>33</revision>
            <lastModified>
              <time>1668944873588</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
function ConditionResource(arg1,txt,patientid) 
{
    importPackage(org.hl7.fhir.r4.model);
    var condition = new org.hl7.fhir.r4.model.Condition();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  
    

    if(arg1.hasOwnProperty(&apos;Informants&apos;))
    {
        if(arg1.Informants.length&gt;0)
        {
            var tempasserter=AuthortoPractictionerRole(arg1.Informants[0].AssignedEntity);
            if(tempasserter!= undefined)
            {
                condition.addContained(tempasserter);    
                condition.setAsserter(new Reference().setReference(&apos;#&apos;+new Resource(tempasserter.getId())));
            }

            var tempasserterperson=AuthortoPractictioner(arg1.Informants[0].AssignedEntity);
            if(tempasserterperson!= undefined)
            {
                condition.addContained(tempasserterperson);
            }
                   
            var tempasserterorg= AuthortoOrganization(arg1.Informants[0].AssignedEntity.Organizations[0]);
            if(tempasserterorg!= undefined)
            {
                condition.addContained(tempasserterorg);
            }   
        }

    }
    
    
    

    //looping through Entry Relationships
    for(_per=0;_per&lt;arg1.EntryRelationships.length;_per++)
    {
        var temp_er=arg1.EntryRelationships[_per];
        
        if(temp_er.TypeCode.Name==&apos;SUBJ&apos; &amp;&amp; temp_er.hasOwnProperty(&apos;Observation&apos;))
        {
            for(var _id=0;_id&lt;temp_er.Observation.Ids.length;_id++)
            {
                if(temp_er.Observation.Ids[_id].Extension!=&apos;&apos;)
                {
                    condition.addIdentifier().setSystem(GetSystem(temp_er.Observation.Ids[_id].Root)).setValue(temp_er.Observation.Ids[_id].Extension);   
                }
            
            }
            
        if(txt!=&apos;&apos; &amp;&amp; GetNarrative(txt)!=null)
            {
                condition.setText(GetNarrative(txt))
            }

            condition.setSubject(new Reference().setReference(patientid));      
            
            var conditioncategory=GetMergedCodeList(temp_er.Observation.Code);
          
            for(var _cat=0;_cat&lt;conditioncategory.length;_cat++)
            {
                condition.addCategory(CodeableConcept(GetCoding(conditioncategory[_cat])));
            } 
            
            var encdate=GetEffectiveTimeInfo(temp_er.Observation);
    
            if(encdate.startdatetime!=&apos;&apos;)
            {
                condition.setOnset(new DateTimeType(formatdate(encdate.startdatetime)));
            }

            if(encdate.enddatetime!=&apos;&apos;)
            {
                condition.setAbatement(new DateTimeType(formatdate(encdate.enddatetime)));
            }        
        
            var conditioncode=GetMergedCodeList(temp_er.Observation.Values[0].CD);
            //logger.info(&apos;ConditionResource:conditioncode-&gt;&apos;+GetMergedCodeList(temp_er.Observation.Values[0].CD))
            if(conditioncode.length&gt;0)
            {
                condition.setCode(CodeableConcept(GetCoding(conditioncode[0])));
            }

            //loop for Entryrelationship within observation
            for(var _o_er=0;_o_er&lt;temp_er.Observation.EntryRelationships.length&gt;0;_o_er++)
            {
                var temp_er_er=temp_er.Observation.EntryRelationships[_o_er];

                if(temp_er_er.hasOwnProperty(&apos;Observation&apos;))
                {
                    //start of clinicalstatus
                    if(temp_er_er.Observation.Code.Code==&apos;33999-4&apos;)
                    {
                        condition.setClinicalStatus(CodeableConcept(GetCoding(temp_er_er.Observation.Values[0].CD)));
                  }//end of clinicalstatus
        
        
                    // age at onset
                    if(temp_er_er.Observation.Code.Code==&apos;445518008&apos; || temp_er_er.Observation.Code.Code==&apos;397659008&apos;)
                    {
                        if(temp_er_er.Observation.Values[0].PQ.Value!=&apos;&apos;  &amp;&amp; encdate.startdatetime==&apos;&apos;)
                        {
                            condition.setOnset(new Age().setValue(temp_er_er.Observation.Values[0].PQ.Value).setCode(temp_er_er.Observation.Values[0].PQ.Unit));    
                        }
                        
                    }// end of OnsetAge
        

                    if(temp_er_er.Observation.Code.Code==&apos;225773000&apos;)
                    {
                        //start of severity
                        var severitylist=GetMergedCodeList(temp_er_er.Observation.Values[0].CD);
                        for(var _s=0;_s&lt;severitylist.length;_s++)
                        {
                            condition.setSeverity(CodeableConcept(GetCoding(severitylist[_s])))
                        }
                    }//end of severity
                }// end of temp_er_er.hasOwnProperty(&apos;Observation&apos;)
            }//end of temp_er_er for loop
        }//end of if loop 
    }//end of _per

    condition.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(condition))));
    //var oCondition=JSON.parse(parser.encodeResourceToString(condition));
    
   // logger.info(&apos;ConditionResource-&gt;&apos;+parser.encodeResourceToString(condition));
    if(countkey(parser.encodeResourceToString(condition))&gt;2)
    {
        return condition
    }

    //return oCondition;
}

        
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>1c07dcff-6262-4cca-88c8-91fa777c48b2</id>
            <name>CoverageResource</name>
            <revision>45</revision>
            <lastModified>
              <time>1668939894332</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
function CoverageResource(arg1,text,patientid)
{
    
    
    importPackage(org.hl7.fhir.r4.model);
    var coverage = new org.hl7.fhir.r4.model.Coverage();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  

    for(var _id=0;_id&lt;arg1.Ids.length;_id++)
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            coverage.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }
        
    }

    if(text!=&apos;&apos; &amp;&amp; GetNarrative(text)!=null)
    {
        coverage.setText(GetNarrative(text))
    }

    coverage.setStatus(Coverage.CoverageStatus.ACTIVE);
    coverage.setBeneficiary(new Reference().setReference(patientid));

    for(var _er1=0;_er1&lt;arg1.EntryRelationships.length;_er1++)
    {
        er1=arg1.EntryRelationships[_er1];

        if(er1.SequenceNumber.Value!=&apos;&apos;)
        {
            coverage.setOrder(er1.SequenceNumber.Value);
        }


        if(er1.hasOwnProperty(&apos;Act&apos;))
        {
            if(er1.Act.Ids[0].Extension!=&apos;&apos;)
            {
                coverage.setSubscriberId(er1.Act.Ids[0].Extension);
            }

            for(var _perf=0;_perf&lt;er1.Act.Performers.length;_perf++)
            {
                var tempperformer=er1.Act.Performers[_perf];

                if(tempperformer.AssignedEntity.Code.Code==&apos;PAYOR&apos;)
                {
                    var payerorg=OrganizationResource(tempperformer.AssignedEntity.Organizations[0]);
                    if(payerorg!=undefined)
                    {
                        coverage.addPayor(new Reference().setType(&apos;Organization&apos;).setDisplay(&apos;Payor&apos;).setReference(&apos;#&apos;+new Resource(payerorg.getId())))
                        coverage.addContained(payerorg)
                    }
                }

                if(tempperformer.AssignedEntity.Code.Code==&apos;GUAR&apos;)
                {
                    var relatedperson=ParticipanttoRelatedPerson(tempperformer.AssignedEntity);
                    if(relatedperson!=undefined)
                    {
                        coverage.addPayor(new Reference().setType(&apos;RelatedPerson&apos;).setDisplay(&apos;Guarantor&apos;).setReference(&apos;#&apos;+new Resource(relatedperson.getId())))
                        coverage.addContained(relatedperson)
                    }
                }
                
            }

            
            for(var _p=0;_p&lt;er1.Act.Participants.length;_p++)
            {
                var tempparticipant=er1.Act.Participants[_p];

                if(tempparticipant.TypeCode.Name==&apos;HLD&apos;)
                {
                    var relatedperson=ParticipanttoRelatedPerson(tempparticipant.ParticipantRole,patientid)
                    if(relatedperson!=undefined)
                    {
                        coverage.addContained(relatedperson);    
            
                        coverage.setPolicyHolder(new Reference().setType(&apos;RelatedPerson&apos;).setDisplay(&apos;Policy Holder&apos;).setReference(&apos;#&apos;+new Resource(relatedperson.getId())));    
                    }
                    
                }

                if(tempparticipant.TypeCode.Name==&apos;COV&apos;)
                {
                    var subscriber=ParticipanttoPatient(tempparticipant.ParticipantRole)
                    if(subscriber!=undefined)
                    {
                        coverage.addContained(subscriber);    
            
                        coverage.setSubscriber(new Reference().setType(&apos;Patient&apos;).setDisplay(&apos;Insured Person&apos;).setReference(&apos;#&apos;+new Resource(subscriber.getId())));    
                    }

                    if(tempparticipant.ParticipantRole.Code.Code!=&apos;&apos; || tempparticipant.ParticipantRole.Code.DisplayName!=&apos;&apos;)
                    {
                        coverage.setRelationship(new CodeableConcept().setCoding(GetCodingList(tempparticipant.ParticipantRole.Code)))
                        
                    }

                    var period=new Period();
                    if(tempparticipant.Time.Low.TS.Value!=&apos;&apos;)
                    {
                        period.setStartElement(new DateTimeType(formatdate(tempparticipant.Time.Low.TS.Value)));
                        coverage.setPeriod(period);
                    }

                    if(tempparticipant.Time.High.TS.Value!=&apos;&apos;)
                    {
                        period.setEndElement(new DateTimeType(formatdate(tempparticipant.Time.High.TS.Value)));
                        coverage.setPeriod(period);
                    }
                    
                }
            }


            for(var _er2=0;_er2&lt;er1.Act.EntryRelationships.length;_er2++)
            {
                var er2=er1.Act.EntryRelationships[_er2];
                if(er2.TypeCode.Name==&apos;REFR&apos; &amp;&amp; er2.Act.MoodCode.Name==&apos;DEF&apos;)
                {
                    if(er2.Act.Text.Text!=&apos;&apos;)
                    {
                        var classcomponent=org.hl7.fhir.r4.model.Coverage.ClassComponent();
                        classcomponent.setType(new CodeableConcept().setText(&apos;Plan&apos;));
                        classcomponent.setValue(er2.Act.Text.Text.trim());
                        coverage.addClass_(classcomponent);
                    }
                }

                for(var _er3=0;_er3&lt;er2.Act.EntryRelationships.length;_er3++)
                {
                    var er3=er2.Act.EntryRelationships[_er3];

                    if(er3.hasOwnProperty(&apos;Procedure&apos;))
                    {
                        if(er3.Procedure.MoodCode.Name==&apos;PRMS&apos;)
                        {
                            if(er3.Procedure.Code.Code!=&apos;&apos; || er3.Procedure.Code.DisplayName!=&apos;&apos;)
                            {
                                coverage.addExtension().setUrl(&apos;http://hl7.org/fhir/us/core/StructureDefinition/prior-auth&apos;).setValue(new CodeableConcept().setCoding(GetCodingList(er3.Procedure.Code)));
                            }
                        }
                        
                        
                    }
                }
            }
        }
    }

    coverage.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(coverage))));
 //   var oCoverage=JSON.parse(parser.encodeResourceToString(coverage));
    //logger.info(&apos;coverageResource-&gt;&apos;+parser.encodeResourceToString(coverage));
   


    
    return coverage;


    

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>6f0f3d3a-b4ac-487b-ad13-61d30b8a94af</id>
            <name>DeviceResource</name>
            <revision>11</revision>
            <lastModified>
              <time>1668246836874</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function DeviceResource(arg1,txt,patientid)
{
   	importPackage(org.hl7.fhir.r4.model);
    var device = new org.hl7.fhir.r4.model.Device();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  

    for(var _id=0;_id&lt;arg1.Ids.length;_id++)
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            device.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }  
    }

    if(txt!=&apos;&apos; &amp;&amp; GetNarrative(txt)!=null)
    {
        device.setText(GetNarrative(txt))
    }

    device.setStatus(Device.FHIRDeviceStatus.valueOf(MapDeviceStatus(arg1.StatusCode.Code)));
    device.setPatient(new Reference().setReference(patientid));  

    var tempdate=GetEffectiveTimeInfo(arg1);
    if(tempdate.enddatetime!=&apos;&apos;)
    {
    	device.setExpirationDateElement(new DateTimeType(formatdate(tempdate.enddatetime)))	
    }

    if(arg1.Quantity.Value!=&apos;&apos;)
    {
    	var quantity=new Quantity();
    	quantity.setValue(arg1.Quantity.Value);
    	if(arg1.Quantity.Unit!=&apos;&apos; &amp;&amp; arg1.Quantity.Unit!=&apos;1&apos;)
    	{
    		quantity.setUnit(arg1.Quantity.Unit)
    	}

    	device.addProperty(new org.hl7.fhir.r4.model.Device.DevicePropertyComponent().addValueQuantity(quantity));
    }
    
    for(var _p=0;_p&lt;arg1.Participants.length;_p++)
    {
    	var tempparticipant=arg1.Participants[_p];
    	if(tempparticipant.TypeCode.Name==&apos;PRD&apos; || tempparticipant.TypeCode.Name==&apos;DEV&apos;)
    	{
    		var devicelist=GetMergedCodeList(tempparticipant.ParticipantRole.Device.Code);
    		for(var _d=0;_d&lt;devicelist.length;_d++)
    		{
    			var devicename=new org.hl7.fhir.r4.model.Device.DeviceDeviceNameComponent();
    			devicename.setName(devicelist[_d].DisplayName);
    			devicename.setType(Device.DeviceNameType.OTHER);
    			device.addDeviceName(devicename);

    		}

    		if(tempparticipant.ParticipantRole.Entity.Desc.Text!=&apos;&apos; || tempparticipant.ParticipantRole.Entity.Desc.Reference.TEL_URL.Value!=&apos;&apos;)
    		{
    			device.setManufacturer(tempparticipant.ParticipantRole.Entity.Desc.Text!=&apos;&apos;?tempparticipant.ParticipantRole.Entity.Desc.Text.trim():tempparticipant.ParticipantRole.Entity.Desc.Reference.TEL_URL.Value.trim())
    		}
    	}
    }

    for(var _er1=0;_er1&lt;arg1.EntryRelationships.length;_er1++)
    {
    	var er1=arg1.EntryRelationships[_er1];
    	if(er1.hasOwnProperty(&apos;Act&apos;))
    	{
    		
    		if(er1.Act.Text.Text!=&apos;&apos;)
            {
                device.addNote(new Annotation().setText(er1.Act.Text.Text.trim()))
            }
            else if(er1.Act.Text.hasOwnProperty(&apos;Reference&apos;))
            {
                if(er1.Act.Text.Reference.TEL_URL.Value!=&apos;&apos;)
                {
                    device.addNote(new Annotation().setText(er1.Act.Text.Reference.TEL_URL.Value.trim()))
                }
            }
    	}
    }

    device.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(device))));
 //   var oDevice=JSON.parse(parser.encodeResourceToString(device));
   // logger.info(&apos;DeviceResource-&gt;&apos;+parser.encodeResourceToString(device));

    return device;

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>882e0d9b-fd8a-46ad-a4aa-916686cc0763</id>
            <name>EncounterBundle</name>
            <revision>6</revision>
            <lastModified>
              <time>1669212308324</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function EncounterBundle(arg1,text,patientid,bundleId) 
{
   var enc=JSON.parse(arg1);

   if(enc.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=enc.Entries.length;
       bundle.entry=[];
   }


   //looping through entries
   for(var _e=0;_e&lt;enc.Entries.length;_e++)
   {
      var tempentry=enc.Entries[_e].Encounter;
      bundle.entry[_e]={};
      bundle.entry[_e].resource=EncounterResource(tempentry,text,patientid);

      SavefhirResource(bundle.entry[_e].resource,bundleId,enc.Code);

   }//end of entry loop

   //logger.info(&apos;EncounterBundle-&gt;&apos;+JSON.stringify(bundle));
   return clean(bundle);
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>5ff514fe-780e-4d24-a226-e0c5f7aac20a</id>
            <name>EncounterResource</name>
            <revision>50</revision>
            <lastModified>
              <time>1668945134041</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function EncounterResource(arg1,txt,patientid) 
{
    importPackage(org.hl7.fhir.r4.model);
    var encounter = new org.hl7.fhir.r4.model.Encounter();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  

    for(var _id=0;_id&lt;arg1.Ids.length;_id++)
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            encounter.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }
        
    }
   
    if(txt!=&apos;&apos; &amp;&amp; GetNarrative(txt)!=null)
    {
            encounter.setText(GetNarrative(txt))
        }
      
    encounter.setSubject(new Reference().setReference(patientid));
    

    
    encounter.setStatus(Encounter.EncounterStatus.valueOf(MapEncounterStatus(arg1.StatusCode.Code)))    
    
    var codinglist=[];
    var typelist=GetMergedCodeList(arg1.Code);
    //logger.info(&apos;EncounterResource-&gt;&apos;+typelist);
    for(var _type=0;_type&lt;typelist.length;_type++)
    {
        codinglist.push(CodeableConcept(GetCoding(typelist[_type])))
        encounter.setType(codinglist);
    }

    for(var _p=0;_p&lt;arg1.Performers.length;_p++)
    {   
        var tempperformer=arg1.Performers[_p]
        
        if(tempperformer.TypeCode.Name!=&apos;LOC&apos;)
        {
                
            var encounterparticipant=new org.hl7.fhir.r4.model.Encounter.EncounterParticipantComponent();
                
            var tempindividual=AuthortoPractictionerRole(tempperformer.AssignedEntity);
            if(tempindividual!= undefined)
            {

                encounter.addContained(tempindividual);    
            
                encounterparticipant.setIndividual(new Reference().setReference(&apos;#&apos;+new Resource(tempindividual.getId())));
            }

            var tempindividualperson=AuthortoPractictioner(tempperformer.AssignedEntity);
            if(tempindividualperson!= undefined)
            {
                encounter.addContained(tempindividualperson);
            }
            
            var tempindividualorg=AuthortoOrganization(tempperformer.AssignedEntity.Organizations[0]);
            if(tempindividualorg!= undefined)
            {
                encounter.addContained(tempindividualorg);
            }

            if(tempperformer.TypeCode.Name!=&apos;&apos;)
            {
                encounterparticipant.addType(CodeableConcept(MapParticipantType(tempperformer.TypeCode.Name)))  
            }   

            encounter.addParticipant(encounterparticipant)
        }
    }//end of performer loop

    

     
    var encdate=GetEffectiveTimeInfo(arg1);
    
    if(encdate.startdatetime!=&apos;&apos;)
    {
        encounter.setPeriod(new Period().setStartElement(new DateTimeType(formatdate(encdate.startdatetime))));
    }

    if(encdate.enddatetime!=&apos;&apos;)
    {
        encounter.setPeriod(new Period().setStart(new Date(formatdate(encdate.enddatetime))));
    }

    if(arg1.Priority.Code!=&apos;&apos;)
    {
        encounter.setPriority(CodeableConcept(GetCoding(arg1.Priority)))   
    }
      
       

    
    
    //loop through 1st entry relationship
    for(var _e_er1=0;_e_er1&lt;arg1.EntryRelationships.length;_e_er1++)
    {
        var temp_e_er1=arg1.EntryRelationships[_e_er1];

        //start of observation-reason
        if(temp_e_er1.hasOwnProperty(&apos;Observation&apos;))
        {
            encounter.addReasonCode(CodeableConcept(GetCoding(temp_e_er1.Observation.Values[0].CD)));
            
        }// end of observation-reason
         
        //Start of Act-diagnosis
        if(temp_e_er1.hasOwnProperty(&apos;Act&apos;))
        {
              
            for(var _a=0;_a&lt;temp_e_er1.Act.EntryRelationships.length;_a++)
            {
            
                var tmp_condition=temp_e_er1.Act.EntryRelationships[_a];
                var encounterdiagnosis=new org.hl7.fhir.r4.model.Encounter.DiagnosisComponent();

                var tempdiag=ConditionResource(temp_e_er1.Act,txt,patientid);
                if(tempdiag!=undefined)
                {
                    encounter.addContained(tempdiag);    
                    encounterdiagnosis.setCondition(new Reference().setReference(&apos;#&apos;+new Resource(tempdiag.getId())));
                    encounter.addDiagnosis(encounterdiagnosis);
                }
                
                
            }
            
        }// end of Act-diagnosis
        
    }//end of 1st entry relationship
    
    for(var _o=0;_o&lt;arg1.Participants.length&gt;0;_o++)
    {
        var temppart=arg1.Participants[_o];
        if(temppart.TypeCode.Name==&apos;LOC&apos;)
        {
            var tempprovider=ParticipanttoOrganization(temppart.ParticipantRole);
            if(tempprovider!=undefined)
            {
                encounter.addContained(tempprovider);    
                encounter.setServiceProvider(new Reference().setReference(&apos;#&apos;+new Resource(tempprovider.getId())));      
            }
            
        }
        
    }
      
    

    
    encounter.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(encounter))));
   // var oEncounter=JSON.parse(parser.encodeResourceToString(encounter));
    //logger.info(&apos;EncounterResource-&gt;&apos;+parser.encodeResourceToString(encounter));

    return encounter;
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>c0ff72c1-df5c-4007-a1c3-fa318bc08155</id>
            <name>ExternalDocumentReference</name>
            <revision>5</revision>
            <lastModified>
              <time>1669213834374</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function ExternalDocumentReference(arg1,patientid,authenticator,custodian) 
{
    importPackage(org.hl7.fhir.r4.model);
    var documentreference = new org.hl7.fhir.r4.model.DocumentReference();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  
   
    for(var _id=0;_id&lt;arg1.ExternalDocument.Ids.length;_id++)
    {
        if(arg1.ExternalDocument.Ids[_id].Extension!=&apos;&apos;)
        {
            documentreference.addIdentifier().setSystem(GetSystem(arg1.ExternalDocument.Ids[_id].Root)).setValue(arg1.ExternalDocument.Ids[_id].Extension);   
        }  
    }

    documentreference.setStatus(Enumerations.DocumentReferenceStatus.CURRENT)

    var documentcomponent=new org.hl7.fhir.r4.model.DocumentReference.DocumentReferenceContentComponent();

    if(arg1.ExternalDocument.Text.Text!=&apos;&apos;)
    {
        var attachment=new org.hl7.fhir.r4.model.Attachment();
        attachment.setTitle(arg1.ExternalDocument.Text.Text);
    
        if(arg1.ExternalDocument.Text.MediaType!=&apos;&apos;)
        {
            attachment.setContentType(arg1.ExternalDocument.Text.MediaType)    
        }    
    
        documentcomponent.setAttachment(attachment);
        documentreference.addContent(documentcomponent)
    }
    else if(arg1.ExternalDocument.Text.Reference.hasOwnProperty(&apos;TEL_URL&apos;))
    {
            if(arg1.ExternalDocument.Text.Reference.TEL_URL.Value!=&apos;&apos;)
        {
            var attachment=new org.hl7.fhir.r4.model.Attachment();
            attachment.setTitle(arg1.ExternalDocument.Text.Reference.TEL_URL.Value);
    
            if(arg1.ExternalDocument.Text.MediaType!=&apos;&apos;)
            {
                attachment.setContentType(arg1.ExternalDocument.Text.MediaType)    
            }    
    
            documentcomponent.setAttachment(attachment);
            documentreference.addContent(documentcomponent)
    
        }
    }
    

    if(authenticator!=&apos;&apos; &amp;&amp; authenticator!=undefined)
    {
        documentreference.setAuthenticator(new Reference().setReference(authenticator));
    }

    if(custodian!=&apos;&apos; &amp;&amp; custodian!=undefined)
    {
        documentreference.setCustodian(new Reference().setReference(custodian));
    }

    documentreference.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(documentreference))));
    //var oDocumentReference=JSON.parse(parser.encodeResourceToString(documentreference));
    
    
    if(countkey(parser.encodeResourceToString(documentreference))&gt;2)
    {
        return documentreference
    }
         
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>cfce7c21-3f6d-4158-95bc-59c076b803c9</id>
            <name>FamilyMemberHistoryBundle</name>
            <revision>5</revision>
            <lastModified>
              <time>1669212309013</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function FamilyMemberHistoryBundle(arg1,text,patientid,bundleId) 
{
   
    
   var obj=JSON.parse(arg1);
   
   if(obj.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=obj.Entries.length;
       bundle.entry=[];
   }
   

   //looping through entries
   for(var _a=0;_a&lt;obj.Entries.length;_a++)
   {
        var tempentry=obj.Entries[_a].Organizer;
        bundle.entry[_a]={}
        bundle.entry[_a].resource=FamilyMemberHistoryResource(tempentry,text,patientid)

        SavefhirResource(bundle.entry[_a].resource,bundleId,obj.Code);
   }  

   //logger.info(JSON.stringify(bundle)) 
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>e0ca4962-1177-45e9-82c7-b572515f7fbe</id>
            <name>FamilyMemberHistoryResource</name>
            <revision>10</revision>
            <lastModified>
              <time>1668243296846</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
function FamilyMemberHistoryResource(arg1,txt,patientid)
{
    importPackage(org.hl7.fhir.r4.model);
    var familyhistory = new org.hl7.fhir.r4.model.FamilyMemberHistory();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  

    for(var _id=0;_id&lt;arg1.Ids.length;_id++)
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            familyhistory.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }
    }

    if(txt!=&apos;&apos; &amp;&amp; GetNarrative(txt)!=null)
    {
        familyhistory.setText(GetNarrative(txt))
    }

    familyhistory.setStatus(FamilyMemberHistory.FamilyHistoryStatus.COMPLETED);
    familyhistory.setPatient(new Reference().setReference(patientid));  
    familyhistory.setRelationship(CodeableConcept(GetCoding(arg1.Subject.RelatedSubject.Code)));

    var sex=GetMergedCodeList(arg1.Subject.RelatedSubject.SubjectPerson.AdministrativeGenderCode);
    if(sex.length&gt;0)
    {
        familyhistory.setSex(CodeableConcept(GetCoding(sex[0])));    
    }

    if(arg1.Subject.RelatedSubject.SubjectPerson.BirthTime.Value!=&apos;&apos;)
    {
        familyhistory.setBorn(new StringType(arg1.Subject.RelatedSubject.SubjectPerson.BirthTime.Value));    
    }

    if(arg1.Subject.RelatedSubject.SubjectPerson.DeceasedTime.Value!=&apos;&apos;)
    {
        familyhistory.setDeceased(new StringType(arg1.Subject.RelatedSubject.SubjectPerson.DeceasedTime.Value));    
    }
    
    for(var _c=0;_c&lt;arg1.Components.length&gt;0;_c++)
    {
        var tempcondition=arg1.Components[_c].Observation

        var conditioncomponent=new org.hl7.fhir.r4.model.FamilyMemberHistory.FamilyMemberHistoryConditionComponent();
        conditioncomponent.setCode(CodeableConcept(GetCoding(tempcondition.Values[0].CD)));

        for(var _er1=0;_er1&lt;tempcondition.EntryRelationships.length&gt;0;_er1++)
        {
            var er1=tempcondition.EntryRelationships[_er1];
            if(er1.TypeCode.Name==&apos;CAUS&apos;)
            {   
                var outcome=GetMergedCodeList(er1.Observation.Values[0].CD);
                if(outcome.length&gt;0)
                {
                    conditioncomponent.setOutcome(CodeableConcept(GetCoding(outcome[0])));    
                }
            }

            if(er1.TypeCode.Name==&apos;SUBJ&apos;)
            {   
                
                if(er1.Observation.Code.Code==&apos;397659008&apos;)
                {
                	if(er1.Observation.Values[0].PQ.Value!=&apos;&apos;)
                	{
                		conditioncomponent.setOnset(new Age().setValue(er1.Observation.Values[0].PQ.Value).setCode(er1.Observation.Values[0].PQ.Unit));
                	}
                    
                }
            }    
        }
        

        familyhistory.addCondition(conditioncomponent);
    }
    familyhistory.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(familyhistory))));
    //var oFamilyHistory=JSON.parse(parser.encodeResourceToString(familyhistory));
    
    //logger.info(&apos;familyhistory-&gt;&apos;+parser.encodeResourceToString(familyhistory));
    if(countkey(parser.encodeResourceToString(familyhistory))&gt;2)
    {
        return familyhistory
    }
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>240d7479-ebde-49c9-a93b-1921271cae56</id>
            <name>FunctionalStatusBundle</name>
            <revision>6</revision>
            <lastModified>
              <time>1669212310408</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function FunctionalStatusBundle(arg1,text,patientid,bundleId) 
{
   
    
   var obj=JSON.parse(arg1);
   
   if(obj.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=obj.Entries.length;
       bundle.entry=[];
   }
   

   //looping through entries
   for(var _a=0;_a&lt;obj.Entries.length;_a++)
   {
      if(obj.Entries[_a].hasOwnProperty(&apos;Observation&apos;))
      {
        var temp={};
        temp.resource=ObservationResource(obj.Entries[_a].Observation,text,patientid,obj.Code);
        SavefhirResource(temp.resource,bundleId,obj.Code);
        bundle.entry.push(temp)
      }
   }  

   //logger.info(&apos;FunctionalStatusBundle-&gt;&apos;+JSON.stringify(bundle)) 
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>ae30683e-1323-42ed-83a9-19a52f2d6404</id>
            <name>GetCoding</name>
            <revision>18</revision>
            <lastModified>
              <time>1668444199999</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetCoding(arg1)
{
	//logger.info(&apos;GetCoding-&gt;&apos;+JSON.stringify(arg1));
    	importPackage(org.hl7.fhir.r4.model);

    var coding=new Coding();

    if(arg1.CodeSystem!=&apos;&apos;)
    {
    		if(arg1.CodeSystem.split(&quot;.&quot;).length - 1&gt;2)
    		{
    			coding.setSystem(&quot;urn:oid:&quot;+arg1.CodeSystem);		
    		}
    		else
    		{
    			coding.setSystem(arg1.CodeSystem);		
    		}
      
    }

    if(arg1.Code!=&apos;&apos;)
    {
      coding.setCode(arg1.Code);
    }

   	if(arg1.DisplayName!=&apos;&apos;)
	{
	    coding.setDisplay(arg1.DisplayName);
	}
	else if(arg1.hasOwnProperty(&apos;OriginalText&apos;))
	{
	    if(arg1.OriginalText.hasOwnProperty(&apos;Text&apos;))
	    {
	        if(arg1.OriginalText.Text!=&apos;&apos;)
	        {
	            coding.setDisplay(arg1.OriginalText.Text.trim());
	        }
	    }
	
	}

    return coding;
             
}  </code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>ea0cd7de-ee71-42ab-b414-2ceb8c9a2826</id>
            <name>GetCodingList</name>
            <revision>13</revision>
            <lastModified>
              <time>1667841787378</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
function GetCodingList(arg1)
{
    //logger.info(&apos;GetCodingList-&gt;&apos;+JSON.stringify(arg1))
    importPackage(org.hl7.fhir.r4.model);
	arg1=GetMergedCodeList(arg1);
	//logger.info(&apos;GetCodingList-&gt;&apos;+JSON.stringify(arg1))
    var result=[];

    for(var _c=0;_c&lt;arg1.length&gt;0;_c++)
    {
        var temp=arg1[_c];

        var coding=new Coding();
        if(temp.CodeSystem!=&apos;&apos;)
        {
            if(temp.CodeSystem.split(&quot;.&quot;).length - 1&gt;2)
            {
                coding.setSystem(&quot;urn:oid:&quot;+temp.CodeSystem);       
            }
            else
            {
                coding.setSystem(temp.CodeSystem);      
            }
        }

        if(temp.Code!=&apos;&apos;)
        {
          coding.setCode(temp.Code);
        }

        if(temp.DisplayName!=&apos;&apos;)
        {
            
            coding.setDisplay(temp.DisplayName);
        }
        else if(temp.hasOwnProperty(&apos;OriginalText&apos;))
        {
            if(temp.OriginalText.Text!=&apos;&apos;)
            {
                coding.setDisplay(temp.OriginalText.Text);
            }
        }

        result.push(coding)
    }
    

    
    return result;
             
}  </code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>8e6365bf-e95e-41d3-930a-9d759b248966</id>
            <name>GetMergedCodeList</name>
            <revision>19</revision>
            <lastModified>
              <time>1667836482114</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetMergedCodeList(arg1)
{
	var log=0;
   var obj=[];
   var referencetext=&apos;&apos;;
   if(log==1)
   {
   	logger.info(&apos;GetMergedCodeList in-&gt;&apos;+JSON.stringify(arg1));
   }

   if(arg1.hasOwnProperty(&apos;Code&apos;) &amp;&amp; arg1.hasOwnProperty(&apos;DisplayName&apos;))
   {
   		if(arg1.hasOwnProperty(&apos;OriginalText&apos;))
		{
			if(arg1.OriginalText.hasOwnProperty(&apos;Reference&apos;))
			{
				if(arg1.OriginalText.Reference.hasOwnProperty(&apos;TEL_URL&apos;))
				{
					if(arg1.OriginalText.Reference.TEL_URL.Value!=&apos;&apos;)
					{
						referencetext=arg1.OriginalText.Reference.TEL_URL.Value
						 if(log==1)
   						{	
							logger.info(&apos;GetMergedCodeList:referencetext-&gt;&apos;+	referencetext)
   						}
					}
				}
			}
		}
    
    	if(arg1.Code!=&apos;&apos; || arg1.DisplayName!=&apos;&apos; || referencetext!=&apos;&apos;)
    	{
    		var res={};
    		
        	res.Code=arg1.Code;
        	res.CodeSystem=arg1.CodeSystem;
        	res.CodeSystemName=arg1.CodeSystemName;
        	res.DisplayName=arg1.DisplayName;
        	if(log==1)
   		{
        		logger.info(&apos;GetMergedCodeList DisplayName-&gt;&apos;+res.DisplayName);
        		logger.info(&apos;GetMergedCodeList referencetext-&gt;&apos;+referencetext);
   		}

		if(referencetext!=&apos;&apos; &amp;&amp; res.DisplayName==&apos;&apos;)
		{
			res.DisplayName=referencetext;
		}
		
		if(log==1)
   		{
            logger.info(&apos;GetMergedCodeList main-&gt;&apos;+JSON.stringify(res));
   		}
          obj.push(res);

        }
        
   	}

   if(arg1.hasOwnProperty(&apos;Translations&apos;))
   {
        for(var _t=0;_t&lt;arg1.Translations.length;_t++)
        {
            var res={};

            res.Code=arg1.Translations[_t].Code;
            res.CodeSystem=arg1.Translations[_t].CodeSystem;
            res.CodeSystemName=arg1.Translations[_t].CodeSystemName;
            res.DisplayName=arg1.Translations[_t].DisplayName!=&apos;&apos;?arg1.Translations[_t].DisplayName:arg1.Translations[_t].OriginalText.Text;
            if(log==1)
   		  {
            	logger.info(&apos;GetMergedCodeList Translations-&gt;&apos;+JSON.stringify(res));
   		  }
            obj.push(res)
        }
   }

    if(log==1)
   {
	logger.info(&apos;GetMergedCodeList out-&gt;&apos;+JSON.stringify(obj));
   }
   return obj;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>212dd230-1a0e-4820-93f6-236ffd9e59d5</id>
            <name>GetNarrative</name>
            <revision>6</revision>
            <lastModified>
              <time>1668243065730</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetNarrative(arg1) {
	// TODO: Enter code here
	importPackage(org.hl7.fhir.r4.model);
	var narrative=new Narrative();
	narrative.setStatus(Narrative.NarrativeStatus.GENERATED);
	narrative.setDivAsString(String(arg1)); 
	//return narrative;
	return null;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>4ae44f57-065a-40e6-9f60-eac670162cc8</id>
            <name>GetPatientResource_hapi</name>
            <revision>69</revision>
            <lastModified>
              <time>1668945251757</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetPatientResource_hapi(_recordTargets,bundleId) 
{
    importPackage(org.hl7.fhir.r4.model);
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();
    channelMap.put(&apos;_recordTargets&apos;, JSON.stringify(_recordTargets));
    if (_recordTargets != null) 
    {
        var _recordTargetsSize = _recordTargets.length;
        var _count = 0;
        if (_recordTargetsSize &gt; 0) 
        {
            //initializing Patient resource
            var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();

            var patient = new org.hl7.fhir.r4.model.Patient();

            
            for (; _count &lt; _recordTargetsSize; _count++) 
            {

                //initializing Patient identifier
                var _patientIds = _recordTargets[_count].PatientRole.Ids;
                if (_patientIds != null) 
                {
                    var _patientIdsSize = _patientIds.length;
                    var _i = 0;
                    
                    for (; _i &lt; _patientIdsSize; _i++) 
                    {
                        patient.addIdentifier().setSystem(&quot;urn:oid:&quot;+_patientIds[_i].Root).setValue(_patientIds[_i].Extension);

                    }

                     //Name structure
                    var _patientnamedetails = _recordTargets[_count].PatientRole.Patient.Names;
                    if (_patientnamedetails != null) 
                    {
                        var _patientnamedetailsSize = _patientnamedetails.length;
                        var _l = 0;
                        if (_patientnamedetailsSize &gt; 0) 
                        {
                        
                            for (; _l &lt; _patientnamedetailsSize; _l++) 
                            {
                                var pname=patient.addName();
                                pname.setFamily(_patientnamedetails[_l].Families[0].ENXP_ST)
                                pname.addGiven(_patientnamedetails[_l].Givens[0].ENXP_ST)
                                
                                if(_patientnamedetails[_l].Givens[1] != null &amp;&amp; _patientnamedetails[_l].Givens[1] != undefined) 
                                {
                                    pname.addGiven(_patientnamedetails[_l].Givens[1].ENXP_ST);
                                }

                                if(_patientnamedetails[_l].EntityNameUses[0].Name!=&apos;&apos;)
                                {
                                    pname.setUse(HumanName.NameUse.valueOf(MapEntityNameUse(_patientnamedetails[_l].EntityNameUses[0].Name)));  
                                }
                            }
                        }
                    }
                }

                //Telecom

                var _patientcontacts = _recordTargets[_count].PatientRole.Telecoms;
                if (_patientcontacts != null) 
                {
                    var _patientcontactsSize = _patientcontacts.length;
                    var _k = 0;
                    if (_patientcontactsSize &gt; 0) 
                    {
                        
                        for (; _k &lt; _patientcontactsSize; _k++) 
                        {

                                    var pcontact=patient.addTelecom()
                                    if(_patientcontacts[_k].TEL_URL.Value!=&apos;&apos;)
                                    {
                                        pcontact.setValue(_patientcontacts[_k].TEL_URL.Value)
                                    }
                                if(_patientcontacts[_k].TelecomAddress[0].Name!=&apos;&apos;)
                                {
                                        pcontact.setSystem(ContactPoint.ContactPointSystem.valueOf(MapTelecomSystem(_patientcontacts[_k].TelecomAddress[0].Name)));
                                }
                                if(_patientcontacts[_k].TelecomAddress[0].Name!=&apos;&apos;)
                                {
                                        pcontact.setUse(ContactPoint.ContactPointUse.valueOf(MapTelecomUse(_patientcontacts[_k].TelecomAddress[0].Name)));
                                }
                           
                            

                        }
                    }
                }

                var gender=GetMergedCodeList(_recordTargets[_count].PatientRole.Patient.AdministrativeGenderCode);
                if(gender.length&gt;0)
                {
                    //logger.info(&apos;PatientResource-&gt;&apos;+gender[0].Code)
                    patient.setGender(Enumerations.AdministrativeGender.valueOf(MapGender(gender[0].Code))) 
                }



                if(_recordTargets[_count].PatientRole.Patient.BirthTime.Value!=&apos;&apos;)
                {
                    patient.setBirthDate(new Date(parseCCDBirthDate(_recordTargets[_count].PatientRole.Patient.BirthTime.Value)));  
                }

                
                
    
                
                patient.setAddress(AddAddressNode(_recordTargets[_count].PatientRole.Address))

                var maritalstatus=GetMergedCodeList(_recordTargets[_count].PatientRole.Patient.MaritalStatusCode);

                //marital
                if (maritalstatus.length&gt;0) 
                {
                    
                    var maritalcoding=new Coding();

                    if(maritalstatus[0].CodeSystem!=&apos;&apos;)
                    {
                        maritalcoding.setSystem(&quot;urn:oid:&quot;+maritalstatus[0].CodeSystem) 
                    }

                    if(maritalstatus[0].Code!=&apos;&apos;)
                    {
                        maritalcoding.setCode(maritalstatus[0].Code)    
                    }

                    if(maritalstatus[0].DisplayName!=&apos;&apos;)
                    {
                        maritalcoding.setDisplay(maritalstatus[0].DisplayName)  
                    }
                    

                    patient.setMaritalStatus(CodeableConcept(maritalcoding))
                    
                }


                //ethnicity
                if (_recordTargets[_count].PatientRole.Patient.EthnicGroupCode.DisplayName != &apos;&apos; || _recordTargets[_count].PatientRole.Patient.EthnicGroupCode.Code != &apos;&apos;) 
                {

                    var ethnicity = patient.addExtension();
                    ethnicity.setUrl(&apos;http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity&apos;);


                    var ombCoding = new Coding();

                    ombCoding.setSystem(&quot;urn:oid:&quot;+_recordTargets[_count].PatientRole.Patient.EthnicGroupCode.CodeSystem);
                    ombCoding.setCode(_recordTargets[_count].PatientRole.Patient.EthnicGroupCode.Code);
                    ombCoding.setDisplay(_recordTargets[_count].PatientRole.Patient.EthnicGroupCode.DisplayName);

                     // Add category to ethnicity extension
                    var ombCategory = ethnicity.addExtension();

                    ombCategory.setUrl(&quot;ombCategory&quot;);
                    ombCategory.setValue(ombCoding);


                    // Add text display to ethnicity extension
                    var ethnicityText = ethnicity.addExtension();
                    ethnicityText.setUrl(&quot;text&quot;);
                    ethnicityText.setValue(new StringType(_recordTargets[_count].PatientRole.Patient.EthnicGroupCode.DisplayName));

 

                }
                
                
                //religion
                var religiousaffiliation=GetMergedCodeList(_recordTargets[_count].PatientRole.Patient.ReligiousAffiliationCode);
                if (religiousaffiliation.length&gt;0) 
                {
                    var religion = patient.addExtension();
                    religion.setUrl(&apos;http://hl7.org/fhir/StructureDefinition/patient-religion&apos;);


                    //Assign Coding
                    var religioncoding = new Coding();
                    religioncoding.setSystem(&quot;urn:oid:&quot;+religiousaffiliation[0].CodeSystem);
                    religioncoding.setCode(religiousaffiliation[0].Code);
                    religioncoding.setDisplay(religiousaffiliation[0].DisplayName);

                    //Assign Codeable COncept
                    religion.setValue(new CodeableConcept(religioncoding));

                    
                }
                

                var racelist=GetMergedCodeList(_recordTargets[_count].PatientRole.Patient.RaceCode);
                //race
                if (racelist.length&gt;0) 
                {
                    
                    var race = patient.addExtension();
                    race.setUrl(&apos;http://hl7.org/fhir/us/core/StructureDefinition/us-core-race&apos;);


                    var ombCoding = new Coding();

                    ombCoding.setSystem(&quot;urn:oid:&quot;+racelist[0].CodeSystem);
                    ombCoding.setCode(racelist[0].Code);
                    ombCoding.setDisplay(racelist[0].DisplayName);

                     // Add category to ethnicity extension
                    var ombCategory = race.addExtension();

                    ombCategory.setUrl(&quot;ombCategory&quot;);
                    ombCategory.setValue(ombCoding);


                    // Add text display to ethnicity extension
                    var raceText = race.addExtension();
                    raceText.setUrl(&quot;text&quot;);
                    raceText.setValue(new StringType(racelist[0].DisplayName));

                    

                }


                var temporg=OrganizationResource(_recordTargets[_count].PatientRole.Organization);
                 if(temporg!=undefined &amp;&amp; temporg!=null)
                 {
                    patient.setManagingOrganization(new Reference().setReference(&apos;#&apos;+new Resource(temporg.getId())));
                    patient.addContained(temporg);  
                 }
                 

                var _patientLanguageCommunications = _recordTargets[_count].PatientRole.Patient.LanguageCommunications;
                if (_patientLanguageCommunications != null) 
                {
                    var _patientLanguageCommunicationsSize = _patientLanguageCommunications.length;
                    var _i = 0;
                    if (_patientLanguageCommunicationsSize &gt; 0) 
                    {
                        for (; _i &lt; _patientLanguageCommunicationsSize; _i++)
                        {
                            var patientlanguage=new Coding();

                            var olanguage=Maplanguage(_patientLanguageCommunications[_i].LanguageCode);

                            if(olanguage.code!=&apos;&apos;)
                            {
                                patientlanguage.setCode(olanguage.code);
                            }

                            if(olanguage.display!=&apos;&apos;)
                            {
                                patientlanguage.setDisplay(olanguage.display);
                            }

                            if(olanguage.system!=&apos;&apos;)
                            {
                                patientlanguage.setSystem(olanguage.system);
                            }
                            
                            var languagecomponent= new org.hl7.fhir.r4.model.Patient.PatientCommunicationComponent();
                            languagecomponent.setLanguage(CodeableConcept(patientlanguage));
                            
                        if(_patientLanguageCommunications[_i].hasOwnProperty(&apos;PreferenceInd&apos;))
                        {
                            if(_patientLanguageCommunications[_i].PreferenceInd.Value!=&apos;&apos;)
                                 {
                                    languagecomponent.setPreferredElement(new BooleanType(_patientLanguageCommunications[_i].PreferenceInd.Value)); 
                                 }  
                        }
                            
                            
                            patient.addCommunication(languagecomponent)


                        }
                    }
                }


     

                var _patientGuardians = _recordTargets[_count].PatientRole.Patient.Guardians;
                if (_patientGuardians != null) 
                {
                    var _patientGuardiansSize = _patientGuardians.length;
                    channelMap.put(&apos;_patientGuardiansSize&apos;, _patientGuardiansSize);
                    var _i = 0;
                    if (_patientGuardiansSize &gt; 0 &amp;&amp; _patientGuardians[_i].Person.Names[0].Givens[0].ENXP_ST!=&apos;&apos;) 
                    {
                        var patientcontact=patient.addContact();
                        var _c=0;
                        for (; _c &lt; _patientGuardiansSize; _c++) 
                        {
                            
                            

                            if (_patientGuardians[_i].Code.DisplayName != &apos;&apos; &amp;&amp; _patientGuardians[_i].Code.Code != &apos;&apos;) 
                            {
                                patientcontact.addRelationship().addCoding().setCode(_patientGuardians[_i].Code.Code).setDisplay(_patientGuardians[_i].Code.DisplayName).setSystem(_patientGuardians[_i].Code.CodeSystemName)
                            }

                            if (_patientGuardians[_i].Person.Names.length &gt; 0) 
                            {

                                if(_patientGuardians[_i].Person.Names[0].Givens.length&gt;1)
                                {
                                    patientcontact.setName(new HumanName().setFamily(_patientGuardians[_i].Person.Names[0].Families[0].ENXP_ST).addGiven(_patientGuardians[_i].Person.Names[0].Givens[0].ENXP_ST).addGiven(_patientGuardians[_i].Person.Names[0].Givens[1].ENXP_ST));    
                                }
                                else
                                {
                                    patientcontact.setName(new HumanName().setFamily(_patientGuardians[_i].Person.Names[0].Families[0].ENXP_ST).addGiven(_patientGuardians[_i].Person.Names[0].Givens[0].ENXP_ST));    
                                }

                            }

                            if (_patientGuardians[_i].Telecoms.length &gt; 0) 
                            {
                                for (var _t = 0; _t &lt; _patientGuardians[_i].Telecoms.length; _t++) 
                                {
                                    var ptelecom=patientcontact.addTelecom()
                                    ptelecom.setValue(_patientGuardians[_i].Telecoms[_t].TEL_URL.Value)
                                    if(_patientGuardians[_i].Telecoms[_t].TelecomAddress[0].Name!=&apos;&apos;)
                                    {
                                        ptelecom.setSystem(ContactPoint.ContactPointSystem.valueOf(MapTelecomSystem(_patientGuardians[_i].Telecoms[_t].TelecomAddress[0].Name)));
                                        ptelecom.setUse(ContactPoint.ContactPointUse.valueOf(MapTelecomUse(_patientGuardians[_i].Telecoms[_t].TelecomAddress[0].Name)));
                                    }

                                }

                            }

                            if (_patientGuardians[_i].Address.length &gt; 0) 
                            {

                                var pcontactaddress=new Address();

                                

                                if(_patientGuardians[_i].Address[0].UsablePeriods[0].Value!=&apos;&apos;)
                                {
                                    pcontactaddress.setUse(Address.AddressUse.valueOf(MapAddressUse(_patientGuardians[_i].Address[0].PostalAddress[0].Value)))
                                }
                                
                                if(_patientGuardians[_i].Address[0].StreetAddressLines[0].ADXP_ST!=&apos;&apos;)
                                {
                                    pcontactaddress.addLine(_patientGuardians[_i].Address[0].StreetAddressLines[0].ADXP_ST);
                                }

                                if(_patientGuardians[_i].Address[0].Cities[0].ADXP_ST!=&apos;&apos;)
                                {
                                    pcontactaddress.setCity(_patientGuardians[_i].Address[0].Cities[0].ADXP_ST)
                                }

                                if(_patientGuardians[_i].Address[0].States[0].ADXP_ST!=&apos;&apos;)
                                {
                                    pcontactaddress.setState(_patientGuardians[_i].Address[0].States[0].ADXP_ST);
                                }
                                
                                if(_patientGuardians[_i].Address[0].Countries[0].ADXP_ST!=&apos;&apos;)
                                {
                                    pcontactaddress.setPostalCode(_patientGuardians[_i].Address[0].Countries[0].ADXP_ST);
                                }

                                if(_patientGuardians[_i].Address[0].Countries[0].ADXP_ST!=&apos;&apos;)
                                {
                                    pcontactaddress.setCountry(_patientGuardians[_i].Address[0].Countries[0].ADXP_ST);
                                }
                                
                                
                                patientcontact.setAddress(pcontactaddress);
                            }
                        }
                    }
                }
            }


        }
        patient.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(patient))));
        var oPatient=JSON.parse(parser.encodeResourceToString(patient));
        //logger.info(patient.getId())
        channelMap.put(&apos;patientid&apos;,&apos;Patient/&apos;+patient.getId());

        SavefhirResource(patient,bundleId,null);
        
    }
    return oPatient;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>e207ba31-5c06-4972-b4e3-ad33a1ffbf29</id>
            <name>GetQuantity</name>
            <revision>2</revision>
            <lastModified>
              <time>1667233481631</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
function GetQuantity(arg1)
{
    importPackage(org.hl7.fhir.r4.model);
    
    var qty=new Quantity()
    if(arg1.hasOwnProperty(&apos;PQ&apos;))
    {
    		if(arg1.PQ.Value!=&apos;&apos;)
	    {
	        qty.setValue(arg1.PQ.Value);
	    }
	
	    if(arg1.PQ.Value!=&apos;&apos;)
	    {
	        qty.setUnit(arg1.PQ.Unit);
	    }	
    }
    else
    {
    		if(arg1.Value!=&apos;&apos;)
	    {
	        qty.setValue(arg1.Value);
	    }
	
	    if(arg1.Value!=&apos;&apos;)
	    {
	        qty.setUnit(arg1.Unit);
	    }
    }
    
         
    return qty
             
}  </code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>e734e320-3e08-476d-b441-7fdf07f17d8b</id>
            <name>GetResourcefromDb</name>
            <revision>3</revision>
            <lastModified>
              <time>1668098719768</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetResourcefromDb(_fhirresourcedataid)
{
   var _dbConn;

   try 
   {
      _dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.cj.jdbc.Driver&apos;,&apos;jdbc:mysql://localhost:3306/genzeon&apos;,&apos;root&apos;,&apos;test&apos;);

      var sql=&quot;select resourceType,ResourceData,resourceId from fhirresourcedata where fhirresourcedataid=&apos;&quot;+_fhirresourcedataid+&quot;&apos;&quot;;
      _result = _dbConn.executeCachedQuery(sql);

      var _oResult={};
      while(_result.next())
      {
         _oResult.resourceType=_result.getString(&quot;resourceType&quot;);
         _oResult.ResourceData=_result.getString(&quot;ResourceData&quot;);
         _oResult.resourceId=_result.getString(&quot;resourceId&quot;);
      } 
      
      return _oResult;
   } 
   finally 
   {
      if (_dbConn) 
      { 
         _dbConn.close();
      }
   }

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>c36adfb3-f706-427f-89b9-c20de3391925</id>
            <name>GetSystem</name>
            <revision>2</revision>
            <lastModified>
              <time>1666607287703</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetSystem(arg1) {
	// TODO: Enter code here
	if(arg1!=&apos;&apos;)
    {
    	if(arg1.split(&quot;.&quot;).length - 1&gt;2)
    	{
    		var value=&quot;urn:oid:&quot;+arg1;		
    	}
    	else
    	{
    		var value=arg1;		
    	}
      
    }
     return value
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>6b6fcf23-2f72-42b3-825c-8ef2f100aa64</id>
            <name>GetValueNode</name>
            <revision>4</revision>
            <lastModified>
              <time>1667119362522</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function GetValueNode(arg1)
{
   importPackage(org.hl7.fhir.r4.model);
   
   //logger.info(&apos;GetValueNode-&gt;&apos;+JSON.stringify(arg1));

   if(arg1!=undefined &amp;&amp; arg1!=null)
   {
      //logger.info(&apos;GetValueNode-&gt;CD&apos;+JSON.stringify(GetCodingList(arg1.CD)));
      if(GetCodingList(arg1.CD).length&gt;0)
      {
         return new CodeableConcept().setCoding(GetCodingList(arg1.CD));
      }
      else if(GetCodingList(arg1.CE).length&gt;0)
      {
         return new CodeableConcept().setCoding(GetCodingList(arg1.CE));
      }
      else if(arg1.PQ.Value!=&apos;&apos;)
      {
         return GetQuantity(arg1.PQ);
      }
      else if(arg1.IVL_PQ.Low.PQ.Value!=&apos;&apos; &amp;&amp; arg1.IVL_PQ.High.PQ.Value!=&apos;&apos;)
      {
         var valuerange=new Range();
         valuerange.setLow(GetQuantity(arg1.IVL_PQ.Low.PQ));
         valuerange.setHigh(GetQuantity(arg1.IVL_PQ.High.PQ));
         return valuerange;

      }
      else if(arg1.IVL_PQ.Low.PQ.Value!=&apos;&apos;)
      {
         return GetQuantity(arg1.IVL_PQ.Low.PQ);
      }
      else if(arg1.IVL_PQ.High.PQ.Value!=&apos;&apos;)
      {
         return GetQuantity(arg1.IVL_PQ.High.PQ);
      }
      else if(arg1.IVL_PQ.SXCM_PQ.PQ.Value!=&apos;&apos;)
      {
         return GetQuantity(arg1.IVL_PQ.SXCM_PQ.PQ);
      }
      else if(arg1.REAL.Value!=&apos;&apos;)
      {
         return new StringType(arg1.REAL.Value);
      }
      else if(arg1.hasOwnProperty(&apos;ST&apos;))
      {
         if(arg1.hasOwnProperty(&apos;Value&apos;))
         {
            if(arg1.ST.Value!=&apos;&apos;)
            {
               return new StringType(arg1.ST.Value);
            }
         }
         else
         {
            if(arg1.ST!=&apos;&apos;)
            {
               return new StringType(arg1.ST);
            }
         }
         
      }
   }
   
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>02801c95-edca-4aa1-a7ab-cc14ad7cb707</id>
            <name>ImmunizationBundle</name>
            <revision>7</revision>
            <lastModified>
              <time>1669212311186</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function ImmunizationBundle(arg1,text,patientid,bundleId) 
{
   
    
   var obj=JSON.parse(arg1);
   
   if(obj.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=obj.Entries.length;
       bundle.entry=[];
   }
   

   //looping through entries
   for(var _a=0;_a&lt;obj.Entries.length;_a++)
   {
        var temp={};
        temp.resource=ImmunizationResource(obj.Entries[_a].SubstanceAdministration,text,patientid);

        SavefhirResource(temp.resource,bundleId,obj.Code);
      
   }  

   //logger.info(&apos;Immunization Bundle-&gt;&apos;+JSON.stringify(bundle)) 
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>160024f7-3c07-446b-b49e-c682becff8ca</id>
            <name>ImmunizationResource</name>
            <revision>13</revision>
            <lastModified>
              <time>1668945458223</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
function ImmunizationResource(arg1,txt,patientid)
{
    importPackage(org.hl7.fhir.r4.model);
    var immunization = new org.hl7.fhir.r4.model.Immunization();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  

    for(var _id=0;_id&lt;arg1.Ids.length;_id++)
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            immunization.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }  
    }

    if(txt!=&apos;&apos; &amp;&amp; GetNarrative(txt)!=null)
    {
        immunization.setText(GetNarrative(txt))
    }

    immunization.setStatus(Immunization.ImmunizationStatus.valueOf(MapImmunizationStatus(arg1.StatusCode.Code,arg1.NegationIndicator)))
    immunization.setVaccineCode(new CodeableConcept().setCoding(GetCodingList(arg1.Consumable.ManufacturedProduct.Material.Code)))
    immunization.setPatient(new Reference().setReference(patientid));  

    var tempdate=GetEffectiveTimeInfo(arg1);
    immunization.setOccurrence(new DateTimeType(formatdate(tempdate.startdatetime)))
    
    if(arg1.Authors[0].Time.Value!=&apos;&apos;)
    {
        immunization.setRecordedElement(new DateTimeType(formatdate(arg1.Authors[0].Time.Value)))
    }

    var tempmanufacturer=OrganizationResource(arg1.Consumable.ManufacturedProduct.Organization);
    if(tempmanufacturer!=undefined)
    {
        immunization.addContained(tempmanufacturer);
        immunization.setManufacturer(new Reference(&apos;#&apos;+new Resource(tempmanufacturer.getId())));    
    }
    

    if(arg1.Consumable.ManufacturedProduct.Material.LotNumberText!=&apos;&apos;)
    {
        immunization.setLotNumber(arg1.Consumable.ManufacturedProduct.Material.LotNumberText);    
    }
    
    if(arg1.ApproachSiteCodes!=null)
    {
        immunization.setSite(new CodeableConcept().setCoding(GetCodingList(arg1.ApproachSiteCodes)))    
    }

    if(arg1.RouteCode!=null)
    {
        immunization.setRoute(new CodeableConcept().setCoding(GetCodingList(arg1.RouteCode)))    
    }

    if(arg1.DoseQuantity.SXCM_PQ.PQ.Value!=&apos;&apos;)
    {
        immunization.setDoseQuantity(GetQuantity(arg1.DoseQuantity.SXCM_PQ))
    }
    
    if(arg1.Performers.length&gt;0)
    {
        if(arg1.Performers[0].TypeCode.Name==&apos;PRF&apos;)
        {
            var performer=new org.hl7.fhir.r4.model.Immunization.ImmunizationPerformerComponent();
        
            var tempactor=AuthortoPractictionerRole(arg1.Performers[0].AssignedEntity);
            if(tempactor!= undefined)
            {
                immunization.addContained(tempactor);    
                performer.setActor(new Reference().setReference(&apos;#&apos;+new Resource(tempactor.getId())));
            }

            var tempactorperson=AuthortoPractictioner(arg1.Performers[0].AssignedEntity);
            if(tempactorperson!= undefined)
            {
                immunization.addContained(tempactorperson);
            }

            var tempactororg=AuthortoOrganization(arg1.Performers[0].AssignedEntity.Organizations[0]);
                
            if(tempactororg!= undefined)
            {
                immunization.addContained(tempactororg);
            }

            immunization.addPerformer(performer);
        }
    }

    if(arg1.MoodCode.Name==&apos;EVN&apos;)
    {
        if(arg1.RepeatNumber.Value.Value!=&apos;&apos;)
        {
            var dose=new org.hl7.fhir.r4.model.Immunization.ImmunizationProtocolAppliedComponent();
            dose.setDoseNumber(new StringType(arg1.RepeatNumber.Value.Value))
            immunization.addProtocolApplied(dose)
        }
    }
    else if(arg1.MoodCode.Name==&apos;INT&apos;)
    {
        if(arg1.RepeatNumber.Value.Value!=&apos;&apos;)
        {
            var series=new org.hl7.fhir.r4.model.Immunization.ImmunizationProtocolAppliedComponent();
            series.setSeriesDoses(new StringType(arg1.RepeatNumber.Value.Value))
            immunization.addProtocolApplied(series)
        }
    }


    for(var _i=0;_i&lt;arg1.EntryRelationships.length;_i++)
    {
        var er1=arg1.EntryRelationships[_i];
        if(er1.hasOwnProperty(&apos;Observation&apos;))
        {
            if(er1.TypeCode.Name==&apos;RSON&apos; &amp;&amp; er1.Observation.TemplateIds==&apos;2.16.840.1.113883.10.20.22.4.19&apos;)
            {
                immunization.addReasonCode(new CodeableConcept().setCoding(GetCodingList(er1.Observation.Values[0].CD)));
            }

            if(er1.TypeCode.Name==&apos;RSON&apos; &amp;&amp; er1.Observation.TemplateIds==&apos;2.16.840.1.113883.10.20.22.4.53&apos;)
            {
                immunization.setStatusReason(new CodeableConcept().setCoding(GetCodingList(er1.Observation.Code)));
            }

            if(er1.TypeCode.Name==&apos;CAUS&apos;)
            {
                var reaction=new org.hl7.fhir.r4.model.Immunization.ImmunizationReactionComponent();
                var tempreaction=ObservationResource(er1.Observation);
                if(tempreaction!=undefined)
                {
                    reaction.setDetail(new Reference().setReference(&apos;#&apos;+new Resource(tempreaction.getId())))
                    immunization.addContained(tempreaction);
                    immunization.addReaction(reaction)    
                }
                
            }
        }

        if(er1.hasOwnProperty(&apos;Act&apos;))
        {
            if(er1.Act.Text.Text!=&apos;&apos;)
            {
                immunization.addNote(new Annotation().setText(er1.Act.Text.Text.trim()))
            }
            else if(er1.Act.Text.hasOwnProperty(&apos;Reference&apos;))
            {
                if(er1.Act.Text.Reference.TEL_URL.Value!=&apos;&apos;)
                {
                    immunization.addNote(new Annotation().setText(er1.Act.Text.Reference.TEL_URL.Value.trim()))
                }
            }
        }
    }

    immunization.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(immunization))));
  //  var oImmunization=JSON.parse(parser.encodeResourceToString(immunization));
//    logger.info(&apos;ImmunizationResource-&gt;&apos;+parser.encodeResourceToString(immunization));

    return immunization;
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>94f1dc3a-4690-4479-9615-e0dad5571862</id>
            <name>LocationResource</name>
            <revision>8</revision>
            <lastModified>
              <time>1668247059944</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function LocationResource(arg1)
{
   //Takes Participant.ParticipantRole Node as argument
   importPackage(org.hl7.fhir.r4.model);
   var location = new org.hl7.fhir.r4.model.Location();
   var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
   var parser = ctx.newJsonParser();  

   for(var _id=0;_id&lt;arg1.Ids.length;_id++)
   {
      if(arg1.Ids[_id].Extension!=&apos;&apos;)
      {
         location.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
      }
   }
      
   if(arg1.PlayingEntity.Names[0].Text!=&apos;&apos;)
   {
      location.setName(arg1.PlayingEntity.Names[0].Text.trim())
   }

   var address=AddAddressNode(arg1.Addrs)
   if(address.length&gt;0)
   {
      location.setAddress(address[0]);   
   }
   
   location.setTelecom(AddTelecomNode(arg1.Telecoms));

   location.addType(new CodeableConcept().setCoding(GetCodingList(arg1.Code)))

   location.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(location))));
   

   
   if(countkey(parser.encodeResourceToString(location))&gt;2)
   {
      
      return location
   }
        
   
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>401bbcac-caaa-43e6-92b8-a8c1ffb50e38</id>
            <name>MapAddressUse</name>
            <revision>7</revision>
            <lastModified>
              <time>1669221619984</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function MapAddressUse(arg1)
{
    switch(String(arg1)) 
    {
        case &quot;BAD&quot;:
            return &apos;OLD&apos;
            break;
        case &quot;DIR&quot;:
            
            return &apos;HOME&apos;
            break;
        case &quot;H&quot;:
            return &apos;HOME&apos;
            break;
        case &quot;HP&quot;:
            return &apos;HOME&apos;
            break;
        case &quot;HV&quot;:
            return &apos;HOME&apos;
            break;
        case &quot;PHYS&quot;:
            return &apos;HOME&apos;
            break;
        case &quot;PST&quot;:
            return &apos;HOME&apos;
            break;
        case &quot;PST&quot;:
            return &apos;TEMP&apos;
            break;
        case &quot;TMP&quot;:
            return &apos;TEMP&apos;
            break;
        case &quot;WP&quot;:
            return &apos;WORK&apos;
            break;
         default:
         	  return &apos;NULL&apos;
       
    }

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>a9ce05ca-b47e-4d1e-9bfe-bf79cf66354d</id>
            <name>MapAllergyClinicalStatus</name>
            <revision>2</revision>
            <lastModified>
              <time>1666678310184</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function MapAllergyClinicalStatus(str)
{
    var obj={};

    if(str.Code=&apos;413322009&apos;)
    {
        obj.Code=&apos;resolved&apos;;
        obj.CodeSystem=&apos;2.16.840.1.113883.4.642.3.1372&apos;;
        obj.DisplayName=&apos;Resolved&apos;
    }
    else if(str.Code=&apos;73425007&apos;)
    {
        obj.Code=&apos;inactive&apos;;
        obj.CodeSystem=&apos;2.16.840.1.113883.4.642.3.1372&apos;;
        obj.DisplayName=&apos;Inactive&apos;
    }
    else
    {
        obj.Code=&apos;active&apos;;
        obj.CodeSystem=&apos;2.16.840.1.113883.4.642.3.1372&apos;;
        obj.DisplayName=&apos;Active&apos;
    }

    return obj;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>e248439c-a54d-43f6-b394-ceec78112acb</id>
            <name>MapAllergyCriticality</name>
            <revision>1</revision>
            <lastModified>
              <time>1666537357592</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function MapAllergyCriticality(str)
{
    var Code;

    if(str.Code==&apos;CRITH&apos; || str.Code==&apos;High&apos;)
    {
        Code=&apos;HIGH&apos;
    }
    else if(str.Code==&apos;CRITL&apos; || str.Code==&apos;CRITL&apos;)
    {
       Code=&apos;LOW&apos;
    }
    else if(str.Code==&apos;CRITU&apos; || str.Code==&apos;CRITU&apos;)
    {
       Code=&apos;UNABLETOASSESS&apos;
    }
    else
    {
        Code=&apos;NULL&apos;
    }

    return Code;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>75ced236-950b-4d92-9e7d-1619f019d654</id>
            <name>MapAllergySeverity</name>
            <revision>12</revision>
            <lastModified>
              <time>1669218363650</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
function MapAllergySeverity(str)
{
    var Code;
    //logger.info(&apos;MapAllergySeverity&apos;+JSON.stringify(str))

    if(str.Code==&apos;24484000&apos; || str.Code==&apos;SV&apos;)
    {
        Code=&apos;SEVERE&apos;
    }
    else if(str.Code==&apos;255604002&apos; || str.Code==&apos;MI&apos;)
    {
       Code=&apos;MILD&apos;
    }
    else if(str.Code==&apos;6736007&apos; || str.Code==&apos;MO&apos;)
    {
       Code=&apos;MODERATE&apos;
    }
    else if(str.Code==&apos;371924009&apos;)
    {
       Code=&apos;MODERATE&apos;
    }
    else
    {
        Code=&apos;NULL&apos;
    }

    return Code;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>c2bea5f1-287b-4899-836b-7647e07f6d95</id>
            <name>MapAllergyType</name>
            <revision>1</revision>
            <lastModified>
              <time>1666532412469</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function MapAllergyType(str)
{
    
    var test;
    switch (String(str))
    {
        case &quot;419199007&quot;:
            test=&apos;ALLERGY&apos;
            break;
        case &quot;416098002&quot;:
            test=&apos;ALLERGY&apos;
            break;
        case &quot;59037007&quot;:
            test=&apos;INTOLERANCE&apos;;
            break;
        case &quot;414285001&quot;:
            test=&apos;ALLERGY&apos;
            break;
        case &quot;235719002&quot;:
            test=&apos;INTOLERANCE&apos;
            break;
        case &quot;419511003&quot;:
            test=&apos;ALLERGY&apos;
            break;
        case &quot;420134006&quot;:
            test=&apos;ALLERGY&apos;
            break;
        case &quot;418471000&quot;:
            test=&apos;ALLERGY&apos;
            break;
        case &quot;418038007&quot;:
            test=&apos;ALLERGY&apos;
            break;
        case &quot;418038007&quot;:
            test=&apos;ALLERGY&apos;
            break;
        case &quot;232347008&quot;:
            test=&apos;ALLERGY&apos;
            break;
        case &quot;426232007&quot;:
            test=&apos;ALLERGY&apos;
            break;
        default:
            test=&apos;ALLERGY&apos;;
    }

   return test;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>a20a1fa1-52a7-47b2-a875-161dc81060d4</id>
            <name>MapCareplanIntent</name>
            <revision>1</revision>
            <lastModified>
              <time>1668522133053</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function MapCareplanIntent(arg1)
{
   switch(String(arg1))
   {
      case &quot;INT&quot;:
         return &apos;PLAN&apos;;
         break;
      case &quot;PRMS&quot;:
         return &apos;PLAN&apos;;
         break; 
      case &quot;PRP&quot;:
         return &apos;PROPOSAL&apos;;
         break; 
      case &quot;RQO&quot;:
         return &apos;ORDER&apos;;
         break; 
      
      default:
         return &apos;NULL&apos;;
   }   
   
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>c12d9778-0179-456b-82f0-b8bba4b01a63</id>
            <name>MapCareplanStatus</name>
            <revision>1</revision>
            <lastModified>
              <time>1668524877816</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function MapCareplanStatus(arg1)
{
   switch(String(arg1))
   {
      case &quot;active&quot;:
         return &apos;INPROGRESS&apos;;
         break;
      case &quot;completed&quot;:
         return &apos;COMPLETED&apos;;
         break; 
      
      
      default:
         return &apos;UNKNOWN&apos;;
   }   
   
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>b4c702ab-b378-476f-8a76-c2e07e47dff1</id>
            <name>MapConditionClinicalStatus</name>
            <revision>1</revision>
            <lastModified>
              <time>1666786324128</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function MapConditionClinicalStatus(str)
{
    var obj={};

    if(str.Code=&apos;413322009&apos;)
    {
        obj.Code=&apos;resolved&apos;;
        obj.CodeSystem=&apos;2.16.840.1.113883.4.642.3.1372&apos;;
        obj.DisplayName=&apos;Resolved&apos;
    }
    else if(str.Code=&apos;73425007&apos;)
    {
        obj.Code=&apos;inactive&apos;;
        obj.CodeSystem=&apos;2.16.840.1.113883.4.642.3.1372&apos;;
        obj.DisplayName=&apos;Inactive&apos;
    }
    else
    {
        obj.Code=&apos;active&apos;;
        obj.CodeSystem=&apos;2.16.840.1.113883.4.642.3.1372&apos;;
        obj.DisplayName=&apos;Active&apos;
    }

    return obj;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>c920014e-d6a5-4159-ad1c-0aa55c5adf4e</id>
            <name>MapConfidentiality</name>
            <revision>1</revision>
            <lastModified>
              <time>1668179329716</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function MapConfidentiality(arg1)
{
    switch(String(arg1)) 
    {
        case &quot;N&quot;:
            return &apos;N&apos;
            break;
        case &quot;R&quot;:
            
            return &apos;R&apos;
            break;
        case &quot;V&quot;:
            return &apos;V&apos;
            break;
        default:
            return &apos;NULL&apos;
            break;
    }

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>90d774a7-fed4-43a4-aef7-84c201e260ba</id>
            <name>MapDeviceStatus</name>
            <revision>1</revision>
            <lastModified>
              <time>1667148490472</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function MapDeviceStatus(arg1)
{
   switch(String(arg1))
   {
      case &quot;completed&quot;:
         return &apos;ACTIVE&apos;;
         break;
      case &quot;aborted&quot;:
         return &apos;INACTIVE&apos;;
         break; 
      case &quot;active&quot;:
         return &apos;ACTIVE&apos;;
         break; 
      case &quot;cancelled&quot;:
         return &apos;INACTIVE&apos;;
         break;
      case &quot;nullified&quot;:
         return &apos;NULL&apos;;
         break;         
      default:
         return &apos;UNKNOWN&apos;;
   }   
   
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>dd458c42-1b6a-4f51-86d3-93ccd5f3e7b1</id>
            <name>MapEncounterStatus</name>
            <revision>1</revision>
            <lastModified>
              <time>1666691273087</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function MapEncounterStatus(arg1)
{
    var test;
    switch (String(arg1))
    {
        case &apos;aborted&apos;:
            test=&apos;CANCELLED&apos;;
            break;
        case &apos;cancelled&apos;:
            test=&apos;CANCELLED&apos;;
            break;
        case &apos;active&apos;:
            test=&apos;INPROGRESS&apos;;
            break;
        case &apos;completed&apos;:
            test=&apos;FINISHED&apos;;
            break;
        default:
            test=&apos;UNKNOWN&apos;

    }


    return test;
             
}     
            
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>04e20d18-56ed-4eb3-a7b4-af475cfc8b54</id>
            <name>MapEntityNameUse</name>
            <revision>15</revision>
            <lastModified>
              <time>1666451092524</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function MapEntityNameUse(nuse)
{
	
    switch(String(nuse)) 
    {
        case &apos;L&apos;:
        	 
            return &apos;OFFICIAL&apos;
            break;
            
        case &quot;ASGN&quot;:
            return &apos;ANONYMOUS&apos;
            break;
        case &quot;C&quot;:
        		
            return &apos;OFFICIAL&apos;
            break;
        case &quot;P&quot;:
       
            return &apos;USUAL&apos;
            break;
        case &quot;A&quot;:
            return &apos;ANONYMOUS&apos;
            break;
         default:
            return &apos;ANONYMOUS&apos;
         
    }

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>7683b0be-750a-456d-b5b7-a990d907d743</id>
            <name>MapGender</name>
            <revision>3</revision>
            <lastModified>
              <time>1666805174016</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function MapGender(arg1)
{
    switch(String(arg1)) 
    {
        case &quot;F&quot;:
            return &apos;FEMALE&apos;
            break;
        case &quot;M&quot;:
            
            return &apos;MALE&apos;
            break;
        case &quot;UN&quot;:
            return &apos;OTHER&apos;
            break;
        default:
            return &apos;UNKNOWN&apos;
            break;
    }

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>d80f3ca9-b9a5-4b1d-bf65-5545ac3aba40</id>
            <name>MapImmunizationStatus</name>
            <revision>2</revision>
            <lastModified>
              <time>1669216770274</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function MapImmunizationStatus(arg1,negind)
{
   if(negind==true)
   {
       return &apos;NOTDONE&apos;;
   }
   else
   {
      switch(String(arg1))
      {
         case &quot;completed&quot;:
            return &apos;COMPLETED&apos;;
            break;
         case &quot;aborted&quot;:
            return &apos;NOTDONE&apos;;
            break; 
         case &quot;active&quot;:
            return &apos;COMPLETED&apos;;
            break; 
         case &quot;cancelled&quot;:
            return &apos;NOTDONE&apos;;
            break;
         case &quot;nullified&quot;:
            return &apos;NULL&apos;;
            break;         
         default:
            return &apos;COMPLETED&apos;;

      }   
   }
   
   
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>377293b9-c4c1-4986-b83e-745d0288d836</id>
            <name>Maplanguage</name>
            <revision>5</revision>
            <lastModified>
              <time>1668520272238</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function Maplanguage(str)
{
    var obj={};

    obj.system=&apos;http://hl7.org/fhir/ValueSet/languages&apos;;

    switch(String(str.Code.toLowerCase()))
    {
        case &quot;eng&quot;:
            obj.code=&apos;en&apos;;
            obj.display=&apos;English&apos;;
            break
        case &quot;en&quot;:
            obj.code=&apos;en&apos;;
            obj.display=&apos;English&apos;;
            break
        default:
            obj.code=str.Code;
            obj.display=str.DisplayName;
            obj.system=&apos;&apos;;


    }

    return obj;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>23f947a0-7542-47f2-ac6f-d32f97613b77</id>
            <name>MapMedicationStatus</name>
            <revision>2</revision>
            <lastModified>
              <time>1667321219160</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function MapMedicationStatus(arg1)
{
   switch(String(arg1))
   {
      case &quot;aborted&quot;:
         return &apos;CANCELLED&apos;;
         break;
      case &quot;active&quot;:
         return &apos;ACTIVE&apos;;
         break; 
      case &quot;Active&quot;:
         return &apos;ACTIVE&apos;;
         break; 
      case &quot;completed&quot;:
         return &apos;COMPLETED&apos;;
         break; 
      case &quot;nullified&quot;:
         return &apos;CANCELLED&apos;;
         break;
      case &quot;suspended&quot;:
         return &apos;ONHOLD&apos;;
         break;         
      default:
         return &apos;UNKNOWN&apos;;
   }   
   
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>3bc11ed5-8ac5-46e5-b65a-af486cc2a9db</id>
            <name>MapParticipantType</name>
            <revision>3</revision>
            <lastModified>
              <time>1666708901548</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function MapParticipantType(arg1)
{

	importPackage(org.hl7.fhir.r4.model);
	var coding=new Coding();
	switch (String(arg1))
    	{
        case &apos;PRF&apos;:
            coding.setCode(&apos;PPRF&apos;);
            coding.setSystem(&apos;http://terminology.hl7.org/CodeSystem/v3-ParticipationType&apos;);
            coding.setDisplay(&apos;primary performer&apos;);
            break;
       
        default:
        	 coding.setCode(&apos;PART&apos;);
           coding.setSystem(&apos;http://terminology.hl7.org/CodeSystem/v3-ParticipationType&apos;);
           coding.setDisplay(&apos;Participation&apos;);
        		
            

    }


    return coding;
             
}     
            
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>243b25d5-16de-4536-a4a6-0ea63a06e91b</id>
            <name>MapPeriodUnit</name>
            <revision>3</revision>
            <lastModified>
              <time>1668442679309</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function MapPeriodUnit(arg1)
{
    switch(String(arg1)) 
    {
        case &quot;hours&quot;:
            return &apos;H&apos;
            break;
        case &quot;h&quot;:
            return &apos;H&apos;
            break;
        case &quot;seconds&quot;:
            
            return &apos;S&apos;
            break;
        case &quot;minute&quot;:
            return &apos;MIN&apos;
            break;
        case &quot;week&quot;:
            return &apos;WK&apos;
            break;
        case &quot;month&quot;:
            return &apos;MO&apos;
            break;
        case &quot;day&quot;:
            return &apos;D&apos;
            break;
         case &quot;d&quot;:
            return &apos;D&apos;
            break;
        case &quot;year&quot;:
            return &apos;A&apos;
            break;
        default:
            return &apos;NULL&apos;
            break;
    }

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>cd8ad885-3321-4beb-917e-bc08b48db952</id>
            <name>MapProcedureStatus</name>
            <revision>3</revision>
            <lastModified>
              <time>1669221620053</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function MapProcedureStatus(arg1)
{
   switch(String(arg1))
   {
      case &quot;aborted&quot;:
         return &apos;STOPPED&apos;;
         break;
      case &quot;active&quot;:
         return &apos;INPROGRESS&apos;;
         break; 
      case &quot;cancelled&quot;:
         return &apos;STOPPED&apos;;
         break; 
      case &quot;completed&quot;:
         return &apos;COMPLETED&apos;;
         break;
      
      default:
         return &apos;NULL&apos;;
   }   
   
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>ae893c08-7a5a-4148-9b55-66c071c10b75</id>
            <name>MapResultStatus</name>
            <revision>2</revision>
            <lastModified>
              <time>1668002730833</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function MapResultStatus(arg1)
{
   switch(String(arg1))
      {
         case &quot;aborted&quot;:
            return &apos;CANCELLED&apos;;
            break;
         case &quot;active&quot;:
            return &apos;FINAL&apos;;
            break; 
         case &quot;cancelled&quot;:
            return &apos;CANCELLED&apos;;
            break; 
         case &quot;completed&quot;:
            return &apos;FINAL&apos;;
            break;
         case &quot;held&quot;:
            return &apos;UNKNOWN&apos;;
            break; 
         case &quot;suspended&quot;:
            return &apos;UNKNOWN&apos;;
            break;   
         case &quot;F&quot;:
            return &apos;FINAL&apos;;
            break;       
         default:
            return &apos;NULL&apos;;

      }   
   
   
   
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>810bb519-ed0b-4cd0-b01c-d4d5992640f8</id>
            <name>MapTelecomSystem</name>
            <revision>4</revision>
            <lastModified>
              <time>1666805186410</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function MapTelecomSystem(arg1)
{
    switch(String(arg1)) 
    {
        case &quot;HP&quot;:
            return &apos;PHONE&apos;
            break;
        case &quot;HV&quot;:
             return &apos;PHONE&apos;
            break;
        case &quot;MC&quot;:
            return &apos;PHONE&apos;
            break;
        case &quot;WP&quot;:
            return &apos;PHONE&apos;
            break;
        default:
            return &apos;OTHER&apos; 
            break;
        
    }



}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>1a69a8b6-535b-48e4-a72a-2d90ee4dd50d</id>
            <name>MapTelecomUse</name>
            <revision>5</revision>
            <lastModified>
              <time>1667132763211</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function MapTelecomUse(arg1)
{
	//logger.info(&apos;MapTelecomUse-&gt;&apos;+arg1)
    switch(String(arg1)) 
    {
        case &quot;HP&quot;:
            return &apos;HOME&apos;
            break;
        case &quot;HV&quot;:
             return &apos;HOME&apos;
            break;
        case &quot;MC&quot;:
            return &apos;MOBILE&apos;
            break;
        case &quot;WP&quot;:
            return &apos;WORK&apos;
            break;
        default:
        	return &apos;NULL&apos;
        	
        
        
    }



}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>b59fcd34-79b3-4b80-a350-0d12ab3681d4</id>
            <name>MapVerificationStatus</name>
            <revision>3</revision>
            <lastModified>
              <time>1666545653657</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function MapVerificationStatus(str)
{
    var obj={};

    if(str.Code==&apos;completed&apos;)
    {
        obj.Code=&apos;confirmed&apos;;
        obj.CodeSystem=&apos;http://terminology.hl7.org/CodeSystem/allergyintolerance-verification&apos;;
        obj.DisplayName=&apos;Confirmed&apos;
    }
    else
    {
        obj.Code=&apos;unconfirmed&apos;;
        obj.CodeSystem=&apos;http://terminology.hl7.org/CodeSystem/allergyintolerance-verification&apos;;
        obj.DisplayName=&apos;Unconfirmed&apos;
    }
	return obj
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>58046a9c-7c2d-4dcc-ac91-f634af031869</id>
            <name>MedicalEquipmentBundle</name>
            <revision>5</revision>
            <lastModified>
              <time>1669212311877</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function MedicalEquipmentBundle(arg1,text,patientid,bundleId) 
{
   
    
   var obj=JSON.parse(arg1);
   
   if(obj.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=obj.Entries.length;
       bundle.entry=[];
   }
   

   //looping through entries
   for(var _a=0;_a&lt;obj.Entries.length;_a++)
   {
        var record=obj.Entries[_a]
        var temp={};
        if(record.Supply!=null)
        {
            temp.resource=DeviceResource(record.Supply,text,patientid);

            SavefhirResource(temp.resource,bundleId,obj.Code);
        }
        
      
   }  

   //logger.info(&apos;MedicalEquipment Bundle-&gt;&apos;+JSON.stringify(bundle)) 
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>03578d34-162b-4f1e-844a-ec5602024454</id>
            <name>MedicationBundle</name>
            <revision>5</revision>
            <lastModified>
              <time>1669212313233</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function MedicationBundle(arg1,text,patientid,bundleId) 
{
   
    
   var obj=JSON.parse(arg1);
   
   if(obj.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=obj.Entries.length;
       bundle.entry=[];
   }
   

   //looping through entries
   for(var _a=0;_a&lt;obj.Entries.length;_a++)
   {
        var record=obj.Entries[_a]
        var temp={};
        temp.resource=MedicationRequestResource(record.SubstanceAdministration,text,patientid);

       SavefhirResource(temp.resource,bundleId,obj.Code);
        bundle.entry.push(temp)
   }  

   //logger.info(&apos;MedicationBundle-&gt;&apos;+JSON.stringify(bundle)) 
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>0e9f7405-8c6e-4b93-bbf2-046fcbd6eb58</id>
            <name>MedicationRequestResource</name>
            <revision>34</revision>
            <lastModified>
              <time>1668945960843</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @param {Any} text - 
    @param {Any} patientid - 
    @return {String} return description
*/
function MedicationRequestResource(arg1,text,patientid)
{
   importPackage(org.hl7.fhir.r4.model);
   var medicationrequest = new org.hl7.fhir.r4.model.MedicationRequest();
   var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
   var parser = ctx.newJsonParser();
   var dosage=new Dosage();
   var dispense=new org.hl7.fhir.r4.model.MedicationRequest.MedicationRequestDispenseRequestComponent();
   var doseandrate=new org.hl7.fhir.r4.model.Dosage.DosageDoseAndRateComponent();


   for(var _id=0;_id&lt;arg1.Ids.length;_id++)
   {
      if(arg1.Ids[_id].Extension!=&apos;&apos;)
      {
         medicationrequest.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
      }
        
   }

   medicationrequest.setStatus(MedicationRequest.MedicationRequestStatus.valueOf(MapMedicationStatus(arg1.StatusCode.Code)))

   if(text!=&apos;&apos; &amp;&amp; GetNarrative(text)!=null)
   {
     medicationrequest.setText(GetNarrative(text))
   }
      
   medicationrequest.setSubject(new Reference().setReference(patientid));

   if(arg1.MoodCode.Name==&apos;EVN&apos;)
   {
      medicationrequest.setIntent(MedicationRequest.MedicationRequestIntent.PLAN);   
   }
   else
   {
      medicationrequest.setIntent(MedicationRequest.MedicationRequestIntent.ORDER);
   }
   

   medicationrequest.setMedication(new CodeableConcept().setCoding(GetCodingList(arg1.Consumable.ManufacturedProduct.Material.Code)));

   if(arg1.hasOwnProperty(&apos;Informants&apos;))
   {
      /Informant Block Start/
      var tempreported=AuthortoPractictionerRole(arg1.Informants[0].AssignedEntity);
      if(tempreported!= undefined)
      {
         medicationrequest.addContained(tempreported);    
         medicationrequest.setReported(new Reference().setReference(&apos;#&apos;+new Resource(tempreported.getId())));
      }

      var tempreportedperson=AuthortoPractictioner(arg1.Informants[0].AssignedEntity);
      if(tempreportedperson!= undefined)
      {
           medicationrequest.addContained(tempreportedperson);
      }
              
        var tempreportedorg= AuthortoOrganization(arg1.Informants[0].AssignedEntity.Organizations[0])
      if(tempreportedorg!= undefined)
      {
         medicationrequest.addContained(tempreportedorg);
      }

      /Informant Block End/

   }
   
   if(arg1.Authors[0].Time.Value!=&apos;&apos;)
   {
      medicationrequest.setAuthoredOn(new DateTimeType(formatdate(arg1.Authors[0].Time.Value)))
   }

   /Author Block Start/
   var temprecorder=AuthortoPractictionerRole(arg1.Authors[0].AssignedAuthor);
   if(temprecorder!= undefined)
   {
      medicationrequest.addContained(temprecorder);    
      medicationrequest.setRecorder(new Reference().setReference(&apos;#&apos;+new Resource(temprecorder.getId())));
   }


   var temprecorderperson=AuthortoPractictioner(arg1.Authors[0].AssignedAuthor);
   if(temprecorderperson!= undefined)
   {
      medicationrequest.addContained(temprecorderperson);
   }
           
    var temprecorderorg= AuthortoOrganization(arg1.Authors[0].AssignedAuthor.Organization);
   if(temprecorderorg!= undefined)
   {
      medicationrequest.addContained(temprecorderorg);
   }

   /Author Block End/

   var tempdate=GetEffectiveTimeInfo(arg1);

   if(tempdate.startdatetime!=&apos;&apos; &amp;&amp; tempdate.enddatetime!=&apos;&apos;)
   {
      var period=new Period();
      period.setStartElement(new DateTimeType(formatdate(tempdate.startdatetime)));
      period.setEndElement(new DateTimeType(formatdate(tempdate.enddatetime)));
      dispense.setValidityPeriod(period)
   }
   

   if(tempdate.frequency!=&apos;&apos;)
   {
      dosage.setTiming(new Timing().setRepeat(new org.hl7.fhir.r4.model.Timing.TimingRepeatComponent().setPeriod(tempdate.frequency).setPeriodUnit(Timing.UnitsOfTime.valueOf(MapPeriodUnit(tempdate.frequencyunit)))));
   }

   if(arg1.hasOwnProperty(&apos;DoseQuantity&apos;))
   {
      if(arg1.DoseQuantity.SXCM_PQ.Value!=&apos;&apos;)
      {
         doseandrate.setDose(GetQuantity(arg1.DoseQuantity.SXCM_PQ))
         
      }
   }

   if(arg1.hasOwnProperty(&apos;AdministrationCode&apos;))
   {
      if(arg1.AdministrationCode.Code!=&apos;&apos; || arg1.AdministrationCode.DisplayName!=&apos;&apos;)
      {
         dosage.setMethod(new CodeableConcept().setCoding(GetCodingList(arg1.AdministrationCode)));   
      }
   }

   if(arg1.hasOwnProperty(&apos;RouteCode&apos;))
   {
      if(arg1.RouteCode.Code!=&apos;&apos; || arg1.RouteCode.DisplayName!=&apos;&apos;)
      {
         dosage.setRoute(new CodeableConcept().setCoding(GetCodingList(arg1.RouteCode)));   
      }
   }

   if(arg1.hasOwnProperty(&apos;RateQuantity&apos;))
   {
      if(arg1.RateQuantity.SXCM_PQ.PQ.Value!=&apos;&apos;)
      {
         doseandrate.setRate(GetQuantity(arg1.RateQuantity.SXCM_PQ));
      }
   }

   for(var _perf=0;_perf&lt;arg1.Performers.length;_perf++)
   {
        var tempperformer=arg1.Performers[_perf];

        /Performer Block Start/
        var tempsupport=AuthortoPractictionerRole(tempperformer.AssignedEntity);
        if(tempsupport!= undefined)
        {
            medicationrequest.addContained(tempsupport);    
            medicationrequest.addSupportingInformation(new Reference().setReference(&apos;#&apos;+new Resource(tempsupport.getId())));
        }

        var tempsupportperson=AuthortoPractictioner(tempperformer.AssignedEntity);
       if(tempsupportperson!= undefined)
       {
          medicationrequest.addContained(tempsupportperson);
       }
                
        var tempsupportorg=AuthortoOrganization(tempperformer.AssignedEntity.Organizations[0]);
       if(tempsupportorg!= undefined)
       {
          medicationrequest.addContained(tempsupportorg);
       }

       /Performer Block End/
        
   }
   

   for(var _i=0;_i&lt;arg1.Participants.length;_i++)
   {
      var tempparticipant1=arg1.Participants[_i];
      if(tempparticipant1.TypeCode.Name==&apos;CSM&apos;)
      {
         if(tempparticipant1.ParticipantRole.PlayingEntity.Code.Code!=&apos;&apos; || tempparticipant1.ParticipantRole.PlayingEntity.Code.DisplayName!=&apos;&apos;)
         {
            medicationrequest.addExtension().setUrl(&apos;http://hl7.org/fhir/us/core/StructureDefinition/drug-vehicle&apos;).setValue(new CodeableConcept().setCoding(GetCodingList(tempparticipant1.ParticipantRole.PlayingEntity.Code)));
         }
      }
   }


   for(var _er1=0;_er1&lt;arg1.EntryRelationships.length&gt;0;_er1++)
    {
        var er1=arg1.EntryRelationships[_er1];

        if(er1.hasOwnProperty(&apos;Observation&apos;))
        {
            if(er1.TypeCode.Name==&apos;RSON&apos;)
            {
                medicationrequest.addReasonCode(new CodeableConcept().setCoding(GetCodingList(er1.Observation.Values[0].CD)))
            }

            if(er1.TypeCode.Name==&apos;REFR&apos;)
            {
               if(er1.Observation.Values[0].DisplayName!=&apos;&apos; &amp;&amp; er1.Observation.Code.Code==&apos;33999-4&apos;)
               {
                  medicationrequest.setStatus(MedicationRequest.MedicationRequestStatus.valueOf(MapMedicationStatus(er1.Observation.Values[0].CD.DisplayName)))
               }
               
            }
        }

        if(er1.hasOwnProperty(&apos;encounter&apos;))
        {
             if(er1.TypeCode.Name==&apos;COMP&apos;)
            {
                if(er1.encounter.Ids[0].Extension!=&apos;&apos;)
                {
                    medicationrequest.setEncounter(new Reference().setReference(&apos;/Encounter?identifier=&apos;+er1.encounter.Ids[0].Extension));    
                }
                
            }
        }

        if(er1.hasOwnProperty(&apos;substanceAdministration&apos;))
        {
            if(er1.substanceAdministration.Code.Code==&apos;76662-6&apos;)
            {
                if(er1.substanceAdministration.Text!=&apos;&apos;)
                {
                   dosage.setText(er1.substanceAdministration.Text.trim()); 
                   
                }
                else if(er1.substanceAdministration.Text.Reference.TEL_URL.Value!=&apos;&apos;)
                {
                   dosage.setText(er1.substanceAdministration.Text.Reference.TEL_URL.Value.trim()); 
                   
                }
            }
        }

        if(er1.hasOwnProperty(&apos;Act&apos;))
        {
            //Patient Instruction
            if(er1.TypeCode.Name==&apos;SUBJ&apos;)
            {
                if(er1.Act.Text.Text!=&apos;&apos;)
                {
                   dosage.setPatientInstruction(er1.Act.Text.Text.trim());   
                   medicationrequest.addNote().setText(er1.Act.Text.Text.trim()) ;
                }
                else if(er1.Act.Text.Reference.TEL_URL.Value!=&apos;&apos;)
                {
                   dosage.setPatientInstruction(er1.Act.Text.Reference.TEL_URL.Value.trim()); 
                   medicationrequest.addNote().setText(er1.Act.Text.Reference.TEL_URL.Value.trim()) ;
                }
            }
        }


        if(er1.hasOwnProperty(&apos;supply&apos;))
        {
            if(er1.TypeCode.Name==&apos;REFR&apos; &amp;&amp; er1.supply.MoodCode.Name==&apos;INT&apos;)
            {
               if(er1.supply.RepeatNumber.Value.Value!=&apos;&apos;)
               {
                  dispense.setNumberOfRepeatsAllowed(er1.supply.RepeatNumber.Value.Value);
               }

               if(er1.supply.hasOwnProperty(&apos;Quantity&apos;))
               {
                  if(er1.supply.Quantity.Value!=&apos;&apos;)
                  {
                     doseandrate.setDose(GetQuantity(er1.supply.Quantity));
                  }   
               }

               for(var _er2=0;_er2&lt;er1.supply.EntryRelationships.length;_er2++)
               {
                  var er2=er1.supply.EntryRelationships[_er2];
                  if(er2.hasOwnProperty(&apos;Act&apos;))
                  {
                     if(er2.Act.hasOwnProperty(&apos;Text&apos;))
                     {
                        if(er2.Act.Text.Text!=&apos;&apos;)
                        {
                           medicationrequest.addNote().setText(er2.Act.Text.Text.trim()) ;   
                        }   
                     }
                     
                     
                  }
               }
               
            }

            if(er1.TypeCode.Name==&apos;REFR&apos; &amp;&amp; er1.supply.MoodCode.Name==&apos;EVN&apos;)
            {
               if(er1.supply.hasOwnProperty(&apos;Quantity&apos;))
               {
                  if(er1.supply.Quantity.Value!=&apos;&apos;)
                  {
                     dispense.setQuantity(GetQuantity(er1.supply.Quantity));
                  }   
               }

               if(er1.supply.RepeatNumber.Value.Value!=&apos;&apos;)
               {
                  dosage.setSequence(er1.supply.RepeatNumber.Value.Value);
               }

               if(er1.supply.hasOwnProperty(&apos;Participants&apos;))
               {
                  for(var _p=0;_p&lt;er1.supply.Participants.length;_p++)
                  {
                     var tempparticipant=er1.supply.Participants[_p];

                     if(tempparticipant.TypeCode.Name==&apos;LOC&apos;)
                     {
                        var tempperf=ParticipanttoOrganization(tempparticipant.ParticipantRole);
                        if(tempperf!=undefined &amp;&amp; tempperf!=null)
                        {
                           medicationrequest.addContained(tempperf)
                           dispense.setPerformer(new Reference().setReference(&apos;#&apos;+new Resource(tempperf.getId())))   
                        }
                        
                     }
                  }

               }

               for(var _perf1=0;_perf1&lt;er1.supply.Performers.length;_perf1++)
               {
                  var tempperformer1=er1.supply.Performers[_perf1];

                  /Performer Block Start/
                  var tempsupportinfo=AuthortoPractictionerRole(tempperformer1.AssignedEntity);
                  if(tempsupportinfo!= undefined)
                  {
                     medicationrequest.addContained(tempsupportinfo);    
                     medicationrequest.addSupportingInformation(new Reference().setReference(&apos;#&apos;+new Resource(tempsupportinfo.getId())));
                  }


                    var tempsupportinfoperson=AuthortoPractictioner(tempperformer1.AssignedEntity);
                  if(tempsupportinfoperson!= undefined)
                  {
                     medicationrequest.addContained(tempsupportinfoperson);
                  }
                            
                    var tempsupportinfoorg=AuthortoOrganization(tempperformer1.AssignedEntity.Organizations[0]);
                  if(tempsupportinfoorg!= undefined)
                  {
                     medicationrequest.addContained(tempsupportinfoorg);
                  }

                   /Performer Block End/
                    
                }

               /Author Block Start/

               var tempperf1=AuthortoPractictionerRole(er1.supply.Authors[0].AssignedAuthor);
               if(tempperf1!= undefined)
               {
                  medicationrequest.addContained(tempperf1);    
                  medicationrequest.setPerformer(new Reference().setReference(&apos;#&apos;+new Resource(tempperf1.getId())));
               }

               var tempperf1person=AuthortoPractictioner(er1.supply.Authors[0].AssignedAuthor);
               if(tempperf1person!= undefined)
               {
                  medicationrequest.addContained(tempperf1person);
               }
                           
                var tempperf1org=AuthortoOrganization(er1.supply.Authors[0].AssignedAuthor.Organization);
               if(tempperf1org!= undefined)
               {
                  medicationrequest.addContained(tempperf1org);
               }
               /Author Block End/
            }


        }
   }

   for(var _c=0;_c&lt;arg1.Preconditions.length;_c++)
   {
      var precondition=arg1.Preconditions[_c];

      if(precondition.Criterion.hasOwnProperty(&apos;Value&apos;))
      {
         if(precondition.Criterion.Value.CD.Code!=&apos;&apos; || precondition.Criterion.Value.CD.DisplayName!=&apos;&apos;)
         {
            medicationrequest.addExtension().setUrl(&apos;http://hl7.org/fhir/StructureDefinition/observation-precondition&apos;).setValue(new CodeableConcept().setCoding(GetCodingList(precondition.Criterion.Value.CD)));
         }   
      }
      
      

   }

   dosage.addDoseAndRate(doseandrate);
   medicationrequest.addDosageInstruction(dosage);
   medicationrequest.setDispenseRequest(dispense);

   medicationrequest.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(medicationrequest))));
 //  var oMedicationRequest=JSON.parse(parser.encodeResourceToString(medicationrequest));
   //logger.info(&apos;MedicationRequest Resource-&gt;&apos;+parser.encodeResourceToString(medicationrequest));

   return medicationrequest;
   
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>e308220f-8718-4728-902a-0948acd2c530</id>
            <name>ObservationResource</name>
            <revision>23</revision>
            <lastModified>
              <time>1668946395418</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function ObservationResource(arg1,txt,patientid,category)
{
   importPackage(org.hl7.fhir.r4.model);
    var observation = new org.hl7.fhir.r4.model.Observation();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  
   
      for(var _id=0;_id&lt;arg1.Ids.length;_id++)
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            observation.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }  
    }

    if(txt!=&apos;&apos; &amp;&amp; GetNarrative(txt)!=null)
    {
        observation.setText(GetNarrative(txt))
    }

   observation.setStatus(Observation.ObservationStatus.FINAL);

   //logger.info(&apos;ObservationResource 1&apos;);
   observation.addCategory(new CodeableConcept().setCoding(GetCodingList(category)));
   
   //logger.info(&apos;ObservationResource 2&apos;);
   observation.setCode(new CodeableConcept().setCoding(GetCodingList(arg1.Code)));
   observation.setSubject(new Reference().setReference(patientid));    

   var tempdate=GetEffectiveTimeInfo(arg1);
   if(tempdate.startdatetime!=&apos;&apos; &amp;&amp; tempdate.enddatetime!=&apos;&apos;)
   {
      observation.setEffective(new Period().setStartElement(new DateTimeType(formatdate(tempdate.startdatetime))).setEndElement(new DateTimeType(formatdate(tempdate.enddatetime))))
   }
   else if(tempdate.startdatetime!=&apos;&apos;)
    {
        observation.setEffective(new DateTimeType(formatdate(tempdate.startdatetime)));
    }


   if(arg1.hasOwnProperty(&apos;Values&apos;)) 
   {
      for(var _v=0;_v&lt;arg1.Values.length;_v++)
      {
        //logger.info(&apos;ObservationResource-&gt;&apos;+GetValueNode(arg1.Values[_v]))
        if(GetValueNode(arg1.Values[_v])!=undefined)
        {
            observation.setValue(GetValueNode(arg1.Values[_v]));          
        }
        
      }
      
   }
   
   
   if(arg1.hasOwnProperty(&apos;Participants&apos;))
   {
      for(var _p=0;_p&lt;arg1.Participants.length&gt;0;_p++)
      {
         var participant=arg1.Participants[_p];
         if(participant.TypeCode.Name==&apos;PRF&apos;)
         {

            var tempauthenticator=ParticipanttoPractictioner(participant.ParticipantRole);
            if(tempauthenticator!=undefined)
            {
                var authenticator=&apos;#&apos;+new Resource(tempauthenticator.getId());
                observation.addContained(tempauthenticator);    
            }
            
         }

         if(participant.TypeCode.Name==&apos;CST&apos;)
         {
            var tempcustodian=ParticipanttoPractictioner(participant.ParticipantRole);
            if(tempcustodian!=undefined)
            {
                var custodian=&apos;#&apos;+new Resource(tempcustodian.getId());
                observation.addContained(tempcustodian);  
            }
              
         }

         if(participant.TypeCode.Name==&apos;PRF&apos;)
         {
            var temp_perf=ParticipanttoPractictioner(participant.ParticipantRole);
            if(temp_perf!=undefined)
            {
                var performer=&apos;#&apos;+new Resource(temp_perf.getId());
                observation.addContained(temp_perf);
                observation.addPerformer().setReference(performer);
            }
            
         }
      }

   }
   
   if(arg1.hasOwnProperty(&apos;References&apos;))
   {
      for(var _r=0;_r&lt;arg1.References.length;_r++)
      {
         var tempreference=arg1.References[_r];

         var tempdocument=ExternalDocumentReference(tempreference,patientid,authenticator,custodian);
         if(tempdocument!=undefined)
         {
            observation.addDerivedFrom(new Reference().setReference(&apos;#&apos;+new Resource(tempdocument.getId())));
            observation.addContained(tempdocument);    
         }
         
         
      }  
   }
      


   for(var _comp=0;_comp&lt;arg1.EntryRelationships.length&gt;0;_comp++)
   {
      var tempcomp=arg1.EntryRelationships[_comp];
      if(tempcomp.hasOwnProperty(&apos;Observation&apos;))
      {
         var component=org.hl7.fhir.r4.model.Observation.ObservationComponentComponent();
         //logger.info(&apos;ObservationResource 3&apos;);
         component.setCode(new CodeableConcept().setCoding(GetCodingList(tempcomp.Observation.Code)));   
         

         component.setValue(GetValueNode(tempcomp.Observation.Values[0]));

         if(tempcomp.Observation.hasOwnProperty(&apos;InterpretationCode&apos;))
         {
            for(var _i=0;_i&lt;tempcomp.Observation.InterpretationCode.length;_i++)
            {
               var tempinterpretation=tempcomp.Observation.InterpretationCode[_i];
               //logger.info(&apos;ObservationResource 4&apos;);
               if(GetCodingList(tempinterpretation).length&gt;0)
               {
                    //logger.info(&apos;ObservationResource 5&apos;);
                  component.addInterpretation(new CodeableConcept().setCoding(GetCodingList(tempinterpretation)))
               }
            }
            
         }

         if(tempcomp.Observation.hasOwnProperty(&apos;RefrenceRanges&apos;))
         {  
            for(var_r=0;_r&lt;tempcomp.Observation.RefrenceRanges.length;_r++)
            {
               var temprefrange=tempcomp.Observation.RefrenceRanges[_r];
               var referencerange=new org.hl7.fhir.r4.model.Observation.ObservationReferenceRangeComponent();

               if(temprefrange.ObservationRange.hasOwnProperty(&apos;Text&apos;))
               {
                  if(temprefrange.ObservationRange.Text.Text!=&apos;&apos;)
                  {
                     referencerange.setText(temprefrange.ObservationRange.Text.Text.trim());  
                  }
                  else if(temprefrange.ObservationRange.Text.hasOwnProperty(&apos;Reference&apos;))
                   {
                     if(temprefrange.ObservationRange.Text.Reference.TEL_URL.Value!=&apos;&apos;)
                     {
                        referencerange.setText(temprefrange.ObservationRange.Text.Reference.TEL_URL.Value.trim());
                     }
                   }

                   referencerange.setLow(GetQuantity(temprefrange.ObservationRange.ANY.IVL_PQ.Low.PQ));
                   referencerange.setHigh(GetQuantity(temprefrange.ObservationRange.ANY.IVL_PQ.High.PQ));
                  
               }

            }
         }
            
      }

      observation.addComponent(component);
 
   }


   observation.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(observation))));
    //var oObservation=JSON.parse(parser.encodeResourceToString(observation));
    ////logger.info(&apos;ObservationResource-&gt;&apos;+parser.encodeResourceToString(observation));

    return observation;
   

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>a55ffa53-02c9-4831-9fa4-0632768095e7</id>
            <name>OrganizationResource</name>
            <revision>20</revision>
            <lastModified>
              <time>1668249464971</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function OrganizationResource(arg1)
{
	//logger.info(&apos;OrganizationResource-&gt;&apos;+JSON.stringify(arg1))
    importPackage(org.hl7.fhir.r4.model);
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();
    
   
      var organization = new org.hl7.fhir.r4.model.Organization();
      if(arg1.Names.length&gt;0)
      {
         if(arg1.Names[0].Text!=&apos;&apos;)
      {
         
            for (var _id = 0; _id &lt; arg1.Ids.length; _id++) 
            {
               if(arg1.Ids[_id].Extension!=&apos;&apos;)
               {
                  organization.addIdentifier().setSystem(&quot;urn:oid:&quot;+arg1.Ids[_id].Root).setValue(arg1.Ids[_id].Extension);   
               }
               
            }
   
            for (var _n = 0; _n &lt; arg1.Names.length; _n++) 
            {
   
               if(arg1.Names[_n].Text!=&apos;&apos; &amp;&amp; arg1.Names[_n].Text!=&apos;&quot;&quot;&apos;)
               {
                  organization.setName(arg1.Names[_n].Text.trim())
               }
            }
   
            
   
            for (var _ot = 0; _ot &lt; arg1.Telecoms.length; _ot++) 
            {
               
               var orgtelecom=organization.addTelecom()
               if(arg1.Telecoms[_ot].TEL_URL.Value!=&apos;&apos;)
               {
               	orgtelecom.setValue(arg1.Telecoms[_ot].TEL_URL.Value)	
               }

               if(arg1.Telecoms[_ot].TelecomAddress[0].Name!=&apos;&apos;)
               {&#xd;               	orgtelecom.setSystem(ContactPoint.ContactPointSystem.valueOf(MapTelecomSystem(arg1.Telecoms[_ot].TelecomAddress[0].Name)));	
               }

               if(arg1.Telecoms[_ot].TelecomAddress[0].Name!=&apos;&apos;)
               {&#xd;               	orgtelecom.setUse(ContactPoint.ContactPointUse.valueOf(MapTelecomUse(arg1.Telecoms[_ot].TelecomAddress[0].Name)));	&#xd;               }&#xd;               
   
            }
   
            for (var _oa = 0; _oa &lt; arg1.Address.length; _oa++) 
            {
               orgaddr=organization.addAddress();
   
               if(arg1.Address[_oa].Cities[0].Name!=&apos;&apos; &amp;&amp; MapAddressUse(arg1.Address[_oa].Cities[0].Name)!=null)
               {
                  orgaddr.setUse(Address.AddressUse.valueOf(MapAddressUse(arg1.Address[_oa].Cities[0].Name)))
               }
                               
               if(arg1.Address[_oa].StreetAddressLines[0].ADXP_ST!=&apos;&apos;)
               {
                  orgaddr.addLine(arg1.Address[_oa].StreetAddressLines[0].ADXP_ST.trim());
               }
   
               if(arg1.Address[_oa].Cities[0].ADXP_ST!=&apos;&apos;)
               {
                  orgaddr.setCity(arg1.Address[_oa].Cities[0].ADXP_ST)
               }
   
               if(arg1.Address[_oa].States[0].ADXP_ST!=&apos;&apos;)
               {
                  orgaddr.setState(arg1.Address[_oa].States[0].ADXP_ST);
               }
                               
               if(arg1.Address[_oa].PostalCodes[0].ADXP_ST!=&apos;&apos;)
               {
                  orgaddr.setPostalCode(arg1.Address[_oa].PostalCodes[0].ADXP_ST);
               }
   
               if(arg1.Address[_oa].Countries[0].ADXP_ST!=&apos;&apos;)
               {
                  orgaddr.setCountry(arg1.Address[_oa].Countries[0].ADXP_ST);
               }
   
            }
         
         }

      }
      
   
   organization.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(organization))));
     
   if(countkey(parser.encodeResourceToString(organization))&gt;2)
   {
   	return organization
   }
         
}     
            
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>869e6f0b-b7f7-4adc-a1c3-4ec737046b20</id>
            <name>ParticipanttoOrganization</name>
            <revision>10</revision>
            <lastModified>
              <time>1668252304134</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function ParticipanttoOrganization(arg1)
{
	//Takes input from Particpants.ParticpantRole
    importPackage(org.hl7.fhir.r4.model);
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();
    
   
    var organization = new org.hl7.fhir.r4.model.Organization();
    
    for (var _id = 0; _id &lt; arg1.Ids.length; _id++) 
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            organization.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }
    }

    if(arg1.hasOwnProperty(&apos;Code&apos;))
    {
    		var orgtype=GetMergedCodeList(arg1.Code);
	    for(var _t=0;_t&lt;orgtype.length;_t++)
	    {
	        organization.addType(CodeableConcept(GetCoding(orgtype[_t])));
	    }	
    }
              
    if(arg1.hasOwnProperty(&apos;Addrs&apos;))
    {
    	organization.setAddress(AddAddressNode(arg1.Addrs));	
    }
    else if(arg1.hasOwnProperty(&apos;Address&apos;))
    {
    		var address=[];
    		address.push(arg1.Address)
    		organization.setAddress(AddAddressNode(address));	
    }

    if(arg1.hasOwnProperty(&apos;Telecoms&apos;))
    {
    	organization.setTelecom(AddTelecomNode(arg1.Telecoms));	
    }
    else if(arg1.hasOwnProperty(&apos;Telecom&apos;))
    {
    	organization.setTelecom(AddTelecomNode(arg1.Telecom));	
    }
    

   	if(arg1.hasOwnProperty(&apos;PlayingEntity&apos;))
   	{
   		
   		for (var _n = 0; _n &lt; arg1.PlayingEntity.Names.length; _n++) 
	    {
	        if(arg1.PlayingEntity.Names[_n].Text!=&apos;&apos;)
	        {
	            organization.setName(arg1.PlayingEntity.Names[_n].Text.trim())
	        }
	    }
   	}
   	else if(arg1.hasOwnProperty(&apos;Names&apos;))
   	{
   		for (var _n = 0; _n &lt; arg1.Names.length; _n++) 
	    {
	        if(arg1.Names[_n].Text!=&apos;&apos;)
	        {
	            organization.setName(arg1.Names[_n].Text.trim())
	        }
	    }
   	}
   	
    

   organization.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(organization))));
     
   
   if(countkey(parser.encodeResourceToString(organization))&gt;2)
   {
   	return organization
   }
         
}     
            
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>dfb876ba-fba0-4978-8d4c-eefbf02ffd8e</id>
            <name>ParticipanttoPatient</name>
            <revision>4</revision>
            <lastModified>
              <time>1667470613628</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function ParticipanttoPatient(arg1)
{
   //takes Participant.ParticipantRole node as input

   importPackage(org.hl7.fhir.r4.model);
   var patient = new org.hl7.fhir.r4.model.Patient();
   var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
   var parser = ctx.newJsonParser();
   


   for(var _id=0;_id&lt;arg1.Ids.length;_id++)
   {
      if(arg1.Ids[_id].Extension!=&apos;&apos;)
      {
         patient.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
      }
        
   }

   
   patient.setAddress(AddAddressNode(arg1.Addrs));
   patient.setTelecom(AddTelecomNode(arg1.Telecoms));

   patient.setName(AddNameNode(arg1.PlayingEntity.Names));
   if(arg1.PlayingEntity.SDTCBirthTime!=null)
   {
      if(arg1.PlayingEntity.SDTCBirthTime.Value!=&apos;&apos;)
      {
         patient.setBirthDate(new Date(parseCCDBirthDate(String(arg1.PlayingEntity.SDTCBirthTime.Value))));  
      }
      
   }
   
   
   patient.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(patient))));
   

   if(countkey(parser.encodeResourceToString(patient))&gt;2)
   {
      
      return patient
   }
   
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>68e8f16a-02bf-4bf6-853a-91b362a7f274</id>
            <name>ParticipanttoPractictioner</name>
            <revision>2</revision>
            <lastModified>
              <time>1667043608864</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function ParticipanttoPractictioner(arg1)
{
   //takes Participants.ParticipantRole node as input


   importPackage(org.hl7.fhir.r4.model);
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();

    var practitioner = new org.hl7.fhir.r4.model.Practitioner();

    for (var _id = 0; _id &lt; arg1.Ids.length; _id++) 
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            practitioner.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }
    }

   practitioner.setAddress(AddAddressNode(arg1.Addrs));
   practitioner.setTelecom(AddTelecomNode(arg1.Telecoms));

   practitioner.setName(AddNameNode(arg1.PlayingEntity.Names));
   
   
   
   practitioner.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(practitioner))));
   

   
   if(countkey(parser.encodeResourceToString(practitioner))&gt;2)
   {
      
      return practitioner
   }
 
   
   

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>20acf23d-05fb-4b65-8730-f012d3cf6a76</id>
            <name>ParticipanttoRelatedPerson</name>
            <revision>4</revision>
            <lastModified>
              <time>1667488232221</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function ParticipanttoRelatedPerson(arg1,patientid)
{
   //takes Participant.ParticipantRole node as input

   importPackage(org.hl7.fhir.r4.model);
   var relatedperson = new org.hl7.fhir.r4.model.RelatedPerson();
   var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
   var parser = ctx.newJsonParser();
   


   for(var _id=0;_id&lt;arg1.Ids.length;_id++)
   {
      if(arg1.Ids[_id].Extension!=&apos;&apos;)
      {
         relatedperson.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
      }
        
   }

   relatedperson.setPatient(new Reference().setReference(patientid));

   if(arg1.hasOwnProperty(&apos;Addrs&apos;))
   {
   	relatedperson.setAddress(AddAddressNode(arg1.Addrs));	
   }
   else if(arg1.hasOwnProperty(&apos;Address&apos;))
   {
   	relatedperson.setAddress(AddAddressNode(arg1.Address));	
   }
   
   relatedperson.setTelecom(AddTelecomNode(arg1.Telecoms));

   if(arg1.hasOwnProperty(&apos;PlayingEntity&apos;))
   {
   	relatedperson.setName(AddNameNode(arg1.PlayingEntity.Names));
   }
   else if(arg1.hasOwnProperty(&apos;Person&apos;))
   {
   	relatedperson.setName(AddNameNode(arg1.Person.Names));
   }
   
   relatedperson.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(relatedperson))));
   

   if(countkey(parser.encodeResourceToString(relatedperson))&gt;3)
   {
      
      return relatedperson
   }
   
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>dbd9787b-a3e1-4a32-acac-4a6e76720e3a</id>
            <name>PayorBundle</name>
            <revision>4</revision>
            <lastModified>
              <time>1669138049361</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function PayorBundle(arg1,text,patientid,bundleId) 
{
   
    
   var obj=JSON.parse(arg1);
   
   if(obj.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=obj.Entries.length;
       bundle.entry=[];
   }
   

   //looping through entries
   for(var _a=0;_a&lt;obj.Entries.length;_a++)
   {
        var record=obj.Entries[_a]
        var temp={};
        
        temp.resource=CoverageResource(record.Act,text,patientid);
		//SavefhirResource(temp.resource,bundleId,obj.Code);
        bundle.entry.push(temp)
   }  

   //logger.info(&apos;PayorBundle-&gt;&apos;+JSON.stringify(bundle)) 
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>c00dda34-9bfe-4d03-acf4-3dca421317a8</id>
            <name>ProcedureBundle</name>
            <revision>9</revision>
            <lastModified>
              <time>1669212315037</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function ProcedureBundle(arg1,text,patientid,bundleId) 
{
   
    
   var obj=JSON.parse(arg1);
   
   if(obj.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=obj.Entries.length;
       bundle.entry=[];
   }
   

   //looping through entries
   for(var _a=0;_a&lt;obj.Entries.length;_a++)
   {
        var record=obj.Entries[_a]
        var temp={};
        
        if(countkey(JSON.stringify(record.Act))&gt;0)
        {
            temp.resource=ProcedureResource(record.Act,text,patientid);    
        }
        else if(countkey(JSON.stringify(record.Procedure))&gt;0)
        {
            temp.resource=ProcedureResource(record.Procedure,text,patientid);    
        }
        else if(countkey(JSON.stringify(record.Observation))&gt;0)
        {
            temp.resource=ProcedureResource(record.Observation,text,patientid);    
        }

        SavefhirResource(temp.resource,bundleId,obj.Code);

        bundle.entry.push(temp)
   }  

   //logger.info(&apos;ProcedureBundle-&gt;&apos;+JSON.stringify(bundle)) 
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>b9b28fe5-409d-4012-9e9b-d9d9b6980433</id>
            <name>ProcedureResource</name>
            <revision>16</revision>
            <lastModified>
              <time>1668953632685</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
function ProcedureResource(arg1,text,patientid)
{
    
    importPackage(org.hl7.fhir.r4.model);
    var procedure = new org.hl7.fhir.r4.model.Procedure();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  

    //logger.info(&apos;ProcedureResource-&gt;&apos;+JSON.stringify(arg1));

    for(var _id=0;_id&lt;arg1.Ids.length;_id++)
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            procedure.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }
        
    }

    if(text!=&apos;&apos; &amp;&amp; GetNarrative(text)!=null)
    {
        procedure.setText(GetNarrative(text))
    }

    procedure.setStatus(Procedure.ProcedureStatus.valueOf(MapProcedureStatus(arg1.StatusCode.Code)))
    
    procedure.setCode(new CodeableConcept().setCoding(GetCodingList(arg1.Code)));
    procedure.setSubject(new Reference().setReference(patientid));    

    var tempdate=GetEffectiveTimeInfo(arg1);

    if(tempdate.startdatetime!=&apos;&apos; &amp;&amp; tempdate.enddatetime!=&apos;&apos;)
    {
      var period=new Period();
      period.setStartElement(new DateTimeType(formatdate(tempdate.startdatetime)));
      period.setEndElement(new DateTimeType(formatdate(tempdate.enddatetime)));
      procedure.setPerformed(period)
    }  
    else if(tempdate.startdatetime!=&apos;&apos;)
    {
        procedure.setPerformed(new DateTimeType(formatdate(tempdate.startdatetime)))
    }

    /Author Block Start/
    var temprecorder=AuthortoPractictionerRole(arg1.Authors[0].AssignedAuthor);
    if(temprecorder!= undefined)
    {
        procedure.addContained(temprecorder);    
        procedure.setRecorder(new Reference().setReference(&apos;#&apos;+new Resource(temprecorder.getId())));
    }

   
    var temprecorderperson=AuthortoPractictioner(arg1.Authors[0].AssignedAuthor);
    if(temprecorderperson!= undefined)
    {
        procedure.addContained(temprecorderperson);
    }
            
    var temprecorderorg=AuthortoOrganization(arg1.Authors[0].AssignedAuthor.Organization);
    if(temprecorderorg!= undefined)
    {
        procedure.addContained(temprecorderorg);
    }

    /Author Block End/


    if(arg1.hasOwnProperty(&apos;Informants&apos;))
    {
        /Informant Block Start/
        var tempasserter=AuthortoPractictionerRole(arg1.Informants[0].AssignedEntity);
        if(tempasserter!= undefined)
        {
            procedure.addContained(tempasserter);    
            procedure.setAsserter(new Reference().setType(&apos;Practitioner&apos;).setReference(&apos;#&apos;+new Resource(tempasserter.getId())));

        }

      
        var tempasserterperson=AuthortoPractictioner(arg1.Informants[0].AssignedEntity);
        if(tempasserterperson!= undefined)
        {
            procedure.addContained(tempasserterperson);
        }
               
        var tempasserterorg=AuthortoOrganization(arg1.Informants[0].AssignedEntity.Organizations[0]);
        if(tempasserterorg!= undefined)
        {
            procedure.addContained(tempasserterorg);
        }
        /Informant Block End/

   }

   if(arg1.hasOwnProperty(&apos;TargetSiteCodes&apos;))
   {
        for(var _t=0;_t&lt;arg1.TargetSiteCodes.length;_t++)
        {
            var target=arg1.TargetSiteCodes[_t];
            procedure.addBodySite(new CodeableConcept().setCoding(GetCodingList(target)));
        }

   }
   

   if(arg1.hasOwnProperty(&apos;Specimens&apos;))
   {
        for(var _s=0;_s&lt;arg1.Specimens.length;_s++)
       {
            var specimen=arg1.Specimens[_s];

            procedure.addExtension().setUrl(&apos;http://hl7.org/fhir/us/core/StructureDefinition/extension-procedure-specimen&apos;).setValue(new CodeableConcept().setCoding(GetCodingList(specimen.SpecimenRole.SpecimenPlayingEntity.Code)));

       }
   }
   

   if(arg1.hasOwnProperty(&apos;MethodCodes&apos;))
   {
        for(var _m=0;_m&lt;arg1.MethodCodes.length;_m++)
        {
            var method=arg1.MethodCodes[_m];
            procedure.addExtension().setUrl(&apos;https://www.hl7.org/fhir/extension-procedure-method.html&apos;).setValue(new CodeableConcept().setCoding(GetCodingList(method)));
        }
   }

   if(arg1.hasOwnProperty(&apos;PriorityCode&apos;))
   {
        procedure.addExtension().setUrl(&apos;https://www.hl7.org/fhir/extension-procedure-priority.html&apos;).setValue(new CodeableConcept().setCoding(GetCodingList(arg1.PriorityCode)));
        
   }
   


    for(var _perf=0;_perf&lt;arg1.Performers.length;_perf++)
    {
        var tempperformer=arg1.Performers[_perf];

        /Performer Block Start/
        var _tempperformer=AuthortoPractictionerRole(tempperformer.AssignedEntity);
        if(_tempperformer!= undefined)
        {
            procedure.addContained(_tempperformer);    
            procedure.addPerformer(new org.hl7.fhir.r4.model.Procedure.ProcedurePerformerComponent().setActor(new Reference().setType(&apos;Practitioner&apos;).setReference(&apos;#&apos;+new Resource(_tempperformer.getId()))));

            
        }

        
        var tempperformerperson=AuthortoPractictioner(tempperformer.AssignedEntity);
        if(tempperformerperson!= undefined)
        {
            procedure.addContained(tempperformerperson);
        }
                
        var tempperformerorg=AuthortoOrganization(tempperformer.AssignedEntity.Organizations[0]);
        if(tempperformerorg!= undefined)
        {
            procedure.addContained(tempperformerorg);
        }

        /Performer Block End/
        
   }

    for(var _i=0;_i&lt;arg1.Participants.length;_i++)
    {
        var tempparticipant1=arg1.Participants[_i];
        if(tempparticipant1.TypeCode.Name==&apos;LOC&apos; &amp;&amp; (tempparticipant1.ParticipantRole.RoleClassRoot.Name==&apos;SDLOC&apos; || tempparticipant1.ParticipantRole.RoleClassRoot.Name==&apos;PLC&apos;))
        {
            var templocation=LocationResource(tempparticipant1.ParticipantRole);
            if(templocation!=undefined)
            {
                procedure.setLocation(new Reference().setType(&apos;Location&apos;).setReference(&apos;#&apos;+new Resource(templocation.getId())));
                procedure.addContained(templocation)
            }
        }

        if(tempparticipant1.TypeCode.Name==&apos;DEV&apos; &amp;&amp; tempparticipant1.ParticipantRole.RoleClassRoot.Name==&apos;MANU&apos;)
        {
            var tempdevice=DeviceResource(tempparticipant1.ParticipantRole,null,patientid);
            if(tempdevice!=undefined)
            {
                procedure.addFocalDevice(new org.hl7.fhir.r4.model.Procedure.ProcedureFocalDeviceComponent().setManipulated(&apos;#&apos;+new Resource(tempdevice.getId())));
                procedure.addContained(tempdevice)
            }
        }
    }




    for(var _er1=0;_er1&lt;arg1.EntryRelationships.length;_er1++)
    {
        er1=arg1.EntryRelationships[_er1];


        if(er1.hasOwnProperty(&apos;Act&apos;))
        {
            if(er1.TypeCode.Name==&apos;SUBJ&apos; &amp;&amp; er1.Act.MoodCode.Name==&apos;INT&apos;)
            {
                if(er1.Act.Text.Text!=&apos;&apos;)
                {
                    procedure.addNote().setText(er1.Act.Text.Text.trim()) ;
                }
                else if(er1.Act.Text.Reference.TEL_URL.Value!=&apos;&apos;)
                {
                    procedure.addNote().setText(er1.Act.Text.Reference.TEL_URL.Value.trim()) ;
                }
            }
        }

        if(er1.hasOwnProperty(&apos;encounter&apos;))
        {
             if(er1.TypeCode.Name==&apos;COMP&apos;)
            {
                if(er1.encounter.Ids[0].Extension!=&apos;&apos;)
                {
                    procedure.setEncounter(new Reference().setReference(&apos;//Encounter?identifier=&apos;+er1.encounter.Ids[0].Extension));    
                }
                
            }
        }

        if(er1.hasOwnProperty(&apos;Observation&apos;))
        {
            if(er1.TypeCode.Name==&apos;RSON&apos;)
            {
                procedure.addReasonCode(new CodeableConcept().setCoding(GetCodingList(er1.Observation.Values[0].CD)))
            }

            if(er1.TypeCode.Name==&apos;COMP&apos;)
            {
                procedure.addComplication(new CodeableConcept().setCoding(GetCodingList(er1.Observation.Values[0].CD)))
            }
        }
    }

    procedure.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(procedure))));
 //   var oProcedure=JSON.parse(parser.encodeResourceToString(procedure));
    //logger.info(&apos;procedureResource-&gt;&apos;+parser.encodeResourceToString(procedure));
   


    return procedure;
    

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>623e1bf0-dc1b-4402-8dc2-3c71563551ab</id>
            <name>ResultBundle</name>
            <revision>7</revision>
            <lastModified>
              <time>1669212315736</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function ResultBundle(arg1,text,patientid,bundleId) 
{
   
    
   var obj=JSON.parse(arg1);
   
   if(obj.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=obj.Entries.length;
       bundle.entry=[];
   }
   

   //looping through entries
   for(var _a=0;_a&lt;obj.Entries.length;_a++)
   {
        var record=obj.Entries[_a]
        var temp={};
        if(record.hasOwnProperty(&apos;Organizer&apos;))
        {
        	if(record.Organizer!=null)
        	{&#xd;        		temp.resource=ResultResource(record.Organizer,text,patientid,obj.Code);    	
        		bundle.entry.push(temp)	;

        		SavefhirResource(temp.resource,bundleId,obj.Code);
        	}&#xd;        	
        }
        
        
   }  

//   logger.info(&apos;ResultBundle-&gt;&apos;+JSON.stringify(bundle)) 

   return bundle;
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>bb55803a-fefe-4bb1-b9dc-aabbd5db0033</id>
            <name>ResultResource</name>
            <revision>16</revision>
            <lastModified>
              <time>1669135774912</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function ResultResource(arg1,txt,patientid)
{
    importPackage(org.hl7.fhir.r4.model);
    var diagnosticreport = new org.hl7.fhir.r4.model.DiagnosticReport();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  
   
    for(var _id=0;_id&lt;arg1.Ids.length;_id++)
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            diagnosticreport.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }  
    }

    /*
    if(txt!=&apos;&apos; &amp;&amp; GetNarrative(txt)!=null)
    {
        diagnosticreport.setText(GetNarrative(txt))
    }
*/
    diagnosticreport.setStatus(DiagnosticReport.DiagnosticReportStatus.valueOf(MapResultStatus(arg1.StatusCode.Code)));

    diagnosticreport.setCode(new CodeableConcept().setCoding(GetCodingList(arg1.Code)));
    diagnosticreport.setSubject(new Reference().setReference(patientid));    

    var tempdate=GetEffectiveTimeInfo(arg1);
    if(tempdate.startdatetime!=&apos;&apos; &amp;&amp; tempdate.enddatetime!=&apos;&apos;)
    {
        diagnosticreport.setEffective(new Period().setStartElement(new DateTimeType(formatdate(tempdate.startdatetime))).setEndElement(new DateTimeType(formatdate(tempdate.enddatetime))))
    }
    else if(tempdate.startdatetime!=&apos;&apos;)
    {
        diagnosticreport.setEffective(new DateTimeType(formatdate(tempdate.startdatetime)));
    }

    if(arg1.hasOwnProperty(&apos;Specimens&apos;))
    {
        for(var _s=0;_s&lt;arg1.Specimens.length;_s++)
        {
            var tempspecimen=arg1.Specimens[_s];

            var tempspecimen=SpecimenResource(tempspecimen.SpecimenRole);
            if(tempspecimen!=undefined)
            {
                diagnosticreport.addSpecimen(new Reference().setReference(&apos;#&apos;+new Resource(tempspecimen.getId())));  
                diagnosticreport.addContained(tempspecimen)

            }
            
        }    
    }

    if(arg1.hasOwnProperty(&apos;Informants&apos;))
    {
      if(arg1.Informants[0].AssignedEntity.Organizations.length&gt;0)
      {
        if(arg1.Informants[0].AssignedEntity.Organizations[0].Names.length&gt;0)
        {
            if(arg1.Informants[0].AssignedEntity.Organizations[0].Names[0].Text!=&apos;&apos;)
            {
                diagnosticreport.addPerformer(new Reference().setDisplay(arg1.Informants[0].AssignedEntity.Organizations[0].Names[0].Text.trim()))
            }
        }
      }

    }

    
   
   if(arg1.hasOwnProperty(&apos;Components&apos;))
   {
        for(var _comp=0;_comp&lt;arg1.Components.length&gt;0;_comp++)
       {
          var tempcomp=arg1.Components[_comp];
          if(tempcomp.hasOwnProperty(&apos;Observation&apos;))
          {
           
            var tempcomponent=VitalComponent(tempcomp.Observation,patientid);
            if(tempcomponent!=undefined)
            {

                var observationid=new Reference(&apos;#&apos;+new Resource(tempcomponent.getId()));
                diagnosticreport.addResult(observationid);
                diagnosticreport.addContained(tempcomponent)    
            } 
            
          }
          
     
       }

 
   }
   
    	diagnosticreport.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(diagnosticreport))));
 //   var oDiagnosticReport=JSON.parse(parser.encodeResourceToString(diagnosticreport));
    //logger.info(&apos;Result Resource-&gt;&apos;+parser.encodeResourceToString(diagnosticreport));

    if(countkey(parser.encodeResourceToString(diagnosticreport))&gt;4)
    {
        //SavefhirResource(diagnosticreport,bundleid,section)    ;
        return diagnosticreport;
    }
    
//    return diagnosticreport;
      

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>3643de2d-d60d-40d4-90a4-f282f3f1dff2</id>
            <name>SavefhirResource</name>
            <revision>53</revision>
            <lastModified>
              <time>1668251838755</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function SavefhirResource(resource,bundleId,section)
{
	
	var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    	var parser = ctx.newJsonParser();  
   	var savedbConn;

	var resourceType=resource.getResourceType();
	var resourceId=resource.getId();
	
	//var resource=parser.encodeResourceToString(resource);
	//logger.info(&apos;SavefhirResource-:resource-&gt;&apos;+resource);
	
	var resource=JSON.parse(JSON.stringify(parser.encodeResourceToString(resource)).replace(/&apos;/g,&quot;\\\\&apos;&quot;));
	//logger.info(&apos;SavefhirResource-:resource-&gt;&apos;+resource);
	
	

   try 
   {
        savedbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.cj.jdbc.Driver&apos;,&apos;jdbc:mysql://localhost:3306/genzeon&apos;,&apos;root&apos;,&apos;test&apos;);

       // var sql=&quot;insert into fhirresourcedata(ResourceData,resourceType,resourceId,SourceDataId) values(&apos;&quot;+resource+&quot;&apos;,&apos;&quot;+resourceType+&quot;&apos;,&apos;&quot;+resourceId+&quot;&apos;,(select distinct SourceDataId from sourcedata join requestinfo on requestinfo.requestinfoid=sourcedata.requestinfoid where bundleId=&apos;&quot;+bundleId+&quot;&apos;))&quot;;
        var sql=&quot;insert into fhirresourcedata(ResourceData,resourceType,resourceId,SourceDataId) values(&apos;&quot;+resource+&quot;&apos;,&apos;&quot;+resourceType+&quot;&apos;,&apos;&quot;+resourceId+&quot;&apos;,(select distinct SourceDataId from sourcedata join requestinfo on requestinfo.requestinfoid=sourcedata.requestinfoid where bundleId=&apos;&quot;+bundleId+&quot;&apos;)) ON DUPLICATE KEY UPDATE ResourceData = &apos;&quot;+resource+&quot;&apos;;&quot; 
       // logger.info(&apos;SavefhirResource-:sql-&gt;&apos;+sql);
        var result = savedbConn.executeUpdateAndGetGeneratedKeys(sql);
        
        while(result.next())
        {
        	
        	var _fhirresourcedataid=result.getInt(1)
        }
        //

      if(section!=undefined &amp;&amp; section!=null &amp;&amp; _fhirresourcedataid!=undefined)
      {
        var sql=&quot;insert IGNORE into ccdsection(fhirresourcedataid,display,code,codesystem,codesystemname) values(&apos;&quot;+_fhirresourcedataid+&quot;&apos;,&apos;&quot;+section.DisplayName+&quot;&apos;,&apos;&quot;+section.Code+&quot;&apos;,&apos;&quot;+section.CodeSystem+&quot;&apos;,&apos;&quot;+section.CodeSystemName+&quot;&apos;)&quot;;
     //   logger.info(&apos;SavefhirResource-:sql-&gt;&apos;+sql);
        result = savedbConn.executeUpdate(sql);        
      }

   } 
   finally 
   {
      if (savedbConn) 
      { 
         savedbConn.close();
      }
   }

}

 </code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>08314791-42c0-458f-8b5a-cc49019f8bf2</id>
            <name>SocialHistoryBundle</name>
            <revision>9</revision>
            <lastModified>
              <time>1669212316470</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function SocialHistoryBundle(arg1,text,patientid,bundleid) 
{
   
    
   var obj=JSON.parse(arg1);
   
   if(obj.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=obj.Entries.length;
       bundle.entry=[];
   }
   

   //looping through entries
   for(var _a=0;_a&lt;obj.Entries.length;_a++)
   {
        var record=obj.Entries[_a]
        var temp={};
        
        temp.resource=ObservationResource(record.Observation,text,patientid,obj.Code);    
        
       SavefhirResource(temp.resource,bundleid,obj.Code);

        bundle.entry.push(temp)
   }  

   //logger.info(&apos;SocialHistoryBundle-&gt;&apos;+JSON.stringify(bundle)) 
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>49c09f37-1021-4fba-91cf-b2831e762f84</id>
            <name>SpecimenResource</name>
            <revision>2</revision>
            <lastModified>
              <time>1667996678924</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function SpecimenResource(arg1)
{
   //Takes input from SpecimenRole Node
   importPackage(org.hl7.fhir.r4.model);
   var specimen = new org.hl7.fhir.r4.model.Specimen();
   var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
   var parser = ctx.newJsonParser();

   for(var _id=0;_id&lt;arg1.Ids.length;_id++)
   {
      if(arg1.Ids[_id].Extension!=&apos;&apos;)
      {
         specimen.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
      }
   }

   if(GetCodingList(arg1.SpecimenPlayingEntity.Code).length&gt;0)
   {
      specimen.setType(new CodeableConcept().setCoding(GetCodingList(arg1.SpecimenPlayingEntity.Code)));   
   }
   

   if(arg1.SpecimenPlayingEntity.hasOwnProperty(&apos;Quantities&apos;))
   {
      if(arg1.SpecimenPlayingEntity.Quantities.length&gt;0)
      {
         if(arg1.SpecimenPlayingEntity.Quantities[0].Value!=&apos;&apos;)
         {
            specimen.setCollection(new org.hl7.fhir.r4.model.Specimen.SpecimenCollectionComponent().setQuantity(GetQuantity(arg1.SpecimenPlayingEntity.Quantities[0])));         
         }
      }
   }

   specimen.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(specimen))));
   
   
   if(countkey(parser.encodeResourceToString(specimen))&gt;2)
   {
      return specimen
   }
   
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>7604e8c3-d46c-461e-949c-82f992cf0c3b</id>
            <name>VitalBundle</name>
            <revision>8</revision>
            <lastModified>
              <time>1669212317837</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function VitalBundle(arg1,text,patientid,bundleId) 
{
   
    
   var obj=JSON.parse(arg1);
   
   if(obj.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=obj.Entries.length;
       bundle.entry=[];
   }
   

   //looping through entries
   for(var _a=0;_a&lt;obj.Entries.length;_a++)
   {
        var record=obj.Entries[_a]
        var temp={};
        
        temp.resource=VitalResource(record.Organizer,text,patientid,obj.Code);    
        bundle.entry.push(temp);
       SavefhirResource(temp.resource,bundleId,obj.Code);
   }  

   //logger.info(&apos;VitalBundle-&gt;&apos;+JSON.stringify(bundle)) 
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>9eacf259-f72c-4aeb-9c1a-3d22b3c56a30</id>
            <name>VitalComponent</name>
            <revision>21</revision>
            <lastModified>
              <time>1668247095282</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function VitalComponent(arg1,patientid)
{
   importPackage(org.hl7.fhir.r4.model);
    var observation = new org.hl7.fhir.r4.model.Observation();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  
   
    for(var _id=0;_id&lt;arg1.Ids.length;_id++)
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            observation.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }  
    }

    

   observation.setStatus(Observation.ObservationStatus.FINAL);

 
   
   //logger.info(&apos;ObservationResource 2&apos;);
   observation.setCode(new CodeableConcept().setCoding(GetCodingList(arg1.Code)));
   observation.setSubject(new Reference().setReference(patientid));    

   var tempdate=GetEffectiveTimeInfo(arg1);
   //logger.info(&apos;VitalComponent-&gt;&apos;+JSON.stringify(tempdate))
   if(tempdate.startdatetime!=&apos;&apos; &amp;&amp; tempdate.enddatetime!=&apos;&apos;)
   {
      observation.setEffective(new Period().setStartElement(new DateTimeType(formatdate(tempdate.startdatetime))).setEndElement(new DateTimeType(formatdate(tempdate.enddatetime))))
   }
   else if(tempdate.startdatetime!=&apos;&apos;)
    {
        observation.setEffective(new DateTimeType(formatdate(tempdate.startdatetime)));
    }


   if(arg1.hasOwnProperty(&apos;Values&apos;)) 
   {
      for(var _v=0;_v&lt;arg1.Values.length;_v++)
      {
         observation.setValue(GetValueNode(arg1.Values[_v]));      
      }
      
   }
   
    
    var component=org.hl7.fhir.r4.model.Observation.ObservationComponentComponent();

    if(arg1.hasOwnProperty(&apos;InterpretationCode&apos;))
    {
        for(var _i=0;_i&lt;arg1.InterpretationCode.length;_i++)
        {
            var tempinterpretation=arg1.InterpretationCode[_i];
              
            if(GetCodingList(tempinterpretation).length&gt;0)
            {
                component.addInterpretation(new CodeableConcept().setCoding(GetCodingList(tempinterpretation)))
            }
        }
            
    }


    if(arg1.hasOwnProperty(&apos;RefrenceRanges&apos;))
    {  
        for(var _r=0;_r&lt;arg1.RefrenceRanges.length;_r++)
        {
            var temprefrange=arg1.RefrenceRanges[_r];
            var referencerange=new org.hl7.fhir.r4.model.Observation.ObservationReferenceRangeComponent();

            if(temprefrange.ObservationRange.hasOwnProperty(&apos;Text&apos;))
            {
                if(temprefrange.ObservationRange.Text.Text!=&apos;&apos;)
                {
                    referencerange.setText(temprefrange.ObservationRange.Text.Text.trim());  
                }
                else if(temprefrange.ObservationRange.Text.hasOwnProperty(&apos;Reference&apos;))
                {
                    if(temprefrange.ObservationRange.Text.Reference.TEL_URL.Value!=&apos;&apos;)
                    {
                        referencerange.setText(temprefrange.ObservationRange.Text.Reference.TEL_URL.Value.trim());
                    }
                }

                if(temprefrange.ObservationRange.hasOwnProperty(&apos;ANY&apos;))
                {
                    referencerange.setLow(GetQuantity(temprefrange.ObservationRange.ANY.IVL_PQ.Low.PQ));
                    referencerange.setHigh(GetQuantity(temprefrange.ObservationRange.ANY.IVL_PQ.High.PQ));    
                }
                
                  
            }

        }
    }
   
    if(arg1.hasOwnProperty(&apos;Informants&apos;))
    {
      if(arg1.Informants[0].AssignedEntity.Organizations.length&gt;0)
      {
        if(arg1.Informants[0].AssignedEntity.Organizations[0].Names.length&gt;0)
        {
            if(arg1.Informants[0].AssignedEntity.Organizations[0].Names[0].Text!=&apos;&apos;)
            {
                observation.addPerformer(new Reference().setDisplay(arg1.Informants[0].AssignedEntity.Organizations[0].Names[0].Text.trim()))
            }
        }
      }

    }


    if(component!=undefined)
    {
        observation.addComponent(component);    
    }

    if(referencerange!=undefined)
    {
        observation.addReferenceRange(referencerange);    
    }
    
    


    for(var _er1=0;_er1&lt;arg1.EntryRelationships.length;_er1++)
    {
        var er1=arg1.EntryRelationships[_er1];

         if(er1.hasOwnProperty(&apos;encounter&apos;))
         {
             if(er1.TypeCode.Name==&apos;COMP&apos;)
            {
                if(er1.encounter.Ids[0].Extension!=&apos;&apos;)
                {
                    observation.setEncounter(new Reference().setReference(&apos;//Encounter?identifier=&apos;+er1.encounter.Ids[0].Extension));    
                }
                
            }
         }

         if(er1.hasOwnProperty(&apos;Act&apos;))
         {   
            //Patient Instruction
            if(er1.TypeCode.Name==&apos;SUBJ&apos;)
            {
                if(er1.Act.Text.Text!=&apos;&apos;)
                {
                  observation.addNote().setText(er1.Act.Text.Text.trim()) ;
                }
                else if(er1.Act.Text.Reference.TEL_URL.Value!=&apos;&apos;)
                {
                  observation.addNote().setText(er1.Act.Text.Reference.TEL_URL.Value.trim()) ;
                }
            }
         }



    }
  


   observation.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(observation))));
   if(countkey(parser.encodeResourceToString(observation))&gt;2)
   {
    
        return observation
   }

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>be554cb7-0d13-4069-ab40-4c2ac5ac4bb2</id>
            <name>VitalResource</name>
            <revision>17</revision>
            <lastModified>
              <time>1668946917191</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function VitalResource(arg1,txt,patientid)
{
    importPackage(org.hl7.fhir.r4.model);
    var observation = new org.hl7.fhir.r4.model.Observation();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  
   
    for(var _id=0;_id&lt;arg1.Ids.length;_id++)
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            observation.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }  
    }

    if(txt!=&apos;&apos; &amp;&amp; GetNarrative(txt)!=null)
    {
        observation.setText(GetNarrative(txt))
    }

    observation.setStatus(Observation.ObservationStatus.FINAL);

   
    observation.addCategory(new CodeableConcept().setCoding(GetCodingList(arg1.Code)));
   
   
    observation.setCode(new CodeableConcept().setCoding(GetCodingList(arg1.Code)));
    observation.setSubject(new Reference().setReference(patientid));    

    var tempdate=GetEffectiveTimeInfo(arg1);
    if(tempdate.startdatetime!=&apos;&apos; &amp;&amp; tempdate.enddatetime!=&apos;&apos;)
    {
        observation.setEffective(new Period().setStartElement(new DateTimeType(formatdate(tempdate.startdatetime))).setEndElement(new DateTimeType(formatdate(tempdate.enddatetime))))
    }
    else if(tempdate.startdatetime!=&apos;&apos;)
    {
        observation.setEffective(new DateTimeType(formatdate(tempdate.startdatetime)));
    }

   
   
   for(var _comp=0;_comp&lt;arg1.Components.length&gt;0;_comp++)
   {
      var tempcomp=arg1.Components[_comp];
      if(tempcomp.hasOwnProperty(&apos;Observation&apos;))
      {
       
        var tempcomponent=VitalComponent(tempcomp.Observation,patientid);
        if(tempcomponent!=undefined)
        {

            var observationid=new Reference(&apos;#&apos;+new Resource(tempcomponent.getId()));
            observation.addHasMember(observationid);
            observation.addContained(tempcomponent)    
        } 
        
      }
      
 
   }


    observation.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(observation))));
 //   var oObservation=JSON.parse(parser.encodeResourceToString(observation));
    //logger.info(&apos;ObservationResource-&gt;&apos;+parser.encodeResourceToString(observation));

    return observation;
   

}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="3.12.0">
        <id>285e28ea-e844-4158-97a3-d0ee577778ac</id>
        <name>utilityfunctions</name>
        <revision>26</revision>
        <lastModified>
          <time>1669130240389</time>
          <timezone>Asia/Calcutta</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>false</includeNewChannels>
        <enabledChannelIds>
          <string>268c87ee-b6cc-435b-a498-3484197be2ca</string>
          <string>abf8a28b-b96e-439d-ae18-e79e27a26915</string>
          <string>efd79df6-4275-42e1-b342-4c186eb0dccc</string>
          <string>264cf267-3368-4571-87d8-c0562c3a6912</string>
          <string>cdc68cb2-21f4-447e-b7b9-a0d120a91aed</string>
          <string>40a447a8-89f7-494c-b224-5880c7e86c73</string>
          <string>aba9f80e-e0c2-4b14-b365-9f5f416d51e5</string>
          <string>6485566a-e026-44c1-98cf-f7c62a948022</string>
          <string>617546b5-34e3-4e61-9b1d-5c40909c3787</string>
          <string>92472400-a82a-4805-b3fe-f92b5980aa2f</string>
          <string>b9b54c9b-eda4-43c9-8109-fa41bd6cc8fb</string>
          <string>601011b3-f0e9-4bbc-9cf4-dfa658c79e09</string>
          <string>dd76bbd8-85b9-4718-b8e2-bdcbb018a611</string>
          <string>8199c8b2-befa-4924-a390-526c4f3b1d31</string>
        </enabledChannelIds>
        <disabledChannelIds>
          <string>41380607-1411-4b46-a8a7-460267132a58</string>
          <string>7ce93031-5a1b-421b-bc6f-8de76ee2cba1</string>
          <string>5220c4fd-f531-43ff-b9ce-27a4cc8bfa52</string>
          <string>a8209ef7-0a7f-440b-9cdf-8cf0b7b1ab3d</string>
          <string>33599d3c-8359-4fab-b161-9d99484c8247</string>
          <string>c51960a1-1265-4d64-8c3f-5db07bb89f7c</string>
          <string>02ac2b89-fb25-4fdb-b91f-d3db2de6f3d6</string>
          <string>abdefaaf-d511-480e-9e7f-beeb9c320b63</string>
          <string>301fad6a-2981-4e1d-868c-8dc98f755f2d</string>
          <string>e77c34d0-0846-4d33-8455-6032d1c8fbc8</string>
          <string>beba7b91-73a8-4056-8d22-ecd0109d8675</string>
        </disabledChannelIds>
        <codeTemplates>
          <codeTemplate version="3.12.0">
            <id>6375dbd4-5726-444c-a676-1d70b4d79362</id>
            <name>checkdata</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998804</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function checkdata(arg1) {
	
   var chk=0;
	if(arg1!=null &amp;&amp; arg1!=&apos;&apos; &amp;&amp; arg1!= undefined)
   {
      chk=1;
   }

      return chk;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>3d9a2e3c-a565-493f-8555-6c049b744904</id>
            <name>clean</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999418</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
 
function clean(obj) 
{
  for (var propName in obj) 
  {
    if (obj[propName] === null || obj[propName] === undefined || obj[propName]==&apos;&apos;) 
    {
      delete obj[propName];
    }
  }
  return obj
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>a91ad874-adde-466e-b80f-c160fd052bf5</id>
            <name>countkey</name>
            <revision>22</revision>
            <lastModified>
              <time>1666605911309</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function countkey(arg1) {
	// TODO: Enter code here
	var count = 0;
	var str=JSON.parse(arg1)
	//logger.info(&apos;countkey-&gt;&apos;+Object.keys(str).length);
	
	

for(var _c=0;_c&lt;Object.keys(str).length;_c++) {

    // increase the count
    //logger.info(&apos;countkey-&gt;&apos;+count+&apos;:&apos;+arg1);
    ++count;
}
//logger.info(&apos;countkey-&gt;&apos;+count);

 return count;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>49812c1b-585d-4c89-a1d2-cc45a171abe4</id>
            <name>datehandler</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999526</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function datehandler(arg1)
{
	var dateobj={};
	
	
	if(arg1!=&apos;&apos;)
	{
		//logger.info(&apos;datehandler-&gt;&apos;+arg1+&apos;:&apos;+String(arg1).length);
		if(String(arg1).length&gt;=4)
		{
			//logger.info(&apos;datehandler-&gt;&apos;+arg1+&apos;:&apos;+arg1.substr(4,2)+&apos;:&apos;+arg1.substr(6,2));
			var year=arg1.substr(0,4);
			var month=arg1.substr(4,2)
			var day=arg1.substr(6,2);
			var datobj=new Date(year,month,day);
			
			
			
			if((month&lt;=12 &amp;&amp; month&gt;0)&amp;&amp;(day&gt;0 &amp;&amp; day&lt;=31))
			{
				var temp=stripTZ(arg1);
				
				dateobj.date=temp[0];
				//logger.info(&apos;datehandler stripTZ op-&gt;&apos;+dateobj.date);
				dateobj.date=zeropadding(&apos;00000000000000&apos;,dateobj.date,&apos;&apos;);
				//logger.info(&apos;Date Handler valid-&gt;&apos;+datobj+&apos;/&apos;+isValidDate(dateobj.date));
				if(isValidDate(dateobj.date))
				{
					dateobj.date=dateobj.date;	
				}
				else
				{
					dateobj.date=&apos;00000000000000&apos;;
				}
					
				dateobj.timezone=temp[1];
			}
			else
			{
				dateobj.date=&apos;00000000000000&apos;;
				dateobj.timezone=&apos;&apos;;

			}
		}
		else
		{
			dateobj.date=&apos;00000000000000&apos;;
			dateobj.timezone=&apos;&apos;;
			
		}
	}
	else
	{

		dateobj.date=&apos;00000000000000&apos;
		dateobj.timezone=&apos;&apos;;
	}

	//logger.info(&apos;datehandler-&gt;&apos;+arg1+&apos;:&apos;+JSON.stringify(dateobj));
	return dateobj;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>dd2a302e-186c-476e-a168-245acbfb0907</id>
            <name>formatdate</name>
            <revision>22</revision>
            <lastModified>
              <time>1668949535690</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function formatdate(arg1) {
	// TODO: Enter code here
	//logger.info(&apos;formatdate-&gt;&apos;+arg1);
	var arg1=String(arg1);
	if(arg1.length==19 &amp;&amp; (arg1.includes(&apos;-&apos;) || arg1.includes(&apos;+&apos;)))
	{
		var date=arg1.substr(0,8);
		
		var time=arg1.substr(8,6);
		
		var timezone=arg1.substr(15,4);

		if(arg1.includes(&apos;-&apos;))
		{
			var operation=&apos;-&apos;
		}
		else
		{
			var operation=&apos;+&apos;
		}
		
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, date)+&apos;T&apos;+DateUtil.convertDate(&quot;HHmmss&quot;, &quot;HH:mm:ss&quot;, time)+operation+DateUtil.convertDate(&quot;HHmm&quot;, &quot;HH:mm&quot;, timezone);
		
	}
	else if(arg1.length==17 &amp;&amp; (arg1.includes(&apos;-&apos;) || arg1.includes(&apos;+&apos;)))
	{
		var date=arg1.substr(0,8);
		
		var time=arg1.substr(8,4)+&apos;00&apos;;
		
		var timezone=arg1.substr(13,4);

		if(arg1.includes(&apos;-&apos;))
		{
			var operation=&apos;-&apos;
		}
		else
		{
			var operation=&apos;+&apos;
		}
		
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, date)+&apos;T&apos;+DateUtil.convertDate(&quot;HHmmss&quot;, &quot;HH:mm:ss&quot;, time)+operation+DateUtil.convertDate(&quot;HHmm&quot;, &quot;HH:mm&quot;, timezone);
		
	}
	else if(arg1.length==8)
	{
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, arg1);
	}
	else	if(arg1.length==14)
	{
		var date=arg1.substr(0,8);
		
		var time=arg1.substr(8,6);
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, date)+&apos;T&apos;+DateUtil.convertDate(&quot;HHmmss&quot;, &quot;HH:mm:ss&quot;, time);
		
	}
	else	if(arg1.length==12)
	{
		var date=arg1.substr(0,8);
		
		var time=arg1.substr(8,4);
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, date)+&apos;T&apos;+DateUtil.convertDate(&quot;HHmmss&quot;, &quot;HH:mm:ss&quot;, time+&apos;00&apos;);
		
	}
	else	if(arg1.length==6)
	{
		
		return DateUtil.convertDate(&quot;yyyyMM&quot;, &quot;yyyy-MM&quot;, arg1);
		
	}
	else	if(arg1.length==4)
	{
		
		return DateUtil.convertDate(&quot;yyyy&quot;, &quot;yyyy&quot;, arg1);
		
	}
}



function parseCCDBirthDate(str)
{
	var str=String(str);
	if(str.length&gt;=8)
	{
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, str.substr(0,8));
	}

	if(str.length&gt;5 &amp;&amp; str.length&lt;8)
	{
		return DateUtil.convertDate(&quot;yyyyMM&quot;, &quot;yyyy-MM-dd&quot;, str.substr(0,6));
	}

	if(str.length&lt;=5)
	{
		return str.substr(0,4);
	}
	
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>fe69c018-672d-4f2d-b998-b257360b8aae</id>
            <name>GetAnyTypeFeatureMap</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307994710</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetAnyTypeFeatureMap(arg1)
{
	var text2=[];
	var ct=0;
	var fmlen=arg1.AnyTypeFeatureMap.length;
	logger.info(&apos;GetAnyTypeFeatureMap ct-&gt;&apos;+ct);
	logger.info(&apos;GetAnyTypeFeatureMap text2-&gt;&apos;+text2);
	logger.info(&apos;GetAnyTypeFeatureMap fmlen-&gt;&apos;+fmlen);

	for(s=0;s&lt;fmlen;s++)
	{
		var s1=arg1.AnyTypeFeatureMap[s];
		logger.info(&apos;GetAnyTypeFeatureMap s-&gt;&apos;+s);
		if(s1.hasOwnProperty(&apos;AnyTypeFeatureMap&apos;))
		{
			if(s1.AnyTypeFeatureMap.length&gt;0)
			{
				text2[ct]=GetAnyTypeFeatureMap(s1);
				ct=ct+1;
				logger.info(&apos;In Recursive GetAnyTypeFeatureMap ct-&gt;&apos;+ct+&apos;:&apos;+s);
				logger.info(&apos;In Recursive GetAnyTypeFeatureMap text2-&gt;&apos;+text2);

			}
		}
		else if(s1.hasOwnProperty(&apos;value&apos;))
		{
			text2[ct]=s1.value;
			ct=ct+1;
			logger.info(&apos;In GetAnyTypeFeatureMap ct-&gt;&apos;+ct+&apos;:&apos;+s);
			logger.info(&apos;In GetAnyTypeFeatureMap text2-&gt;&apos;+text2);

		}
		else
		{
			//do nothing
		}
		
	}

	return text2;

}

</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>3bdf50d4-031e-4d56-a92e-fd0a7c7eb9df</id>
            <name>GetAuthorid</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996483</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetAuthorid(arg1)
{
	//logger.info(&apos;GetAuthorid-&gt;len&apos;+arg1.length)
	if(arg1.length&gt;0)
	{
		var authorid=saveauthor(JSON.stringify(arg1));
		var _auth=authorid[0];
		//logger.info(&apos;GetAuthorid1-&gt;&apos;+authorid);
		//logger.info(&apos;GetAuthorid2-&gt;&apos;+_auth);
		if(_auth==undefined)
		{
			_auth=0
		}
		//logger.info(&apos;GetAuthorid3-&gt;&apos;+_auth);
	}
	else
	{
		var _auth=0;
	}
	
	return _auth;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>acf98c74-87d0-4568-b198-740c0e2df45d</id>
            <name>Getcareteamid</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307995856</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function Getcareteamid(arg1)
{

	if(arg1.length&gt;0)
	{
		var ctid=savecareteam(arg1);
		var _ctid=ctid[0];
	}
	else
	{
		var _ctid=0;
	}
	
	return _ctid;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>2e896b30-cd62-4413-a3f6-216b603dc0b5</id>
            <name>GetClinakosId</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999997</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetClinakosId() 
{
	var filename=sourceMap.get(&apos;originalFilename&apos;);
	var n=filename.lastIndexOf(&apos;^&apos;);
	var id=filename.substring(n + 1);
	id=id.replace(&apos;xml&apos;,&apos;&apos;);

	if(id&gt;0)
	{
		return id;
	}
	else
	{
		return 0;
	}
	
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>6dfbb895-7bb6-477d-8cb5-6f24325e75dd</id>
            <name>GetEffectiveTimeInfo</name>
            <revision>3</revision>
            <lastModified>
              <time>1667155719716</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetEffectiveTimeInfo(arg1)
{
	var obj={};
	
	obj.startdatetime=&apos;&apos;;
	obj.enddatetime=&apos;&apos;;
	obj.frequency=&apos;&apos;;
	obj.frequencyunit=&apos;&apos;;
	
	if(arg1.hasOwnProperty(&apos;EffectiveTimes&apos;))
	{

		var tempdate=GetTimeandFrequency(arg1.EffectiveTimes);
		obj.startdatetime=tempdate.startdate;
		obj.enddatetime=tempdate.enddate;
		obj.frequency=tempdate.frequency;
		obj.frequencyunit=tempdate.frequencyunit;
		//logger.info(&apos;GetEffectiveTimeInfo:obj.enddatetime-&gt;&apos;+obj.enddatetime)
	}
	else if(arg1.hasOwnProperty(&apos;EffectiveTime&apos;))
	{
		if(arg1.EffectiveTime.Low.TS.Value!=&apos;&apos; || arg1.EffectiveTime.High.TS.Value!=&apos;&apos;)
		{
			obj.startdatetime=arg1.EffectiveTime.Low.TS.Value
			obj.enddatetime=arg1.EffectiveTime.High.TS.Value
		}
		else
		{
			obj.startdatetime=arg1.EffectiveTime.Value.Value;
			//logger.info(&apos;GetEffectiveTimeninfo startdatetime -&gt;&apos;+arg1.EffectiveTime.Value.Value);
		}
	}

	return obj;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>d2a8b181-1e38-4b4d-846e-51cc8c680280</id>
            <name>GetHashValue</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996279</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>

function GetHashValue(data)
{
	var hashingFunction = function(string) {
	    return hex_sha256(string); // You can use this one: http://pajhome.org.uk/crypt/md5/
	};
	var hash = jsonHash(
	    data, 
	    hashingFunction,
	    {
	        sortObject: true,          // Sort Maps before hashing, defaults to true 
	        sortArrays: false,         // Sort Arrays before hashing, defaults to false
	        normalizeKeyCasing: false  // Convert all keys to lower case before hashing, defaults to false
	    }
	);
	logger.info(hash);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>7d69c70e-48ae-45a2-9c54-ffaa0b4188e6</id>
            <name>GetOrganizationid</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996557</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetOrganizationid(arg1)
{
	var id=0;	
	if(arg1.length&gt;0)
	{
		if(Object.keys(arg1[0]).length&gt;0)
		{
			id=saveorg(arg1[0]);
			
		}
	}

	if(id==undefined || id == null)
	{
		id=0;
	}
	
	
	return id;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>c3391887-f0a1-465d-9d53-d03adc5dc986</id>
            <name>GetPerformerid</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996294</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetPerformerid(arg1)
{
	var id=0;
	if(arg1.length&gt;0)
	{
	
		if(Object.keys(arg1[0]).length&gt;0)
		{
			id=savepractitionerrole(arg1[0]);
			
		}

		if(id==undefined)
		{
			id=0
		}
	}
	else if(Object.keys(arg1).length&gt;0)
	{
	
		id=savepractitionerrole(arg1);
			
		
		if(id==undefined)
		{
			id=0
		}
	}
	
	
	return id;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>ef2f4bb3-57c0-4a11-8bdf-9ecd220cabde</id>
            <name>GetRelatedPersonid</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307995721</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetRelatedPersonid(arg1,ptid)
{

	if(arg1.length&gt;0)
	{
		var id=saverelatedperson(arg1,ptid);
		
	}
	if(id==undefined || id==null || id==&apos;&apos;)
	{
		var id=0;
	}
	
	return id;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>516ddb75-54fd-433d-b332-c47ac0452f83</id>
            <name>GetSupplyid</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997464</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetSupplyid(arg1)
{

	if(arg1.length&gt;0)
	{
		var supplyid=savesupply(arg1);
		var _supply=supplyid[0];
	}
	else
	{
		var _supply=0;
	}
	
	return _supply;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>205f445b-5445-42c9-bcca-13578383e0d2</id>
            <name>GetTextValue</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999800</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetTextValue(arg1)
{
	var text1=[];
	var ct1=0;
	//logger.info(&apos;GetTextValue ct1-&gt;&apos;+ct1);
	//logger.info(&apos;GetTextValue text1-&gt;&apos;+text1);

	var len=arg1.FeatureMap.length;
	//logger.info(&apos;GetTextValue len-&gt;&apos;+len);

	for(t=0;t&lt;len;t++)
	{
		t1=arg1.FeatureMap[t];
		if(t1.hasOwnProperty(&apos;AnyTypeFeatureMap&apos;))
		{
			if(t1.AnyTypeFeatureMap.length&gt;0)
			{
				var len1=t1.AnyTypeFeatureMap.length
				for(z=0;z&lt;len1;z++)
				{
					var t2=t1.AnyTypeFeatureMap[z];
					if(t2.hasOwnProperty(&apos;AnyTypeFeatureMap&apos;))
					{
						if(t2.AnyTypeFeatureMap.length&gt;0)
						{
							if(t2.AnyTypeFeatureMap[0].hasOwnProperty(&apos;value&apos;))
							{
								text1[ct1]=t2.AnyTypeFeatureMap[0].value;
								ct1=ct1+1;
							}
						}
					}
					else
					{
						text1[ct1]=t2.value;
						ct1=ct1+1;
					}
					

				}
			}
		}
		else if(t1.hasOwnProperty(&apos;value&apos;))
		{
			if(t1.value!=&apos;&apos;)
			{
				text1[ct1]=t1.value;
				ct1=ct1+1;
				//logger.info(&apos;In FeatureMap Value GetTextValue ct1-&gt;&apos;+ct1+&apos;:&apos;+t);
				//logger.info(&apos;In FeatureMap Value GetTextValue text1-&gt;&apos;+text1);

			}
		}
		else
		{
			//do nothing
		}

		
	}
	//logger.info(&apos;GetTextValue text1-&gt;&apos;+text1.join());
	return text1.join();
}


</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>37f27afc-e5ea-476b-919a-21f74da9c906</id>
            <name>GetTimeandFrequency</name>
            <revision>14</revision>
            <lastModified>
              <time>1667155742157</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetTimeandFrequency(arg1)
{
	//logger.info(&apos;GetTimeandFrequency in-&gt;&apos;+JSON.stringify(arg1));
	var len=arg1.length;
	var obj={};
	obj.startdate=&apos;&apos;;
	obj.enddate=&apos;&apos;;
	obj.frequency=&apos;&apos;;
	obj.frequencyunit=&apos;&apos;

	for(_e=0;_e&lt;len;_e++)
	{
		if(arg1[_e].hasOwnProperty(&apos;Operator&apos;))
		{
			if(arg1[_e].Operator.Name==&apos;A&apos;)
			{
				////logger.info(&apos;GetTimenFreq-&gt;&apos;+arg1[_e].PIVL_TS.hasOwnProperty(&apos;Period&apos;))
				if(arg1[_e].PIVL_TS.hasOwnProperty(&apos;Period&apos;) &amp;&amp; obj.frequency==&apos;&apos;)
				{
					if(arg1[_e].PIVL_TS.Period.IVL_PQ.Low.PQ.Value!=&apos;&apos;)
					{
						obj.frequency=arg1[_e].PIVL_TS.Period.IVL_PQ.Low.PQ.Value
						obj.frequencyunit=arg1[_e].PIVL_TS.Period.IVL_PQ.Low.PQ.Unit
					}
					else if(arg1[_e].PIVL_TS.Period.PQ.Value!=&apos;&apos; &amp;&amp; obj.frequency==&apos;&apos;)
					{
						obj.frequency=arg1[_e].PIVL_TS.Period.PQ.Value;
						obj.frequencyunit=arg1[_e].PIVL_TS.Period.PQ.Unit;
					}
					else
					{
						//do nothing
					}
				}
				else if (arg1[_e].EIVL_TS.length&gt;0)
				{
					//do nothing
				}
				else
				{
					//do nothing
				}
			}
			else
			{
				
				if(arg1[_e].hasOwnProperty(&apos;IVL_TS&apos;))
				{
					if(arg1[_e].IVL_TS.hasOwnProperty(&apos;Low&apos;) &amp;&amp; obj.startdate==&apos;&apos;)
					{
						obj.startdate=arg1[_e].IVL_TS.Low.TS.Value;
						obj.enddate=arg1[_e].IVL_TS.High.TS.Value;
						if(obj.enddate==&apos;&apos; &amp;&amp; arg1[_e].IVL_TS.Center.Value!=&apos;&apos;)
						{
							obj.enddate=arg1[_e].IVL_TS.Center.Value;
						}
						//logger.info(&apos;GetTimeandFrequency endate-&gt;&apos;+obj.enddate);
					}
				}
				else if(arg1[_e].hasOwnProperty(&apos;Value&apos;))
				{
					if(arg1[_e].Value.hasOwnProperty(&apos;Value&apos;))
					{
						obj.startdate=arg1[_e].Value.Value;
						obj.enddate=&apos;&apos;;
					}
					else
					{
						obj.startdate=arg1[_e].Value;
						obj.enddate=&apos;&apos;;
					}
				}
				else
				{
					//do nothing
				}
			}
			
		}
		//SK - 27022022 adding logic to read time if its out of operator
		if(arg1[_e].hasOwnProperty(&apos;IVL_TS&apos;) &amp;&amp; obj.startdate==&apos;&apos;)
		{
			if(arg1[_e].IVL_TS.hasOwnProperty(&apos;Low&apos;) &amp;&amp; obj.startdate==&apos;&apos;)
			{
				obj.startdate=arg1[_e].IVL_TS.Low.TS.Value;
				obj.enddate=arg1[_e].IVL_TS.High.TS.Value;
				if(obj.enddate==&apos;&apos; &amp;&amp; arg1[_e].IVL_TS.Center.Value!=&apos;&apos;)
				{
					obj.enddate=arg1[_e].IVL_TS.Center.Value;
				}
				//logger.info(&apos;GetTimeandFrequency endate-&gt;&apos;+obj.enddate);
			}
		}
		if(arg1[_e].hasOwnProperty(&apos;Value&apos;) &amp;&amp; obj.startdate==&apos;&apos; &amp;&amp; obj.enddate==&apos;&apos;)
		{
			if(arg1[_e].Value.hasOwnProperty(&apos;Value&apos;))
			{
				obj.startdate=arg1[_e].Value.Value;
				obj.enddate=&apos;&apos;;
			}
			else
			{
				obj.startdate=arg1[_e].Value;
				obj.enddate=&apos;&apos;;
			}
		}
	}
	//logger.info(&apos;GetTimeandFrequency out-&gt;&apos;+JSON.stringify(obj));
	return obj;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>70ada147-f4bf-4b4d-822e-b0485cd69700</id>
            <name>getvaluenunit</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996373</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getvaluenunit(arg1)
{
	var valobj={};

	if(arg1!=undefined &amp;&amp; arg1!=null)
	{

		if(arg1.CD.DisplayName!=&apos;&apos;)
		{
			valobj.value=arg1.CD.DisplayName;
			valobj.unit=&apos;&apos;;
			valobj.code=arg1.CD.Code;
		}
		else if(arg1.CE.DisplayName!=&apos;&apos;)
		{
			valobj.value=arg1.CE.DisplayName;
			valobj.unit=&apos;&apos;;
			valobj.code=arg1.CE.Code;
		}
		else if(arg1.PQ.Value!=&apos;&apos;)
		{
			valobj.value=arg1.PQ.Value;
			valobj.unit=arg1.PQ.Unit;
			valobj.code=&apos;&apos;;
		}
			else if(arg1.IVL_PQ.Low.PQ.Value!=&apos;&apos;)
		{
			valobj.value=arg1.IVL_PQ.Low.PQ.Value;
			valobj.unit=arg1.IVL_PQ.Low.PQ.Unit;
			valobj.code=&apos;&apos;;
		}
			else if(arg1.IVL_PQ.High.PQ.Value!=&apos;&apos;)
		{
			valobj.value=arg1.IVL_PQ.High.PQ.Value;
			valobj.unit=arg1.IVL_PQ.High.PQ.Unit;
			valobj.code=&apos;&apos;;
		}
			else if(arg1.IVL_PQ.SXCM_PQ.PQ.Value!=&apos;&apos;)
		{
			valobj.value=arg1.IVL_PQ.SXCM_PQ.PQ.Value;
			valobj.unit=arg1.IVL_PQ.SXCM_PQ.PQ.Unit;
			valobj.code=&apos;&apos;;
		}
		else if(arg1.REAL.Value!=&apos;&apos;)
		{
			valobj.value=arg1.REAL.Value;
			valobj.unit=&apos;&apos;;
			valobj.code=&apos;&apos;;
		}
		else if(arg1.hasOwnProperty(&apos;ST&apos;))
		{
			if(arg1.hasOwnProperty(&apos;Value&apos;))
			{
				if(arg1.ST.Value!=&apos;&apos;)
				{
					valobj.value=arg1.ST.Value;
					valobj.unit=&apos;&apos;;
					valobj.code=&apos;&apos;;
				}
			}
			else
			{
				if(arg1.ST!=&apos;&apos;)
				{
					valobj.value=arg1.ST;
					valobj.unit=&apos;&apos;
					valobj.code=&apos;&apos;;
				}
			}
			
		}
		
		else
		{
			valobj.value=&apos;&apos;
			valobj.unit=&apos;&apos;
			valobj.code=&apos;&apos;;
		}
	}
	else
	{
		valobj.value=&apos;&apos;
		valobj.unit=&apos;&apos;
		valobj.code=&apos;&apos;;
		
	}
	return valobj;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>e213fa58-0428-4ee1-9ca1-64568065ab93</id>
            <name>Hash</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999020</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2 Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 * Also http://anmar.eu.org/projects/jssha2/
 */

/*
 * Configurable variables. You may need to tweak these to be compatible with
 * the server-side, but the defaults work in most cases.
 */
var hexcase = 0;  /* hex output format. 0 - lowercase; 1 - uppercase        */
var b64pad  = &quot;&quot;; /* base-64 pad character. &quot;=&quot; for strict RFC compliance   */

/*
 * These are the functions you&apos;ll usually want to call
 * They take string arguments and return either hex or base-64 encoded strings
 */
function hex_sha256(s)    { return rstr2hex(rstr_sha256(str2rstr_utf8(s))); }
function b64_sha256(s)    { return rstr2b64(rstr_sha256(str2rstr_utf8(s))); }
function any_sha256(s, e) { return rstr2any(rstr_sha256(str2rstr_utf8(s)), e); }
function hex_hmac_sha256(k, d)
  { return rstr2hex(rstr_hmac_sha256(str2rstr_utf8(k), str2rstr_utf8(d))); }
function b64_hmac_sha256(k, d)
  { return rstr2b64(rstr_hmac_sha256(str2rstr_utf8(k), str2rstr_utf8(d))); }
function any_hmac_sha256(k, d, e)
  { return rstr2any(rstr_hmac_sha256(str2rstr_utf8(k), str2rstr_utf8(d)), e); }

/*
 * Perform a simple self-test to see if the VM is working
 */
function sha256_vm_test()
{
  return hex_sha256(&quot;abc&quot;).toLowerCase() ==
            &quot;ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad&quot;;
}

/*
 * Calculate the sha256 of a raw string
 */
function rstr_sha256(s)
{
  return binb2rstr(binb_sha256(rstr2binb(s), s.length * 8));
}

/*
 * Calculate the HMAC-sha256 of a key and some data (raw strings)
 */
function rstr_hmac_sha256(key, data)
{
  var bkey = rstr2binb(key);
  if(bkey.length &gt; 16) bkey = binb_sha256(bkey, key.length * 8);

  var ipad = Array(16), opad = Array(16);
  for(var i = 0; i &lt; 16; i++)
  {
    ipad[i] = bkey[i] ^ 0x36363636;
    opad[i] = bkey[i] ^ 0x5C5C5C5C;
  }

  var hash = binb_sha256(ipad.concat(rstr2binb(data)), 512 + data.length * 8);
  return binb2rstr(binb_sha256(opad.concat(hash), 512 + 256));
}

/*
 * Convert a raw string to a hex string
 */
function rstr2hex(input)
{
  try { hexcase } catch(e) { hexcase=0; }
  var hex_tab = hexcase ? &quot;0123456789ABCDEF&quot; : &quot;0123456789abcdef&quot;;
  var output = &quot;&quot;;
  var x;
  for(var i = 0; i &lt; input.length; i++)
  {
    x = input.charCodeAt(i);
    output += hex_tab.charAt((x &gt;&gt;&gt; 4) &amp; 0x0F)
           +  hex_tab.charAt( x        &amp; 0x0F);
  }
  return output;
}

/*
 * Convert a raw string to a base-64 string
 */
function rstr2b64(input)
{
  try { b64pad } catch(e) { b64pad=&apos;&apos;; }
  var tab = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;;
  var output = &quot;&quot;;
  var len = input.length;
  for(var i = 0; i &lt; len; i += 3)
  {
    var triplet = (input.charCodeAt(i) &lt;&lt; 16)
                | (i + 1 &lt; len ? input.charCodeAt(i+1) &lt;&lt; 8 : 0)
                | (i + 2 &lt; len ? input.charCodeAt(i+2)      : 0);
    for(var j = 0; j &lt; 4; j++)
    {
      if(i * 8 + j * 6 &gt; input.length * 8) output += b64pad;
      else output += tab.charAt((triplet &gt;&gt;&gt; 6*(3-j)) &amp; 0x3F);
    }
  }
  return output;
}

/*
 * Convert a raw string to an arbitrary string encoding
 */
function rstr2any(input, encoding)
{
  var divisor = encoding.length;
  var remainders = Array();
  var i, q, x, quotient;

  /* Convert to an array of 16-bit big-endian values, forming the dividend */
  var dividend = Array(Math.ceil(input.length / 2));
  for(i = 0; i &lt; dividend.length; i++)
  {
    dividend[i] = (input.charCodeAt(i * 2) &lt;&lt; 8) | input.charCodeAt(i * 2 + 1);
  }

  /*
   * Repeatedly perform a long division. The binary array forms the dividend,
   * the length of the encoding is the divisor. Once computed, the quotient
   * forms the dividend for the next step. We stop when the dividend is zero.
   * All remainders are stored for later use.
   */
  while(dividend.length &gt; 0)
  {
    quotient = Array();
    x = 0;
    for(i = 0; i &lt; dividend.length; i++)
    {
      x = (x &lt;&lt; 16) + dividend[i];
      q = Math.floor(x / divisor);
      x -= q * divisor;
      if(quotient.length &gt; 0 || q &gt; 0)
        quotient[quotient.length] = q;
    }
    remainders[remainders.length] = x;
    dividend = quotient;
  }

  /* Convert the remainders to the output string */
  var output = &quot;&quot;;
  for(i = remainders.length - 1; i &gt;= 0; i--)
    output += encoding.charAt(remainders[i]);

  /* Append leading zero equivalents */
  var full_length = Math.ceil(input.length * 8 /
                                    (Math.log(encoding.length) / Math.log(2)))
  for(i = output.length; i &lt; full_length; i++)
    output = encoding[0] + output;

  return output;
}

/*
 * Encode a string as utf-8.
 * For efficiency, this assumes the input is valid utf-16.
 */
function str2rstr_utf8(input)
{
  var output = &quot;&quot;;
  var i = -1;
  var x, y;

  while(++i &lt; input.length)
  {
    /* Decode utf-16 surrogate pairs */
    x = input.charCodeAt(i);
    y = i + 1 &lt; input.length ? input.charCodeAt(i + 1) : 0;
    if(0xD800 &lt;= x &amp;&amp; x &lt;= 0xDBFF &amp;&amp; 0xDC00 &lt;= y &amp;&amp; y &lt;= 0xDFFF)
    {
      x = 0x10000 + ((x &amp; 0x03FF) &lt;&lt; 10) + (y &amp; 0x03FF);
      i++;
    }

    /* Encode output as utf-8 */
    if(x &lt;= 0x7F)
      output += String.fromCharCode(x);
    else if(x &lt;= 0x7FF)
      output += String.fromCharCode(0xC0 | ((x &gt;&gt;&gt; 6 ) &amp; 0x1F),
                                    0x80 | ( x         &amp; 0x3F));
    else if(x &lt;= 0xFFFF)
      output += String.fromCharCode(0xE0 | ((x &gt;&gt;&gt; 12) &amp; 0x0F),
                                    0x80 | ((x &gt;&gt;&gt; 6 ) &amp; 0x3F),
                                    0x80 | ( x         &amp; 0x3F));
    else if(x &lt;= 0x1FFFFF)
      output += String.fromCharCode(0xF0 | ((x &gt;&gt;&gt; 18) &amp; 0x07),
                                    0x80 | ((x &gt;&gt;&gt; 12) &amp; 0x3F),
                                    0x80 | ((x &gt;&gt;&gt; 6 ) &amp; 0x3F),
                                    0x80 | ( x         &amp; 0x3F));
  }
  return output;
}

/*
 * Encode a string as utf-16
 */
function str2rstr_utf16le(input)
{
  var output = &quot;&quot;;
  for(var i = 0; i &lt; input.length; i++)
    output += String.fromCharCode( input.charCodeAt(i)        &amp; 0xFF,
                                  (input.charCodeAt(i) &gt;&gt;&gt; 8) &amp; 0xFF);
  return output;
}

function str2rstr_utf16be(input)
{
  var output = &quot;&quot;;
  for(var i = 0; i &lt; input.length; i++)
    output += String.fromCharCode((input.charCodeAt(i) &gt;&gt;&gt; 8) &amp; 0xFF,
                                   input.charCodeAt(i)        &amp; 0xFF);
  return output;
}

/*
 * Convert a raw string to an array of big-endian words
 * Characters &gt;255 have their high-byte silently ignored.
 */
function rstr2binb(input)
{
  var output = Array(input.length &gt;&gt; 2);
  for(var i = 0; i &lt; output.length; i++)
    output[i] = 0;
  for(var i = 0; i &lt; input.length * 8; i += 8)
    output[i&gt;&gt;5] |= (input.charCodeAt(i / 8) &amp; 0xFF) &lt;&lt; (24 - i % 32);
  return output;
}

/*
 * Convert an array of big-endian words to a string
 */
function binb2rstr(input)
{
  var output = &quot;&quot;;
  for(var i = 0; i &lt; input.length * 32; i += 8)
    output += String.fromCharCode((input[i&gt;&gt;5] &gt;&gt;&gt; (24 - i % 32)) &amp; 0xFF);
  return output;
}

/*
 * Main sha256 function, with its support functions
 */
function sha256_S (X, n) {return ( X &gt;&gt;&gt; n ) | (X &lt;&lt; (32 - n));}
function sha256_R (X, n) {return ( X &gt;&gt;&gt; n );}
function sha256_Ch(x, y, z) {return ((x &amp; y) ^ ((~x) &amp; z));}
function sha256_Maj(x, y, z) {return ((x &amp; y) ^ (x &amp; z) ^ (y &amp; z));}
function sha256_Sigma0256(x) {return (sha256_S(x, 2) ^ sha256_S(x, 13) ^ sha256_S(x, 22));}
function sha256_Sigma1256(x) {return (sha256_S(x, 6) ^ sha256_S(x, 11) ^ sha256_S(x, 25));}
function sha256_Gamma0256(x) {return (sha256_S(x, 7) ^ sha256_S(x, 18) ^ sha256_R(x, 3));}
function sha256_Gamma1256(x) {return (sha256_S(x, 17) ^ sha256_S(x, 19) ^ sha256_R(x, 10));}
function sha256_Sigma0512(x) {return (sha256_S(x, 28) ^ sha256_S(x, 34) ^ sha256_S(x, 39));}
function sha256_Sigma1512(x) {return (sha256_S(x, 14) ^ sha256_S(x, 18) ^ sha256_S(x, 41));}
function sha256_Gamma0512(x) {return (sha256_S(x, 1)  ^ sha256_S(x, 8) ^ sha256_R(x, 7));}
function sha256_Gamma1512(x) {return (sha256_S(x, 19) ^ sha256_S(x, 61) ^ sha256_R(x, 6));}

var sha256_K = new Array
(
  1116352408, 1899447441, -1245643825, -373957723, 961987163, 1508970993,
  -1841331548, -1424204075, -670586216, 310598401, 607225278, 1426881987,
  1925078388, -2132889090, -1680079193, -1046744716, -459576895, -272742522,
  264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986,
  -1740746414, -1473132947, -1341970488, -1084653625, -958395405, -710438585,
  113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291,
  1695183700, 1986661051, -2117940946, -1838011259, -1564481375, -1474664885,
  -1035236496, -949202525, -778901479, -694614492, -200395387, 275423344,
  430227734, 506948616, 659060556, 883997877, 958139571, 1322822218,
  1537002063, 1747873779, 1955562222, 2024104815, -2067236844, -1933114872,
  -1866530822, -1538233109, -1090935817, -965641998
);

function binb_sha256(m, l)
{
  var HASH = new Array(1779033703, -1150833019, 1013904242, -1521486534,
                       1359893119, -1694144372, 528734635, 1541459225);
  var W = new Array(64);
  var a, b, c, d, e, f, g, h;
  var i, j, T1, T2;

  /* append padding */
  m[l &gt;&gt; 5] |= 0x80 &lt;&lt; (24 - l % 32);
  m[((l + 64 &gt;&gt; 9) &lt;&lt; 4) + 15] = l;

  for(i = 0; i &lt; m.length; i += 16)
  {
    a = HASH[0];
    b = HASH[1];
    c = HASH[2];
    d = HASH[3];
    e = HASH[4];
    f = HASH[5];
    g = HASH[6];
    h = HASH[7];

    for(j = 0; j &lt; 64; j++)
    {
      if (j &lt; 16) W[j] = m[j + i];
      else W[j] = safe_add(safe_add(safe_add(sha256_Gamma1256(W[j - 2]), W[j - 7]),
                                            sha256_Gamma0256(W[j - 15])), W[j - 16]);

      T1 = safe_add(safe_add(safe_add(safe_add(h, sha256_Sigma1256(e)), sha256_Ch(e, f, g)),
                                                          sha256_K[j]), W[j]);
      T2 = safe_add(sha256_Sigma0256(a), sha256_Maj(a, b, c));
      h = g;
      g = f;
      f = e;
      e = safe_add(d, T1);
      d = c;
      c = b;
      b = a;
      a = safe_add(T1, T2);
    }

    HASH[0] = safe_add(a, HASH[0]);
    HASH[1] = safe_add(b, HASH[1]);
    HASH[2] = safe_add(c, HASH[2]);
    HASH[3] = safe_add(d, HASH[3]);
    HASH[4] = safe_add(e, HASH[4]);
    HASH[5] = safe_add(f, HASH[5]);
    HASH[6] = safe_add(g, HASH[6]);
    HASH[7] = safe_add(h, HASH[7]);
  }
  return HASH;
}

function safe_add (x, y)
{
  var lsw = (x &amp; 0xFFFF) + (y &amp; 0xFFFF);
  var msw = (x &gt;&gt; 16) + (y &gt;&gt; 16) + (lsw &gt;&gt; 16);
  return (msw &lt;&lt; 16) | (lsw &amp; 0xFFFF);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>86902e57-648a-44b0-a2dd-c986568d670c</id>
            <name>mysql_real_escape_string</name>
            <revision>2</revision>
            <lastModified>
              <time>1668227607111</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function mysql_real_escape_string (str) {
    
    if (typeof str != &apos;string&apos;)
    {
        return str;
    }
    else
    {
    		str=str.replace(/&apos;/g,&apos;\\\&apos;&apos;);
    		str=str.normalize(&quot;NFD&quot;).replace(/[\u0300-\u036f]/g, &quot;&quot;);
    		
    		return str;
    }
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>93053acc-50a3-43e0-aa6c-2add56fe4c77</id>
            <name>removeDuplicates</name>
            <revision>1</revision>
            <lastModified>
              <time>1666865463645</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function removeDuplicates(arr) {
        var unique = [];
        arr.forEach(element =&gt; {
            if (!unique.includes(element)) {
                unique.push(element);
            }
        });
        return unique;
    }</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>db6d69d5-6dd4-4b95-89c1-385965fede6a</id>
            <name>replaceDiacritics</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998297</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function replaceDiacritics(str){

  var diacritics = [
    {char: &apos;A&apos;, base: /[\300-\306]/g},
    {char: &apos;a&apos;, base: /[\340-\346]/g},
    {char: &apos;E&apos;, base: /[\310-\313]/g},
    {char: &apos;e&apos;, base: /[\350-\353]/g},
    {char: &apos;I&apos;, base: /[\314-\317]/g},
    {char: &apos;i&apos;, base: /[\354-\357]/g},
    {char: &apos;O&apos;, base: /[\322-\330]/g},
    {char: &apos;o&apos;, base: /[\362-\370]/g},
    {char: &apos;U&apos;, base: /[\331-\334]/g},
    {char: &apos;u&apos;, base: /[\371-\374]/g},
    {char: &apos;N&apos;, base: /[\321]/g},
    {char: &apos;n&apos;, base: /[\361]/g},
    {char: &apos;C&apos;, base: /[\307]/g},
    {char: &apos;c&apos;, base: /[\347]/g}
  ]

  diacritics.forEach(function(letter){
    str = str.replace(letter.base, letter.char);
  });

  return str;
};</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>6a1a34e2-0e1c-468d-bb81-934899a243ca</id>
            <name>stripTZ</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998252</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function stripTZ(arg1) {
	// TODO: Enter code here
	
	var tz_arr=[];
	var pos;
	
	if(arg1!=undefined)
	{
		
		if(arg1.indexOf(&quot;-&quot;)&gt;0)
		{
		//	logger.info(&apos;stripTZ-&gt;pos-&apos;);
			tz_arr=arg1.split(&quot;-&quot;);
							
		}
		else if(arg1.indexOf(&quot;+&quot;)&gt;0)
		{
		//	logger.info(&apos;stripTZ-&gt;pos+&apos;);
			tz_arr=arg1.split(&quot;\\+&quot;);
		}
		else
		{
			tz_arr[0]=arg1;
			tz_arr[1]=&apos;&apos;;
		}
	}
	return tz_arr;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>6542e181-6982-4c28-b475-de4b5f35ccd5</id>
            <name>zeropadding</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998942</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function zeropadding(pad, user_str, pad_pos)
{
  if (typeof user_str === &apos;undefined&apos;) 
    return pad;
  if (pad_pos == &apos;l&apos;)
     {
     return (pad + user_str).slice(-pad.length);
     }
  else 
    {
    return (user_str + pad).substring(0, pad.length);
    }
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
    </codeTemplateLibraries>
  </exportData>
</channel>