<channel version="3.12.0">
  <id>abf8a28b-b96e-439d-ae18-e79e27a26915</id>
  <nextMetaDataId>2</nextMetaDataId>
  <name>CCD Parser - Vitals</name>
  <description></description>
  <revision>18</revision>
  <sourceConnector version="3.12.0">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.12.0">
      <pluginProperties/>
      <sourceConnectorProperties version="3.12.0">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
    </properties>
    <transformer version="3.12.0">
      <elements>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
          <name>Vital</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <script>var vitalSection = sourceMap.get(&apos;vitalSection&apos;);
var _vitalText = sourceMap.get(&apos;vitalText&apos;);

var section = {};
if (vitalSection != null) {
    section.Code = GetCE(vitalSection.getCode());
    section.Title = GetST(vitalSection.getTitle());

    var _entries = vitalSection.getEntries();
    var entries = [];
    if (_entries != null) {
        var _entriesSize = _entries.size();
        var _i = 0;
        if (_entriesSize &gt; 0) {
            for (_i = 0; _i &lt; _entriesSize; _i++) {
                var entry = {};
                var _entry = _entries.get(_i);

                if (_entry != null) {
                    var organizer = {};
                    var _organizer = _entry.getOrganizer();
                    if (_organizer != null) {
                        organizer.Ids = GetIIList(_organizer.getIds());
                        organizer.Code = GetCD(_organizer.getCode());
                        organizer.EffectiveTime = GetIVL_TS(_organizer.getEffectiveTime());
                        organizer.StatusCode = GetCS(_organizer.getStatusCode());
                        organizer.Informants = GetInformant12List(_organizer.getInformants());
                        organizer.Authors = GetAuthorList(_organizer.getAuthors());

                        var components = [];
                        var _components = _organizer.getComponents();
                        if (_components != null) {
                            var _componentsSize = _components.size();
                            if (_componentsSize &gt; 1500) {
                                _componentsSize = 1500;
                            }
                            var _compCount = 0;
                            for (_compCount = 0; _compCount &lt; _componentsSize; _compCount++) {
                                var component = {};
                                var _component = _components.get(_compCount);
                                if (_component != null) {
                                    var _componentObservation = _component.getObservation();
                                    if (_componentObservation != null) {
                                        var componentObservation = {};
                                        componentObservation.Ids = GetIIList(_componentObservation.getIds());
                                        componentObservation.Code = GetCD(_componentObservation.getCode());
                                        componentObservation.InterpretationCode = GetCEList(_componentObservation.getInterpretationCodes());
                                        componentObservation.Authors = GetAuthorList(_componentObservation.getAuthors());
                                        componentObservation.Values = GetAnyList1(_componentObservation.getValues());
                                        componentObservation.StatusCode = GetCS(_componentObservation.getStatusCode());
                                        componentObservation.EffectiveTime = GetIVL_TS(_componentObservation.getEffectiveTime());
                                        componentObservation.RefrenceRanges = GetReferenceRangeList(_componentObservation.getReferenceRanges());
                                        componentObservation.Informants = GetInformant12List(_componentObservation.getInformants());
                                        componentObservation.Performers = GetPerformer2List(_componentObservation.getPerformers());

                                        var _componentObservationentryrelationships = _componentObservation.getEntryRelationships();
                                        var ComponentObservationentryrelationships = [];

                                        if (_componentObservationentryrelationships != null) 
                                        {
                                            var _componentObservationentryrelationshipsSize = _componentObservationentryrelationships.size();
                                            var _componentObservationentryrelationshipsCount = 0;
                                            for (_componentObservationentryrelationshipsCount = 0; _componentObservationentryrelationshipsCount &lt; _componentObservationentryrelationshipsSize; _componentObservationentryrelationshipsCount++) 
                                            {
                                                var ComponentObservationentryrelationship = {};
                                                var _componentObservationentryrelationship = _componentObservationentryrelationships.get(_componentObservationentryrelationshipsCount);
                                                var _componentObservationentryrelationshipObservation = _componentObservationentryrelationship.getObservation();
                                                if (_componentObservationentryrelationshipObservation != null) {
                                                    var ComponentObservationentryrelationshipObservation = {};
                                                    ComponentObservationentryrelationshipObservation.Ids = GetIIList(_componentObservationentryrelationshipObservation.getIds());
                                                    ComponentObservationentryrelationshipObservation.Values = GetAnyList(_componentObservationentryrelationshipObservation.getValues());
                                                    ComponentObservationentryrelationshipObservation.Authors = GetAuthorList(_componentObservationentryrelationshipObservation.getAuthors());
                                                    ComponentObservationentryrelationshipObservation.Code = GetCD(_componentObservationentryrelationshipObservation.getCode());
                                                    ComponentObservationentryrelationshipObservation.EffectiveTime = GetIVL_TS(_componentObservationentryrelationshipObservation.getEffectiveTime());
                                                    ComponentObservationentryrelationshipObservation.ClassCode = GetVocabInfo(_componentObservationentryrelationshipObservation.getClassCode());
                                                    ComponentObservationentryrelationshipObservation.MoodCode = GetVocabInfo(_componentObservationentryrelationshipObservation.getMoodCode());

                                                    // Start
                                                    var _componentObservationentryrelationshipObservationentryrelationships = _componentObservationentryrelationshipObservation.getEntryRelationships();
                                                    var ComponentObservationentryrelationshipObservationentryrelationships = [];

                                                    if (_componentObservationentryrelationshipObservationentryrelationships != null) {
                                                        var _componentObservationentryrelationshipObservationentryrelationshipsSize = _componentObservationentryrelationshipObservationentryrelationships.size();
                                                        var _count = 0;
                                                        for (_count = 0; _count &lt; _componentObservationentryrelationshipObservationentryrelationshipsSize; _count++) {
                                                            var ComponentObservationentryrelationshipObservationentryrelationship = {};
                                                            var _componentObservationentryrelationshipObservationentryrelationship = _componentObservationentryrelationshipObservationentryrelationships.get(_count);
                                                            var _componentObservationentryrelationshipObservationentryrelationshipObservation = _componentObservationentryrelationshipObservationentryrelationship.getObservation();
                                                            if (_componentObservationentryrelationshipObservationentryrelationshipObservation != null) {
                                                                var ComponentObservationentryrelationshipObservationentryrelationshipObservation = {};
                                                                ComponentObservationentryrelationshipObservationentryrelationshipObservation.Ids = GetIIList(_componentObservationentryrelationshipObservationentryrelationshipObservation.getIds());
                                                                ComponentObservationentryrelationshipObservationentryrelationshipObservation.Values = GetAnyList(_componentObservationentryrelationshipObservationentryrelationshipObservation.getValues());
                                                                ComponentObservationentryrelationshipObservationentryrelationshipObservation.Authors = GetAuthorList(_componentObservationentryrelationshipObservationentryrelationshipObservation.getAuthors());
                                                                ComponentObservationentryrelationshipObservationentryrelationshipObservation.Code = GetCD(_componentObservationentryrelationshipObservationentryrelationshipObservation.getCode());
                                                                ComponentObservationentryrelationshipObservationentryrelationshipObservation.EffectiveTime = GetIVL_TS(_componentObservationentryrelationshipObservationentryrelationshipObservation.getEffectiveTime());
                                                                ComponentObservationentryrelationshipObservationentryrelationshipObservation.ClassCode = GetVocabInfo(_componentObservationentryrelationshipObservationentryrelationshipObservation.getClassCode());
                                                                ComponentObservationentryrelationshipObservationentryrelationshipObservation.MoodCode = GetVocabInfo(_componentObservationentryrelationshipObservationentryrelationshipObservation.getMoodCode());

                                                                ComponentObservationentryrelationshipObservationentryrelationship.Observation = ComponentObservationentryrelationshipObservationentryrelationshipObservation;
                                                            }
                                                            ComponentObservationentryrelationshipObservationentryrelationship.TypeCode = GetVocabInfo(_componentObservationentryrelationshipObservationentryrelationships.getTypeCode());
                                                            ComponentObservationentryrelationshipObservationentryrelationships.push(ComponentObservationentryrelationshipObservationentryrelationship);
                                                        }
                                                    }
                                                    //End
                                                    ComponentObservationentryrelationshipObservation.EntryRelationships = ComponentObservationentryrelationshipObservationentryrelationships;
                                                    ComponentObservationentryrelationship.Observation = ComponentObservationentryrelationshipObservation;
                                                }

                                                var _componentObservationentryrelationshipEncounter = _componentObservationentryrelationship.getEncounter();
                                                
                                                if (_componentObservationentryrelationshipEncounter != null)
                                                {
                                                    var ComponentObservationentryrelationshipEncounter = {};
                                                    ComponentObservationentryrelationshipEncounter.MoodCode = GetVocabInfo(_componentObservationentryrelationshipEncounter.getMoodCode());
                                                    ComponentObservationentryrelationshipEncounter.Ids = GetIIList(_componentObservationentryrelationshipEncounter.getIds());
                                                    ComponentObservationentryrelationshipEncounter.Code = GetCD(_componentObservationentryrelationshipEncounter.getCode());
                                                    ComponentObservationentryrelationship.encounter = ComponentObservationentryrelationshipEncounter;
                                                }

                                                ComponentObservationentryrelationship.TypeCode = GetVocabInfo(_componentObservationentryrelationship.getTypeCode());
                                                ComponentObservationentryrelationships.push(ComponentObservationentryrelationship);
                                            }
                                        }


                                        componentObservation.EntryRelationships = ComponentObservationentryrelationships;
                                        component.Observation = componentObservation;
                                    }
                                }
                                components.push(component);
                            }
                        }
                        organizer.Components = components;
                    }
                    entry.Organizer = organizer;
                }
                entries.push(entry);
            }
        }
    }

    section.Entries = entries;
    section.ClassCode = GetVocabInfo(vitalSection.getClassCode());
    section.MoodCode = GetVocabInfo(vitalSection.getMoodCode());
}

channelMap.put(&apos;Vitalsection&apos;, JSON.stringify(section));</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
          <name>Map PatientId</name>
          <sequenceNumber>1</sequenceNumber>
          <enabled>true</enabled>
          <script>channelMap.put(&apos;patientid&apos;,sourceMap.get(&apos;patientid&apos;));</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
      </elements>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64">PGNsaW5pY2FsRG9jdW1lbnQ+PC9jbGluaWNhbERvY3VtZW50Pg==</outboundTemplate>
      <inboundDataType>HL7V3</inboundDataType>
      <outboundDataType>HL7V3</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.12.0">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.12.0">
          <stripNamespaces>false</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.12.0">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.12.0">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.12.0">
          <stripNamespaces>false</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.12.0">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.12.0">
      <elements/>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.12.0">
      <metaDataId>1</metaDataId>
      <name>Destination 1</name>
      <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.12.0">
        <pluginProperties/>
        <destinationConnectorProperties version="3.12.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <channelId>none</channelId>
        <channelTemplate>${message.encodedData}</channelTemplate>
        <mapVariables/>
      </properties>
      <transformer version="3.12.0">
        <elements>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
            <sequenceNumber>0</sequenceNumber>
            <enabled>true</enabled>
            <script>//logger.info(&apos;Vital Section-&gt;Start:&apos;+DateUtil.getCurrentDate(&apos;yyyyMMddhhmmss&apos;));
if($(&apos;Vitalsection&apos;).length()&gt;2)
{
	VitalBundle($(&apos;Vitalsection&apos;),sourceMap.get(&apos;vitalText&apos;),$(&apos;patientid&apos;),sourceMap.get(&apos;bundleid&apos;));
}

channelMap.remove($(&apos;Vitalsection&apos;));
//logger.info(&apos;Vital Section-&gt;End:&apos;+DateUtil.getCurrentDate(&apos;yyyyMMddhhmmss&apos;));</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        </elements>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>HL7V3</inboundDataType>
        <outboundDataType>HL7V3</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.12.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.12.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.12.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.12.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.12.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.12.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.12.0">
        <elements/>
        <inboundDataType>HL7V3</inboundDataType>
        <outboundDataType>HL7V3</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.12.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.12.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.12.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.12.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.12.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.12.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.12.0">
        <elements/>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

org.openhealthtools.mdht.uml.cda.ccd.CCDPackage.eINSTANCE.eClass();

return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.12.0">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>RAW</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>CMFID</name>
        <type>STRING</type>
        <mappingName>cmfid</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.12.0">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1671192284733</time>
        <timezone>Asia/Calcutta</timezone>
      </lastModified>
      <pruningSettings>
        <archiveEnabled>true</archiveEnabled>
        <pruneErroredMessages>false</pruneErroredMessages>
      </pruningSettings>
    </metadata>
  </exportData>
</channel>