<channel version="3.12.0">
  <id>6485566a-e026-44c1-98cf-f7c62a948022</id>
  <nextMetaDataId>2</nextMetaDataId>
  <name>Composition Builder</name>
  <description></description>
  <revision>75</revision>
  <sourceConnector version="3.12.0">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.jdbc.DatabaseReceiverProperties" version="3.12.0">
      <pluginProperties/>
      <pollConnectorProperties version="3.12.0">
        <pollingType>INTERVAL</pollingType>
        <pollOnStart>false</pollOnStart>
        <pollingFrequency>300000</pollingFrequency>
        <pollingHour>0</pollingHour>
        <pollingMinute>0</pollingMinute>
        <cronJobs/>
        <pollConnectorPropertiesAdvanced>
          <weekly>true</weekly>
          <inactiveDays>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
          </inactiveDays>
          <dayOfMonth>1</dayOfMonth>
          <allDay>true</allDay>
          <startingHour>8</startingHour>
          <startingMinute>0</startingMinute>
          <endingHour>17</endingHour>
          <endingMinute>0</endingMinute>
        </pollConnectorPropertiesAdvanced>
      </pollConnectorProperties>
      <sourceConnectorProperties version="3.12.0">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <driver>com.mysql.cj.jdbc.Driver</driver>
      <url>jdbc:mysql://localhost:3306/genzeon</url>
      <username>root</username>
      <password>test</password>
      <select>SELECT bundleid,requestinfo.requestInfoid	 FROM requestinfo
JOIN sourcedata ON requestinfo.requestinfoId=sourcedata.requestinfoId
JOIN fhirresourcedata ON sourcedata.sourcedataid=fhirresourcedata.sourcedataid
WHERE requestinfo.status=0</select>
      <update>update requestinfo set status=1 where requestInfoid=${requestinfoid};</update>
      <useScript>false</useScript>
      <aggregateResults>false</aggregateResults>
      <cacheResults>true</cacheResults>
      <keepConnectionOpen>true</keepConnectionOpen>
      <updateMode>3</updateMode>
      <retryCount>3</retryCount>
      <retryInterval>10000</retryInterval>
      <fetchSize>1000</fetchSize>
      <encoding>DEFAULT_ENCODING</encoding>
    </properties>
    <transformer version="3.12.0">
      <elements>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <script>importPackage(org.hl7.fhir.r4.model);
importPackage(Packages.ca.uhn.fhir.parser);
var bundle = new org.hl7.fhir.r4.model.Bundle();
var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
var parser = ctx.newJsonParser();  
var errorHandler = new LenientErrorHandler();
errorHandler.setErrorOnInvalidValue(false);
parser.setParserErrorHandler(errorHandler);

var entrylist=[];
bundle.setId(msg[&apos;bundleid&apos;].toString());
bundle.setType(Bundle.BundleType.COLLECTION)

var composition = new org.hl7.fhir.r4.model.Composition();
var patient = new org.hl7.fhir.r4.model.Patient();

        
    

var dbConn;

try 
{
    dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.cj.jdbc.Driver&apos;,&apos;jdbc:mysql://localhost:3306/genzeon&apos;,&apos;root&apos;,&apos;test&apos;);
    
    var sql=&quot;SELECT resourcedata FROM requestinfo JOIN sourcedata ON requestinfo.requestinfoId=sourcedata.requestinfoId JOIN fhirresourcedata ON sourcedata.sourcedataid=fhirresourcedata.sourcedataid WHERE resourceType in(&apos;Composition&apos;,&apos;Patient&apos;) and requestinfo.bundleid=&apos;&quot;+msg[&apos;bundleid&apos;].toString()+&quot;&apos;&quot;;
    result = dbConn.executeCachedQuery(sql);
    
    var oResult={};
    while(result.next())
    {
        oResult.ResourceData=result.getString(&quot;resourcedata&quot;);
        if(parser.parseResource(oResult.ResourceData).getResourceType()==&apos;Composition&apos;)
        {
            composition=parser.parseResource(oResult.ResourceData);    
            //logger.info(&apos;Composition Builder-&gt;&apos;+composition);
        }
        else
        {
            patient=parser.parseResource(oResult.ResourceData);    
        }
        
    }

    //Get sections
    var sql=&quot;SELECT COUNT(DISTINCT display) AS sectioncount,CODE,display,codesystem FROM requestinfo JOIN sourcedata ON requestinfo.requestinfoId=sourcedata.requestinfoId JOIN fhirresourcedata ON sourcedata.sourcedataid=fhirresourcedata.sourcedataid JOIN ccdsection ON ccdsection.fhirresourcedataid=fhirresourcedata.fhirresourcedataid WHERE resourceType NOT IN(&apos;Composition&apos;,&apos;Patient&apos;) AND requestinfo.bundleid=&apos;&quot;+msg[&apos;bundleid&apos;].toString()+&quot;&apos; GROUP BY CODE,display,codesystem&quot;;
    var result=dbConn.executeCachedQuery(sql);
    var sectioncount=0;
    var oResult={};
    while(result.next())
    {
        sectioncount=parseInt(result.getString(&quot;sectioncount&quot;));
        oResult.section={};
        oResult.section.Code=result.getString(&quot;CODE&quot;);
        oResult.section.DisplayName=result.getString(&quot;display&quot;);
        oResult.section.CodeSystem=result.getString(&quot;codesystem&quot;);

        for(var _s=0;_s&lt;sectioncount;_s++)
        {
            var section=org.hl7.fhir.r4.model.Composition.SectionComponent();

            section.setTitle(oResult.section.DisplayName);   
            section.setCode(new CodeableConcept().setCoding(GetCodingList(oResult.section)));       
            section.setMode(Composition.SectionMode.SNAPSHOT);

            var sql1=&quot;SELECT resourceId,resourceType,resourcedata FROM requestinfo JOIN sourcedata ON requestinfo.requestinfoId=sourcedata.requestinfoId JOIN fhirresourcedata ON sourcedata.sourcedataid=fhirresourcedata.sourcedataid JOIN ccdsection ON ccdsection.fhirresourcedataid=fhirresourcedata.fhirresourcedataid WHERE resourceType NOT IN(&apos;Composition&apos;,&apos;Patient&apos;) AND requestinfo.bundleid=&apos;&quot;+msg[&apos;bundleid&apos;].toString()+&quot;&apos; and display=&apos;&quot;+oResult.section.DisplayName+&quot;&apos;&quot;;
            result1 = dbConn.executeCachedQuery(sql1);
            
            while(result1.next())
            {
                var entry=new org.hl7.fhir.r4.model.Bundle.BundleEntryComponent();
                //logger.info(&apos;Composition Builder-&gt;&apos;+result1.getString(&quot;resourceId&quot;))
                //logger.info(&apos;Composition Builder-&gt;&apos;+parser.parseResource(result1.getString(&quot;resourcedata&quot;)))
                entrylist.push(entry.setResource(parser.parseResource(result1.getString(&quot;resourcedata&quot;))));
                section.addEntry(new Reference().setReference(result1.getString(&quot;resourceType&quot;)+&apos;/&apos;+result1.getString(&quot;resourceId&quot;)));
            } 
                  
            composition.addSection(section)    
        }
    }


    composition.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(composition))));
    entrylist.unshift(new org.hl7.fhir.r4.model.Bundle.BundleEntryComponent().setResource(patient));
    entrylist.unshift(new org.hl7.fhir.r4.model.Bundle.BundleEntryComponent().setResource(composition));
    bundle.setEntry(entrylist)

    
    var updsql=&quot;update fhirresourcedata f JOIN sourcedata s ON s.SourceDataId=f.SourceDataId JOIN requestinfo r ON s.requestinfoid=r.requestinfoid set resourcedata=&apos;&quot;+JSON.parse(JSON.stringify(parser.encodeResourceToString(composition)).replace(/&apos;/g,&quot;\\\\&apos;&quot;))+&quot;&apos;,resourceId=&apos;&quot;+composition.getId()+&quot;&apos; WHERE resourceType=&apos;Composition&apos; and bundleid=&apos;&quot;+msg[&apos;bundleid&apos;].toString()+&quot;&apos;&quot;;
    var result = dbConn.executeUpdateAndGetGeneratedKeys(updsql);

    var inssql=&quot;UPDATE sourcedata s JOIN requestinfo r ON s.requestinfoid=r.requestinfoid SET FHIRBundleData=&apos;&quot;+JSON.parse(JSON.stringify(parser.encodeResourceToString(bundle)).replace(/&apos;/g,&quot;\\\\&apos;&quot;))+&quot;&apos; WHERE bundleid=&apos;&quot;+msg[&apos;bundleid&apos;].toString()+&quot;&apos;&quot;;
    var result = dbConn.executeUpdateAndGetGeneratedKeys(inssql);
}
finally 
{
    if (dbConn) 
    { 
        dbConn.close();
    }
}
        
channelMap.put(&apos;Bundle&apos;,parser.encodeResourceToString(bundle));</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
      </elements>
      <inboundTemplate encoding="base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+DQo8cmVzdWx0Pg0KICAgIDxidW5kbGVpZD52YWx1ZTwvYnVuZGxlaWQ+DQogICAgPHJlcXVlc3RpbmZvaWQ+dmFsdWU8L3JlcXVlc3RpbmZvaWQ+DQo8L3Jlc3VsdD4NCg==</inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>XML</inboundDataType>
      <outboundDataType>HL7V2</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.12.0">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.12.0">
          <stripNamespaces>false</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.12.0">
          <splitType>Element_Name</splitType>
          <elementName></elementName>
          <level>1</level>
          <query></query>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
          <handleRepetitions>true</handleRepetitions>
          <handleSubcomponents>true</handleSubcomponents>
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <stripNamespaces>false</stripNamespaces>
          <segmentDelimiter>\r</segmentDelimiter>
          <convertLineBreaks>true</convertLineBreaks>
        </serializationProperties>
        <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <segmentDelimiter>\r</segmentDelimiter>
        </deserializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
          <splitType>MSH_Segment</splitType>
          <batchScript></batchScript>
        </batchProperties>
        <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
          <segmentDelimiter>\r</segmentDelimiter>
          <successfulACKCode>AA</successfulACKCode>
          <successfulACKMessage></successfulACKMessage>
          <errorACKCode>AE</errorACKCode>
          <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
          <rejectedACKCode>AR</rejectedACKCode>
          <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
          <msh15ACKAccept>false</msh15ACKAccept>
          <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
        </responseGenerationProperties>
        <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
          <successfulACKCode>AA,CA</successfulACKCode>
          <errorACKCode>AE,CE</errorACKCode>
          <rejectedACKCode>AR,CR</rejectedACKCode>
          <validateMessageControlId>true</validateMessageControlId>
          <originalMessageControlId>Destination_Encoded</originalMessageControlId>
          <originalIdMapVariable></originalIdMapVariable>
        </responseValidationProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.12.0">
      <elements/>
    </filter>
    <transportName>Database Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.12.0">
      <metaDataId>1</metaDataId>
      <name>Destination 1</name>
      <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.12.0">
        <pluginProperties/>
        <destinationConnectorProperties version="3.12.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <channelId>none</channelId>
        <channelTemplate>${message.encodedData}</channelTemplate>
        <mapVariables/>
      </properties>
      <transformer version="3.12.0">
        <elements/>
        <inboundDataType>HL7V2</inboundDataType>
        <outboundDataType>HL7V2</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>false</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
            <splitType>MSH_Segment</splitType>
            <batchScript></batchScript>
          </batchProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
            <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
            <validateMessageControlId>true</validateMessageControlId>
            <originalMessageControlId>Destination_Encoded</originalMessageControlId>
            <originalIdMapVariable></originalIdMapVariable>
          </responseValidationProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>false</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
            <splitType>MSH_Segment</splitType>
            <batchScript></batchScript>
          </batchProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
            <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
            <validateMessageControlId>true</validateMessageControlId>
            <originalMessageControlId>Destination_Encoded</originalMessageControlId>
            <originalIdMapVariable></originalIdMapVariable>
          </responseValidationProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.12.0">
        <elements/>
        <inboundDataType>HL7V2</inboundDataType>
        <outboundDataType>HL7V2</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>false</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
            <splitType>MSH_Segment</splitType>
            <batchScript></batchScript>
          </batchProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
            <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
            <validateMessageControlId>true</validateMessageControlId>
            <originalMessageControlId>Destination_Encoded</originalMessageControlId>
            <originalIdMapVariable></originalIdMapVariable>
          </responseValidationProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>false</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
            <splitType>MSH_Segment</splitType>
            <batchScript></batchScript>
          </batchProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
            <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
            <validateMessageControlId>true</validateMessageControlId>
            <originalMessageControlId>Destination_Encoded</originalMessageControlId>
            <originalIdMapVariable></originalIdMapVariable>
          </responseValidationProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.12.0">
        <elements/>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.12.0">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>true</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.12.0">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1669221456430</time>
        <timezone>Asia/Calcutta</timezone>
      </lastModified>
      <pruningSettings>
        <archiveEnabled>true</archiveEnabled>
        <pruneErroredMessages>false</pruneErroredMessages>
      </pruningSettings>
    </metadata>
    <codeTemplateLibraries>
      <codeTemplateLibrary version="3.12.0">
        <id>37a60ffd-4008-4cda-b60f-31f4d20ba4ff</id>
        <name>HAPI FHIR Library</name>
        <revision>128</revision>
        <lastModified>
          <time>1669130240293</time>
          <timezone>Asia/Calcutta</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>false</includeNewChannels>
        <enabledChannelIds>
          <string>268c87ee-b6cc-435b-a498-3484197be2ca</string>
          <string>abf8a28b-b96e-439d-ae18-e79e27a26915</string>
          <string>efd79df6-4275-42e1-b342-4c186eb0dccc</string>
          <string>264cf267-3368-4571-87d8-c0562c3a6912</string>
          <string>cdc68cb2-21f4-447e-b7b9-a0d120a91aed</string>
          <string>40a447a8-89f7-494c-b224-5880c7e86c73</string>
          <string>aba9f80e-e0c2-4b14-b365-9f5f416d51e5</string>
          <string>6485566a-e026-44c1-98cf-f7c62a948022</string>
          <string>617546b5-34e3-4e61-9b1d-5c40909c3787</string>
          <string>92472400-a82a-4805-b3fe-f92b5980aa2f</string>
          <string>b9b54c9b-eda4-43c9-8109-fa41bd6cc8fb</string>
          <string>601011b3-f0e9-4bbc-9cf4-dfa658c79e09</string>
          <string>dd76bbd8-85b9-4718-b8e2-bdcbb018a611</string>
          <string>8199c8b2-befa-4924-a390-526c4f3b1d31</string>
        </enabledChannelIds>
        <disabledChannelIds>
          <string>41380607-1411-4b46-a8a7-460267132a58</string>
          <string>7ce93031-5a1b-421b-bc6f-8de76ee2cba1</string>
          <string>5220c4fd-f531-43ff-b9ce-27a4cc8bfa52</string>
          <string>a8209ef7-0a7f-440b-9cdf-8cf0b7b1ab3d</string>
          <string>33599d3c-8359-4fab-b161-9d99484c8247</string>
          <string>c51960a1-1265-4d64-8c3f-5db07bb89f7c</string>
          <string>02ac2b89-fb25-4fdb-b91f-d3db2de6f3d6</string>
          <string>abdefaaf-d511-480e-9e7f-beeb9c320b63</string>
          <string>301fad6a-2981-4e1d-868c-8dc98f755f2d</string>
          <string>e77c34d0-0846-4d33-8455-6032d1c8fbc8</string>
          <string>beba7b91-73a8-4056-8d22-ecd0109d8675</string>
        </disabledChannelIds>
        <codeTemplates>
          <codeTemplate version="3.12.0">
            <id>ef8780c1-7d9b-4ef9-b607-802e1875626c</id>
            <name>AddAddressNode</name>
            <revision>9</revision>
            <lastModified>
              <time>1668183288345</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function AddAddressNode(arg1)
{

   importPackage(org.hl7.fhir.r4.model);
   var period=new Period();
   var addresslist=[];

   //logger.info(&apos;AddAddressNode-&gt;&apos;+typeof arg1);
   for (var _a=0; _a &lt; arg1.length; _a++) 
   {
      addr=new Address();
      var temaddr=arg1[_a];

      if(temaddr.PostalAddress[0].Name!=&apos;&apos; &amp;&amp; MapAddressUse(temaddr.PostalAddress[0].Name)!=null)
      {
         addr.setUse(Address.AddressUse.valueOf(MapAddressUse(temaddr.PostalAddress[0].Name)))
      }
                            
      if(temaddr.StreetAddressLines[0].ADXP_ST!=&apos;&apos;)
      {
         addr.addLine(temaddr.StreetAddressLines[0].ADXP_ST.trim());
      }

      if(temaddr.Cities[0].ADXP_ST!=&apos;&apos;)
      {
         addr.setCity(temaddr.Cities[0].ADXP_ST)
      }

      if(temaddr.States[0].ADXP_ST!=&apos;&apos;)
      {
         addr.setState(temaddr.States[0].ADXP_ST);
      }
                            
      if(temaddr.PostalCodes[0].ADXP_ST!=&apos;&apos;)
      {
         addr.setPostalCode(temaddr.PostalCodes[0].ADXP_ST);
      }

      if(temaddr.Countries[0].ADXP_ST!=&apos;&apos;)
      {
         addr.setCountry(temaddr.Countries[0].ADXP_ST);
      }

      if(temaddr.UsablePeriods[0].hasOwnProperty(&apos;IVL_TS&apos;))
      {
          if(temaddr.UsablePeriods[0].IVL_TS.Low.TS.Value!=&apos;&apos;)
         {
            period.setStartElement(new DateTimeType(formatdate(temaddr.UsablePeriods[0].IVL_TS.Low.TS.Value)));
            addr.setPeriod(period);
         }

         if(temaddr.UsablePeriods[0].IVL_TS.High.TS.Value!=&apos;&apos;)
         {
            period.setEndElement(new DateTimeType(formatdate(temaddr.UsablePeriods[0].IVL_TS.High.TS.Value)));
            addr.setPeriod(period);
         }
      }
     

      addresslist.push(addr)
   }

   if(addresslist.length&gt;0)
   {
      return addresslist
   }
}

</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>76044826-2855-4c6d-a256-1c7beaff99e2</id>
            <name>AddNameNode</name>
            <revision>5</revision>
            <lastModified>
              <time>1667469953350</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function AddNameNode(arg1)
{

   importPackage(org.hl7.fhir.r4.model);
   var period=new Period();
   var namelist=[];
   for (var _n=0; _n &lt; arg1.length; _n++) 
   {
      var tempname=arg1[_n];
      var name=new HumanName();

      if(tempname.Families[0].ENXP_ST!=&apos;&apos;)
      {
         name.setFamily(tempname.Families[0].ENXP_ST)   
      }
      
      if(tempname.Givens[0].ENXP_ST!=&apos;&apos;)
      {
         name.addGiven(tempname.Givens[0].ENXP_ST)   
      }
      
                             
      if(tempname.Givens[1] != null &amp;&amp; tempname.Givens[1] != undefined) 
      {
         name.addGiven(tempname.Givens[1].ENXP_ST);
      }

      if(tempname.EntityNameUses[0].Name!=&apos;&apos;)
      {
         name.setUse(HumanName.NameUse.valueOf(MapEntityNameUse(tempname.EntityNameUses[0].Name)));  
      }

      if(tempname.Prefixes[0].ENXP_ST!=&apos;&apos;)
      {
         name.addPrefix(tempname.Prefixes[0].ENXP_ST);  
      }

      if(tempname.Suffixes[0].ENXP_ST!=&apos;&apos;)
      {
         name.addSuffix(tempname.Suffixes[0].ENXP_ST);  
      }

      if(tempname.ValidTime.Low.TS.Value!=&apos;&apos;)
      {
         period.setStartElement(new DateTimeType(formatdate(tempname.ValidTime.Low.TS.Value)));
         name.setPeriod(period)
      }

      if(tempname.ValidTime.High.TS.Value!=&apos;&apos;)
      {
         period.setEndElement(new DateTimeType(formatdate(tempname.ValidTime.High.TS.Value)));
         name.setPeriod(period)
      }

      namelist.push(name)
   }

   if(namelist.length&gt;0)
   {
      return namelist
   }
}

</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>06f0353f-1bf7-4e46-a0f1-411063e57851</id>
            <name>AddTelecomNode</name>
            <revision>4</revision>
            <lastModified>
              <time>1667303950267</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function AddTelecomNode(arg1)
{

   importPackage(org.hl7.fhir.r4.model);
   var telecomlist=[];
   for (var _t=0; _t &lt; arg1.length; _t++) 
   {
      var tempcontact=arg1[_t];
      var telecom=new ContactPoint();
      if(arg1[_t].TEL_URL.Value!=&apos;&apos;)
      {
      	telecom.setValue(arg1[_t].TEL_URL.Value)
      	telecom.setSystem(ContactPoint.ContactPointSystem.valueOf(MapTelecomSystem(arg1[_t].TelecomAddress[0].Name)));      
      }

      
      
      
      telecomlist.push(telecom)
   }

   if(telecomlist.length&gt;0)
   {
      return telecomlist
   }
}

</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>67c523b9-0abc-403a-895c-468958c193a2</id>
            <name>AdvanceDirectiveBundle</name>
            <revision>9</revision>
            <lastModified>
              <time>1669212304921</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function AdvanceDirectiveBundle(arg1,text,patientid,bundleid) 
{
   
    
   var obj=JSON.parse(arg1);
   
   if(obj.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=obj.Entries.length;
       bundle.entry=[];
   }
   

   //looping through entries
   for(var _a=0;_a&lt;obj.Entries.length;_a++)
   {
      if(obj.Entries[_a].hasOwnProperty(&apos;Observation&apos;))
      {
        var temp={};
        temp.resource=AdvanceDirectiveObservationResource(obj.Entries[_a].Observation,text,patientid);
        bundle.entry.push(temp)

        SavefhirResource(temp.resource,bundleid,obj.Code)
      }
   }  

   //logger.info(&apos;AdvanceDirectiveBundle-&gt;&apos;+JSON.stringify(bundle)) 
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>702d8f66-3f9b-4067-9807-6fafc170c0e1</id>
            <name>AdvanceDirectiveObservationResource</name>
            <revision>18</revision>
            <lastModified>
              <time>1668944442361</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function AdvanceDirectiveObservationResource(arg1,txt,patientid)
{
    importPackage(org.hl7.fhir.r4.model);
    var observation = new org.hl7.fhir.r4.model.Observation();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  
   
    for(var _id=0;_id&lt;arg1.Ids.length;_id++)
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            observation.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }  
    }

    if(txt!=&apos;&apos; &amp;&amp; GetNarrative(txt)!=null)
    {
        observation.setText(GetNarrative(txt))
    }

    observation.setStatus(Observation.ObservationStatus.FINAL);
    observation.addCategory(new CodeableConcept(new Coding().setCode(&apos;42348-3&apos;).setDisplay(&apos;Advance Directives&apos;).setSystem(&apos;http://terminology.hl7.org/CodeSystem/observation-category&apos;)));
    
    observation.setCode(CodeableConcept(GetCoding(arg1.Code)));
    observation.setSubject(new Reference().setReference(patientid));    

    var tempdate=GetEffectiveTimeInfo(arg1);
    if(tempdate.startdatetime!=&apos;&apos;)
    {
        observation.setEffective(new DateTimeType(formatdate(tempdate.startdatetime)));
    }

    var observedvalue=GetMergedCodeList(arg1.Values[0].CD);
    if(observedvalue.length&gt;0)
    {
        observation.setValue(CodeableConcept(GetCoding(observedvalue[0])));
    }


    for(var _p=0;_p&lt;arg1.Participants.length&gt;0;_p++)
    {
        var participant=arg1.Participants[_p];
        if(participant.TypeCode.Name==&apos;VRF&apos;)
        {
            var tempparticipant=ParticipanttoPractictioner(participant.ParticipantRole);
            if(tempparticipant!=undefined)
            {
                var authenticator=&apos;#&apos;+new Resource(tempparticipant.getId());
                observation.addContained(tempparticipant);        
            }
            
        }

        if(participant.TypeCode.Name==&apos;CST&apos;)
        {
            var tempcustodian=ParticipanttoPractictioner(participant.ParticipantRole);
            if(tempcustodian!=undefined)
            {
                var custodian=&apos;#&apos;+new Resource(tempcustodian.getId());
                observation.addContained(tempcustodian);        
            }
            
        }
    }

    for(var _r=0;_r&lt;arg1.References.length;_r++)
    {
        var tempreference=arg1.References[_r];
        
        var tempdocument=ExternalDocumentReference(tempreference,patientid,authenticator,custodian);
        if(tempdocument!=undefined)
        {
            observation.addDerivedFrom(new Reference().setReference(&apos;#&apos;+new Resource(tempdocument.getId())));
            observation.addContained(tempdocument);    
        }
        
    }   

    observation.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(observation))));
    //var oObservation=JSON.parse(parser.encodeResourceToString(observation));
    //logger.info(&apos;EncounterResource-&gt;&apos;+parser.encodeResourceToString(encounter));

    return observation;
    

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>92eda919-b1d6-4b1f-b76b-e83c1c464337</id>
            <name>AllergyIntoleranceBundle</name>
            <revision>13</revision>
            <lastModified>
              <time>1669212305684</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function AllergyIntoleranceBundle(arg1,text,patientid,bundleId) 
{
   var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
   var parser = ctx.newJsonParser();
	//logger.info(&apos;AllergyIntoleranceBundle-&gt;&apos;+text);
   var allergy=JSON.parse(arg1);
   
   if(allergy.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=allergy.Entries.length;
       bundle.entry=[];
   }
   

   //looping through entries
   for(var _a=0;_a&lt;allergy.Entries.length;_a++)
   {
      bundle.entry.push(AllergyIntoleranceResource(allergy.Entries[_a].Act,text,patientid));

      SavefhirResource(bundle.entry[_a],bundleId,allergy.Code);
   }  

   //logger.info(JSON.stringify(bundle)) 
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>aac72619-a521-42c0-9736-19d2aaecf551</id>
            <name>AllergyIntoleranceResource</name>
            <revision>63</revision>
            <lastModified>
              <time>1668944580059</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function AllergyIntoleranceResource(arg1,txt,patientid)
{
   var allergyresource = new org.hl7.fhir.r4.model.AllergyIntolerance();
   var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
   var parser = ctx.newJsonParser();
   
   for(var _id=0;_id&lt;arg1.Ids.length;_id++)
   {
      if(arg1.Ids[_id].Extension!=&apos;&apos;)
      {
            allergyresource.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);
      }
   }

   if(txt!=&apos;&apos; &amp;&amp; GetNarrative(txt)!=null)
   {
     allergyresource.setText(GetNarrative(txt))
      
   }
     
   var tempdate=GetEffectiveTimeInfo(arg1);
      
   if(tempdate.startdatetime!=&apos;&apos;)
   {
      allergyresource.setOnset(new DateTimeType((formatdate(tempdate.startdatetime))));   
   }

   if(arg1.Authors[0].Time.Value!=&apos;&apos;)
   {
      allergyresource.setRecordedDateElement(new DateTimeType((formatdate(arg1.Authors[0].Time.Value))));
   }

   
   allergyresource.setPatient(new Reference().setReference(patientid));

   var recorder=AuthortoPractictionerRole(arg1.Authors[0].AssignedAuthor);
   if(recorder!= undefined)
   {
      allergyresource.addContained(recorder);  
      
      allergyresource.setRecorder(new Reference().setReference(&apos;#&apos;+new Resource(recorder.getId())));
   }

   var recorderperson=AuthortoPractictioner(arg1.Authors[0].AssignedAuthor)
   if(recorderperson!= undefined)
   {
      allergyresource.addContained(recorderperson);
   }

   var recorderorganization=AuthortoOrganization(arg1.Authors[0].AssignedAuthor.Organization);
   if(recorderorganization!= undefined)
   {
      allergyresource.addContained(recorderorganization);
   }
   
   
   
   

   //Loop through Act.EntryRelationship
   for(var _a_oe=0;_a_oe&lt;arg1.EntryRelationships.length;_a_oe++)
   {
      var temp_e_er=arg1.EntryRelationships[_a_oe];
       
      //start of EntryRelationship.Observation
      if(temp_e_er.hasOwnProperty(&apos;Observation&apos;))
      {

         if(temp_e_er.TypeCode.Name==&apos;SUBJ&apos;)
         {
            var allergytype=GetMergedCodeList(temp_e_er.Observation.Code);
            if(allergytype.length&gt;0)
            {
               allergyresource.setType(AllergyIntolerance.AllergyIntoleranceType.valueOf(MapAllergyType(allergytype[0])))   
            }

            if(temp_e_er.Observation.Participants[0].ParticipantRole.PlayingEntity.Code.Code!=&apos;&apos; || temp_e_er.Observation.Participants[0].ParticipantRole.PlayingEntity.Code.DisplayName!=&apos;&apos; || temp_e_er.Observation.Participants[0].ParticipantRole.PlayingEntity.Code.OriginalText.Text!=&apos;&apos;)
            {
               allergyresource.setCode(new CodeableConcept().setCoding(GetCodingList(temp_e_er.Observation.Participants[0].ParticipantRole.PlayingEntity.Code)))
            }
            else if(temp_e_er.Observation.Values[0].CD.OriginalText.Reference.TEL_URL.Value!=&apos;&apos;)
            {
               var allergycode=new Coding();
               allergycode.setSystem(&apos;http://snomed.info/sct&apos;).setCode(&apos;716186003&apos;).setDisplay(&apos;No known allergy&apos;);
               allergyresource.SetCode(CodeableConcept(allergycode))
            }

               //verificationStatus
            allergyresource.setVerificationStatus(CodeableConcept(GetCoding(MapVerificationStatus(temp_e_er.Observation.StatusCode))));
         }

         var reaction=[];
         
         //Start of Observation.EntryRelationship
         for(var _a_oe_oe=0;_a_oe_oe&lt;temp_e_er.Observation.EntryRelationships.length;_a_oe_oe++)
         {
            var temp_e_er_er=temp_e_er.Observation.EntryRelationships[_a_oe_oe];
            
            if(temp_e_er_er.TypeCode.Name==&apos;SUBJ&apos;)
            {
               //Clinicalstatus
               if(temp_e_er_er.Observation.Code.Code==&apos;33999-4&apos;)
               {
                  var clinicalstatus=GetMergedCodeList(temp_e_er_er.Observation.Values[0].CD);
                  if(clinicalstatus.length&gt;0)
                  {
                     allergyresource.setClinicalStatus(CodeableConcept(GetCoding(MapAllergyClinicalStatus(temp_e_er_er.Observation.Values[0].CD))))   
                  }
               }

               //Criticality
               if(temp_e_er_er.Observation.Code.Code==&apos;82606-5&apos;)
               {
                  allergyresource.setCriticality(AllergyIntolerance.AllergyIntoleranceCriticality.valueOf(MapAllergyCriticality(temp_e_er_er.Observation.Values[0].CD)))
               }
            }

            
            if(temp_e_er_er.TypeCode.Name==&apos;MFST&apos; || temp_e_er_er.Observation.Code.Code==&apos;SEV&apos;)
            {

                  
                  //Reaction
                  if(temp_e_er_er.Observation.Code.Code==&apos;ASSERTION&apos; || temp_e_er_er.Observation.Code.Code==&apos;&apos;)
                  {
                        //logic to check for multiple reactions  
                        
                        if(temp_e_er_er.TypeCode.Name==&apos;MFST&apos;)
                        {
                              var reactioncomponent=new org.hl7.fhir.r4.model.AllergyIntolerance.AllergyIntoleranceReactionComponent();      
                        }
                        
                        if(temp_e_er_er.Observation.Code.Code==&apos;ASSERTION&apos; || temp_e_er_er.Observation.Code.Code==&apos;&apos;)
                        {
                              for(var m=0;m&lt;temp_e_er_er.Observation.Values.length;m++)
                              {
                                    var reactionlist=GetMergedCodeList(temp_e_er_er.Observation.Values[m].CD);
                                    if(reactionlist.length&gt;0)
                                    {
                                          reactioncomponent.addManifestation(CodeableConcept(GetCoding(reactionlist[0])));
                                    }
                              }//endlogic to check for multiple reactions

                              //loop for 3 level Entry relationship
                              for(var _a_oe3=0;_a_oe3&lt;temp_e_er_er.Observation.EntryRelationships.length;_a_oe3++)
                              {
                                    var temp_er3=temp_e_er_er.Observation.EntryRelationships[_a_oe3];

                                    //severity
                                    if(temp_er3.Observation.Code.Code==&apos;SEV&apos;)
                                    {
                                          if(temp_er3.Observation.Values[0].CD.Code!=&apos;&apos;)
                                          {
                                          
                                                reactioncomponent.setSeverity(AllergyIntolerance.AllergyIntoleranceSeverity.valueOf(MapAllergySeverity(temp_er3.Observation.Values[0].CD)))
                                          }
                              
                                    } //end of Severity
                              }//end of 3rd EntryRelationship
                        }
                  }//end of reaction
                  
                  //Severity
                  if(temp_e_er_er.Observation.Code.Code==&apos;SEV&apos;)
                  {
                        
                        reactioncomponent.setSeverity(AllergyIntolerance.AllergyIntoleranceSeverity.valueOf(MapAllergySeverity(temp_e_er_er.Observation.Values[0].CD)))
                  }

                  reaction.push(reactioncomponent)
            }//end of MFST
           
      }//end of _a_oe_oe 

      if(reaction.length&gt;0)
      {
            allergyresource.setReaction(removeDuplicates(reaction));
      }


      }//end onEntryRelationship.Observation
   }//end of Act.EntryRelationship

   allergyresource.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(allergyresource))));
   //var oAllergy=JSON.parse(parser.encodeResourceToString(allergyresource));

   return allergyresource;

             
}     
            
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>42b0ab0f-e48c-424a-969a-335e2c672404</id>
            <name>AuthortoOrganization</name>
            <revision>13</revision>
            <lastModified>
              <time>1668252312704</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function AuthortoOrganization(arg1)
{
   //takes Authors[0].AssignedAuthor.Organization node as input
  //logger.info(&apos;AuthortoOrganization-&gt;&apos;+JSON.stringify(arg1))

   importPackage(org.hl7.fhir.r4.model);
   var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
   var parser = ctx.newJsonParser();
	//logger.info(&apos;AuthortoOrganization-&gt;&apos;+JSON.stringify(arg1));
    var organization = new org.hl7.fhir.r4.model.Organization();

    for (var _id = 0; _id &lt; arg1.Ids.length; _id++) 
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            organization.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }
    }

   organization.setAddress(AddAddressNode(arg1.Address));
   organization.setTelecom(AddTelecomNode(arg1.Telecoms));

   if(arg1.Names.length&gt;0)
   {	
	   if(arg1.Names[0].Text!=&apos;&apos;)
	   {
	      organization.setName(arg1.Names[0].Text.trim());   
	   }
   }
   
   
   
   
   organization.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(organization))));
	
   //logger.info(&apos;AuthortoOrganization-&gt;&apos;+countkey(parser.encodeResourceToString(organization)))
   //logger.info(&apos;AuthortoOrganization-&gt;&apos;+parser.encodeResourceToString(organization))
   if(countkey(parser.encodeResourceToString(organization))&gt;2)
   {
   	return organization
   }
   

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>7ca8e61b-d97b-4301-9203-8b392de4162a</id>
            <name>AuthortoPractictioner</name>
            <revision>21</revision>
            <lastModified>
              <time>1668953651223</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function AuthortoPractictioner(arg1)
{
   //takes Authors[0].AssignedAuthor node as input

	//logger.info(&apos;AuthortoPractictioner-&gt;&apos;+JSON.stringify(arg1))
   importPackage(org.hl7.fhir.r4.model);
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();

    var practitioner = new org.hl7.fhir.r4.model.Practitioner();

    for (var _id = 0; _id &lt; arg1.Ids.length; _id++) 
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            practitioner.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }
    }

   practitioner.setAddress(AddAddressNode(arg1.Address));
   practitioner.setTelecom(AddTelecomNode(arg1.Telecoms));

   practitioner.setName(AddNameNode(arg1.Person.Names));
   
   
   
   practitioner.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(practitioner))));
   

	
   if(countkey(parser.encodeResourceToString(practitioner))&gt;2)
   {
   	
   	return practitioner
   }
   /*
   else
   {
   	logger.info(&apos;AuthortoPractictioner-&gt; Returning null&apos;)
   	return null
   }*/
  
   
   

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>c3de3726-322a-4812-b350-04a667842ec8</id>
            <name>AuthortoPractictionerRole</name>
            <revision>25</revision>
            <lastModified>
              <time>1667845006407</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function AuthortoPractictionerRole(arg1)
{
	//takes Authors[0].AssignedAuthor node as input
	//logger.info(&apos;AuthortoPractictionerRole:AuthortoPractictioner-&gt;&apos;+JSON.stringify(arg1))

	importPackage(org.hl7.fhir.r4.model);
    	var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    	var parser = ctx.newJsonParser();

    var practitionerrole = new org.hl7.fhir.r4.model.PractitionerRole();

    for (var _id = 0; _id &lt; arg1.Ids.length; _id++) 
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            practitionerrole.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }
    }

	
	
	//logger.info(&apos;AuthortoPractictionerRole:AuthortoPractictioner-&gt;&apos;+AuthortoPractictioner(arg1))
	if(AuthortoPractictioner(arg1)!= undefined)
	{
		
		//practitionerrole.setPractitioner(new Reference((AuthortoPractictioner(arg1))));	
		practitionerrole.setPractitioner(new Reference().setReference(&apos;#&apos;+new Resource(AuthortoPractictioner(arg1).getId())));
	}

	if(arg1.hasOwnProperty(&apos;Organization&apos;))
	{
		if(AuthortoOrganization(arg1.Organization)!= undefined)
		{
		
			practitionerrole.setOrganization(new Reference().setReference(&apos;#&apos;+new Resource(AuthortoOrganization(arg1.Organization).getId())));
		}	
	}
	else if(arg1.hasOwnProperty(&apos;Organizations&apos;))
	{
		if(AuthortoOrganization(arg1.Organizations[0])!= undefined)
		{
		
			practitionerrole.setOrganization(new Reference().setReference(&apos;#&apos;+new Resource(AuthortoOrganization(arg1.Organizations[0]).getId())));
		}	
	}


	var specialtylist=GetMergedCodeList(arg1.Code);
	//logger.info(&apos;AuthortoPractictionerRole-&gt;&apos;+JSON.stringify(specialtylist));
	for(var _s=0;_s&lt;specialtylist.length;_s++)
	{
		practitionerrole.addSpecialty(CodeableConcept(GetCoding(specialtylist[_s])));
	}
	
	

	practitionerrole.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(practitionerrole))));
     
   	//logger.info(&apos;AuthortoPractictionerRole-&gt;&apos;+countkey(parser.encodeResourceToString(practitionerrole)))
   	//logger.info(&apos;AuthortoPractictionerRole-&gt;&apos;+parser.encodeResourceToString(practitionerrole))
   	if(countkey(parser.encodeResourceToString(practitionerrole))&gt;2)
   	{
   	   	return practitionerrole
   	}
   	
   	

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>3264fda2-22ab-4f88-89b6-ec48f38a93d2</id>
            <name>CareplanBundle</name>
            <revision>10</revision>
            <lastModified>
              <time>1669212306376</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function CareplanBundle(arg1,text,patientid,bundleid) 
{
   
   var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
   var parser = ctx.newJsonParser();
    
   var obj=JSON.parse(arg1);
   
   if(obj.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=obj.Entries.length;
       bundle.entry=[];
   }
   

   //looping through entries
   for(var _a=0;_a&lt;obj.Entries.length;_a++)
   {
        var record=obj.Entries[_a]
        var temp={};

        if(countkey(JSON.stringify(record.SubstanceAdministration))&gt;0)
        {
            temp.resource=CareplanMedicationRequest(record.SubstanceAdministration,text,patientid);   
            bundle.entry.push(temp);
            SavefhirResource(temp.resource,bundleid,obj.Code)   
        }

        
   }  

   //logger.info(&apos;CareplanBundle-&gt;&apos;+JSON.stringify(bundle)) 
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>d6afd6ce-c35e-4fc5-9265-5a20238ee4c5</id>
            <name>CareplanMedicationRequest</name>
            <revision>7</revision>
            <lastModified>
              <time>1668527950434</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function CareplanMedicationRequest(arg1,text,patientid)
{
   importPackage(org.hl7.fhir.r4.model);
   var careplan = new org.hl7.fhir.r4.model.CarePlan();
   var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
   var parser = ctx.newJsonParser();
   var activity=new org.hl7.fhir.r4.model.CarePlan.CarePlanActivityComponent();
   var activitydetail=new org.hl7.fhir.r4.model.CarePlan.CarePlanActivityDetailComponent();

   
   for(var _id=0;_id&lt;arg1.Ids.length;_id++)
   {
      if(arg1.Ids[_id].Extension!=&apos;&apos;)
      {
         careplan.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
      }
        
   }

   if(text!=&apos;&apos;)
   {
     careplan.setText(GetNarrative(text))
   }

   careplan.setStatus(CarePlan.CarePlanStatus.UNKNOWN);

   careplan.setIntent(CarePlan.CarePlanIntent.valueOf(MapCareplanIntent(arg1.MoodCode.Name)));

   careplan.setSubject(new Reference().setReference(patientid));

   if(arg1.hasOwnProperty(&apos;Informants&apos;))
   {

        for(var _inf=0;_inf&lt;arg1.Informants.length;_inf++)
        {
            var tempinformant=arg1.Informants[_inf];

            /Informant Block Start/
            if(AuthortoPractictionerRole(tempinformant.AssignedEntity)!= undefined)
            {
                careplan.addContained(AuthortoPractictionerRole(tempinformant.AssignedEntity));    
                careplan.addContributor(new Reference().setReference(&apos;#&apos;+new Resource(AuthortoPractictionerRole(tempinformant.AssignedEntity).getId())));
            }

            if(AuthortoPractictioner(tempinformant.AssignedEntity)!= undefined)
            {
                careplan.addContained(AuthortoPractictioner(tempinformant.AssignedEntity));
            }
                   
            if(AuthortoOrganization(tempinformant.AssignedEntity.Organizations[0])!= undefined)
            {
                careplan.addContained(AuthortoOrganization(tempinformant.AssignedEntity.Organizations[0]));
            }

            /Informant Block End/      
        }
      

   }

   activitydetail.setKind(CarePlan.CarePlanActivityKind.MEDICATIONREQUEST);

   activitydetail.setStatus(CarePlan.CarePlanActivityStatus.valueOf(MapCareplanStatus(arg1.StatusCode.Code)));

   var tempdate=GetEffectiveTimeInfo(arg1);

   if(tempdate.startdatetime!=&apos;&apos; &amp;&amp; tempdate.enddatetime!=&apos;&apos;)
   {
      var period=new Period();
      period.setStartElement(new DateTimeType(formatdate(tempdate.startdatetime)));
      period.setEndElement(new DateTimeType(formatdate(tempdate.enddatetime)));
      activitydetail.setScheduled(period)
   }
   else if(tempdate.startdatetime!=&apos;&apos;)
   {
        activitydetail.setScheduled(new StringType(formatdate(tempdate.startdatetime)))
   }


   activitydetail.setProduct(new CodeableConcept().setCoding(GetCodingList(arg1.Consumable.ManufacturedProduct.Material.Code)));

   activity.setDetail(activitydetail);
   careplan.addActivity(activity);

   careplan.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(careplan))));

  // logger.info(&apos;careplan Resource-&gt;&apos;+parser.encodeResourceToString(careplan));

   return careplan;

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>caf126fc-1371-4852-a025-d87595c7fbc1</id>
            <name>CompositionResource</name>
            <revision>16</revision>
            <lastModified>
              <time>1668944757672</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function CompositionResource(arg1,patientid,bundleId)
{
    
   importPackage(org.hl7.fhir.r4.model);
    var composition = new org.hl7.fhir.r4.model.Composition();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  
   
    if(arg1.Id.Extension!=&apos;&apos;)
    {
        composition.setIdentifier(new Identifier().setSystem(GetSystem(arg1.Id.Root)).setValue(arg1.Id.Extension));   
    }  
    
    
    composition.setStatus(Composition.CompositionStatus.FINAL);
    composition.setType(new CodeableConcept().setCoding(GetCodingList(arg1.Code)));
    composition.setSubject(new Reference().setReference(patientid)); 

    if(arg1.Effective.Value!=&apos;&apos;)
    {
        composition.setDateElement(new DateTimeType(formatdate(arg1.Effective.Value)))    
    }  
    
    composition.setTitle(arg1.Title);

    if(arg1.ConfidentialityCode.Code!=&apos;&apos;)
    {
        composition.setConfidentiality(Composition.DocumentConfidentiality.valueOf(MapConfidentiality(arg1.ConfidentialityCode.Code)))
    }


    var tempcustodian=ParticipanttoOrganization(arg1.Custodian.AssignedCustodian.CustodianOrganization);
    if(tempcustodian!=undefined)
    {
        composition.addContained(tempcustodian)
        composition.setCustodian(new Reference().setReference(&apos;#&apos;+new Resource(tempcustodian.getId())))
    }

    if(arg1.DocumentationOfs.length&gt;0)
    {
        if(arg1.DocumentationOfs[0].ServiceEvent.IVL_TS.Low.TS.Value!=&apos;&apos;)
        {
            var period=new Period()
            period.setStartElement(new DateTimeType(formatdate(arg1.DocumentationOfs[0].ServiceEvent.IVL_TS.Low.TS.Value)))

            if(arg1.DocumentationOfs[0].ServiceEvent.IVL_TS.High.TS.Value!=&apos;&apos;)
            {
                period.setEndElement(new DateTimeType(formatdate(arg1.DocumentationOfs[0].ServiceEvent.IVL_TS.High.TS.Value)))    
            }

            composition.addEvent(new org.hl7.fhir.r4.model.Composition.CompositionEventComponent().setPeriod(period));
            
        }
    }
   
    for(var _a=0;_a&lt;arg1.Authors.length;_a++)
    {
        var tempauthor=arg1.Authors[_a];

        /Author Block Start/
        var tauthor=AuthortoPractictionerRole(tempauthor.AssignedAuthor);
        if(tauthor!= undefined)
        {
            composition.addContained(tauthor);    
            composition.addAuthor(new Reference().setReference(&apos;#&apos;+new Resource(tauthor.getId())));
        }

        var tauthorperson=AuthortoPractictioner(tempauthor.AssignedAuthor);
        if(tauthorperson!= undefined)
        {
            composition.addContained(tauthorperson);
        }
                 
        var tauthorg=AuthortoOrganization(tempauthor.AssignedAuthor.Organization);
        if(tauthorg!= undefined)
        {
            composition.addContained(tauthorg);
        }

        /Author Block End/

    }

    var oComposition=JSON.parse(parser.encodeResourceToString(composition));

    //SavefhirResource(parser.encodeResourceToString(composition),composition.getId(),&apos;Composition&apos;,bundleId,null);
    SavefhirResource(composition,bundleId,null);
    
    return oComposition;
    
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>24abdd23-9a53-4905-a7be-a2969904ff83</id>
            <name>ConditionBundle</name>
            <revision>4</revision>
            <lastModified>
              <time>1669212307599</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
function ConditionBundle(arg1,text,patientid,bundleId) 
{
    var problem=JSON.parse(arg1);  

    if(problem.hasOwnProperty(&apos;Entries&apos;))
    {
    
         if(problem.Entries.length&gt;0)
         {
               var bundle={};
                bundle.resourceType=&apos;Bundle&apos;;
                bundle.type=&apos;batch&apos;;
                bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
                bundle.total=problem.Entries.length;
                bundle.entry=[];
         }
        
        //looping through entries
        for(var _p=0;_p&lt;problem.Entries.length;_p++)
        {
           bundle.entry[_p]={};
           bundle.entry[_p].resource=ConditionResource(problem.Entries[_p].Act,text,patientid)

           SavefhirResource(bundle.entry[_p].resource,bundleId,problem.Code);
        }//end of _p

        //logger.info(&apos;ConditionBundle-&gt;&apos;+JSON.stringify(bundle));
        return bundle;
    }
    
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>d0b0f04e-5478-4e70-988b-00e67434834a</id>
            <name>ConditionResource</name>
            <revision>33</revision>
            <lastModified>
              <time>1668944873588</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
function ConditionResource(arg1,txt,patientid) 
{
    importPackage(org.hl7.fhir.r4.model);
    var condition = new org.hl7.fhir.r4.model.Condition();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  
    

    if(arg1.hasOwnProperty(&apos;Informants&apos;))
    {
        if(arg1.Informants.length&gt;0)
        {
            var tempasserter=AuthortoPractictionerRole(arg1.Informants[0].AssignedEntity);
            if(tempasserter!= undefined)
            {
                condition.addContained(tempasserter);    
                condition.setAsserter(new Reference().setReference(&apos;#&apos;+new Resource(tempasserter.getId())));
            }

            var tempasserterperson=AuthortoPractictioner(arg1.Informants[0].AssignedEntity);
            if(tempasserterperson!= undefined)
            {
                condition.addContained(tempasserterperson);
            }
                   
            var tempasserterorg= AuthortoOrganization(arg1.Informants[0].AssignedEntity.Organizations[0]);
            if(tempasserterorg!= undefined)
            {
                condition.addContained(tempasserterorg);
            }   
        }

    }
    
    
    

    //looping through Entry Relationships
    for(_per=0;_per&lt;arg1.EntryRelationships.length;_per++)
    {
        var temp_er=arg1.EntryRelationships[_per];
        
        if(temp_er.TypeCode.Name==&apos;SUBJ&apos; &amp;&amp; temp_er.hasOwnProperty(&apos;Observation&apos;))
        {
            for(var _id=0;_id&lt;temp_er.Observation.Ids.length;_id++)
            {
                if(temp_er.Observation.Ids[_id].Extension!=&apos;&apos;)
                {
                    condition.addIdentifier().setSystem(GetSystem(temp_er.Observation.Ids[_id].Root)).setValue(temp_er.Observation.Ids[_id].Extension);   
                }
            
            }
            
        if(txt!=&apos;&apos; &amp;&amp; GetNarrative(txt)!=null)
            {
                condition.setText(GetNarrative(txt))
            }

            condition.setSubject(new Reference().setReference(patientid));      
            
            var conditioncategory=GetMergedCodeList(temp_er.Observation.Code);
          
            for(var _cat=0;_cat&lt;conditioncategory.length;_cat++)
            {
                condition.addCategory(CodeableConcept(GetCoding(conditioncategory[_cat])));
            } 
            
            var encdate=GetEffectiveTimeInfo(temp_er.Observation);
    
            if(encdate.startdatetime!=&apos;&apos;)
            {
                condition.setOnset(new DateTimeType(formatdate(encdate.startdatetime)));
            }

            if(encdate.enddatetime!=&apos;&apos;)
            {
                condition.setAbatement(new DateTimeType(formatdate(encdate.enddatetime)));
            }        
        
            var conditioncode=GetMergedCodeList(temp_er.Observation.Values[0].CD);
            //logger.info(&apos;ConditionResource:conditioncode-&gt;&apos;+GetMergedCodeList(temp_er.Observation.Values[0].CD))
            if(conditioncode.length&gt;0)
            {
                condition.setCode(CodeableConcept(GetCoding(conditioncode[0])));
            }

            //loop for Entryrelationship within observation
            for(var _o_er=0;_o_er&lt;temp_er.Observation.EntryRelationships.length&gt;0;_o_er++)
            {
                var temp_er_er=temp_er.Observation.EntryRelationships[_o_er];

                if(temp_er_er.hasOwnProperty(&apos;Observation&apos;))
                {
                    //start of clinicalstatus
                    if(temp_er_er.Observation.Code.Code==&apos;33999-4&apos;)
                    {
                        condition.setClinicalStatus(CodeableConcept(GetCoding(temp_er_er.Observation.Values[0].CD)));
                  }//end of clinicalstatus
        
        
                    // age at onset
                    if(temp_er_er.Observation.Code.Code==&apos;445518008&apos; || temp_er_er.Observation.Code.Code==&apos;397659008&apos;)
                    {
                        if(temp_er_er.Observation.Values[0].PQ.Value!=&apos;&apos;  &amp;&amp; encdate.startdatetime==&apos;&apos;)
                        {
                            condition.setOnset(new Age().setValue(temp_er_er.Observation.Values[0].PQ.Value).setCode(temp_er_er.Observation.Values[0].PQ.Unit));    
                        }
                        
                    }// end of OnsetAge
        

                    if(temp_er_er.Observation.Code.Code==&apos;225773000&apos;)
                    {
                        //start of severity
                        var severitylist=GetMergedCodeList(temp_er_er.Observation.Values[0].CD);
                        for(var _s=0;_s&lt;severitylist.length;_s++)
                        {
                            condition.setSeverity(CodeableConcept(GetCoding(severitylist[_s])))
                        }
                    }//end of severity
                }// end of temp_er_er.hasOwnProperty(&apos;Observation&apos;)
            }//end of temp_er_er for loop
        }//end of if loop 
    }//end of _per

    condition.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(condition))));
    //var oCondition=JSON.parse(parser.encodeResourceToString(condition));
    
   // logger.info(&apos;ConditionResource-&gt;&apos;+parser.encodeResourceToString(condition));
    if(countkey(parser.encodeResourceToString(condition))&gt;2)
    {
        return condition
    }

    //return oCondition;
}

        
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>1c07dcff-6262-4cca-88c8-91fa777c48b2</id>
            <name>CoverageResource</name>
            <revision>45</revision>
            <lastModified>
              <time>1668939894332</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
function CoverageResource(arg1,text,patientid)
{
    
    
    importPackage(org.hl7.fhir.r4.model);
    var coverage = new org.hl7.fhir.r4.model.Coverage();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  

    for(var _id=0;_id&lt;arg1.Ids.length;_id++)
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            coverage.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }
        
    }

    if(text!=&apos;&apos; &amp;&amp; GetNarrative(text)!=null)
    {
        coverage.setText(GetNarrative(text))
    }

    coverage.setStatus(Coverage.CoverageStatus.ACTIVE);
    coverage.setBeneficiary(new Reference().setReference(patientid));

    for(var _er1=0;_er1&lt;arg1.EntryRelationships.length;_er1++)
    {
        er1=arg1.EntryRelationships[_er1];

        if(er1.SequenceNumber.Value!=&apos;&apos;)
        {
            coverage.setOrder(er1.SequenceNumber.Value);
        }


        if(er1.hasOwnProperty(&apos;Act&apos;))
        {
            if(er1.Act.Ids[0].Extension!=&apos;&apos;)
            {
                coverage.setSubscriberId(er1.Act.Ids[0].Extension);
            }

            for(var _perf=0;_perf&lt;er1.Act.Performers.length;_perf++)
            {
                var tempperformer=er1.Act.Performers[_perf];

                if(tempperformer.AssignedEntity.Code.Code==&apos;PAYOR&apos;)
                {
                    var payerorg=OrganizationResource(tempperformer.AssignedEntity.Organizations[0]);
                    if(payerorg!=undefined)
                    {
                        coverage.addPayor(new Reference().setType(&apos;Organization&apos;).setDisplay(&apos;Payor&apos;).setReference(&apos;#&apos;+new Resource(payerorg.getId())))
                        coverage.addContained(payerorg)
                    }
                }

                if(tempperformer.AssignedEntity.Code.Code==&apos;GUAR&apos;)
                {
                    var relatedperson=ParticipanttoRelatedPerson(tempperformer.AssignedEntity);
                    if(relatedperson!=undefined)
                    {
                        coverage.addPayor(new Reference().setType(&apos;RelatedPerson&apos;).setDisplay(&apos;Guarantor&apos;).setReference(&apos;#&apos;+new Resource(relatedperson.getId())))
                        coverage.addContained(relatedperson)
                    }
                }
                
            }

            
            for(var _p=0;_p&lt;er1.Act.Participants.length;_p++)
            {
                var tempparticipant=er1.Act.Participants[_p];

                if(tempparticipant.TypeCode.Name==&apos;HLD&apos;)
                {
                    var relatedperson=ParticipanttoRelatedPerson(tempparticipant.ParticipantRole,patientid)
                    if(relatedperson!=undefined)
                    {
                        coverage.addContained(relatedperson);    
            
                        coverage.setPolicyHolder(new Reference().setType(&apos;RelatedPerson&apos;).setDisplay(&apos;Policy Holder&apos;).setReference(&apos;#&apos;+new Resource(relatedperson.getId())));    
                    }
                    
                }

                if(tempparticipant.TypeCode.Name==&apos;COV&apos;)
                {
                    var subscriber=ParticipanttoPatient(tempparticipant.ParticipantRole)
                    if(subscriber!=undefined)
                    {
                        coverage.addContained(subscriber);    
            
                        coverage.setSubscriber(new Reference().setType(&apos;Patient&apos;).setDisplay(&apos;Insured Person&apos;).setReference(&apos;#&apos;+new Resource(subscriber.getId())));    
                    }

                    if(tempparticipant.ParticipantRole.Code.Code!=&apos;&apos; || tempparticipant.ParticipantRole.Code.DisplayName!=&apos;&apos;)
                    {
                        coverage.setRelationship(new CodeableConcept().setCoding(GetCodingList(tempparticipant.ParticipantRole.Code)))
                        
                    }

                    var period=new Period();
                    if(tempparticipant.Time.Low.TS.Value!=&apos;&apos;)
                    {
                        period.setStartElement(new DateTimeType(formatdate(tempparticipant.Time.Low.TS.Value)));
                        coverage.setPeriod(period);
                    }

                    if(tempparticipant.Time.High.TS.Value!=&apos;&apos;)
                    {
                        period.setEndElement(new DateTimeType(formatdate(tempparticipant.Time.High.TS.Value)));
                        coverage.setPeriod(period);
                    }
                    
                }
            }


            for(var _er2=0;_er2&lt;er1.Act.EntryRelationships.length;_er2++)
            {
                var er2=er1.Act.EntryRelationships[_er2];
                if(er2.TypeCode.Name==&apos;REFR&apos; &amp;&amp; er2.Act.MoodCode.Name==&apos;DEF&apos;)
                {
                    if(er2.Act.Text.Text!=&apos;&apos;)
                    {
                        var classcomponent=org.hl7.fhir.r4.model.Coverage.ClassComponent();
                        classcomponent.setType(new CodeableConcept().setText(&apos;Plan&apos;));
                        classcomponent.setValue(er2.Act.Text.Text.trim());
                        coverage.addClass_(classcomponent);
                    }
                }

                for(var _er3=0;_er3&lt;er2.Act.EntryRelationships.length;_er3++)
                {
                    var er3=er2.Act.EntryRelationships[_er3];

                    if(er3.hasOwnProperty(&apos;Procedure&apos;))
                    {
                        if(er3.Procedure.MoodCode.Name==&apos;PRMS&apos;)
                        {
                            if(er3.Procedure.Code.Code!=&apos;&apos; || er3.Procedure.Code.DisplayName!=&apos;&apos;)
                            {
                                coverage.addExtension().setUrl(&apos;http://hl7.org/fhir/us/core/StructureDefinition/prior-auth&apos;).setValue(new CodeableConcept().setCoding(GetCodingList(er3.Procedure.Code)));
                            }
                        }
                        
                        
                    }
                }
            }
        }
    }

    coverage.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(coverage))));
 //   var oCoverage=JSON.parse(parser.encodeResourceToString(coverage));
    //logger.info(&apos;coverageResource-&gt;&apos;+parser.encodeResourceToString(coverage));
   


    
    return coverage;


    

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>6f0f3d3a-b4ac-487b-ad13-61d30b8a94af</id>
            <name>DeviceResource</name>
            <revision>11</revision>
            <lastModified>
              <time>1668246836874</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function DeviceResource(arg1,txt,patientid)
{
   	importPackage(org.hl7.fhir.r4.model);
    var device = new org.hl7.fhir.r4.model.Device();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  

    for(var _id=0;_id&lt;arg1.Ids.length;_id++)
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            device.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }  
    }

    if(txt!=&apos;&apos; &amp;&amp; GetNarrative(txt)!=null)
    {
        device.setText(GetNarrative(txt))
    }

    device.setStatus(Device.FHIRDeviceStatus.valueOf(MapDeviceStatus(arg1.StatusCode.Code)));
    device.setPatient(new Reference().setReference(patientid));  

    var tempdate=GetEffectiveTimeInfo(arg1);
    if(tempdate.enddatetime!=&apos;&apos;)
    {
    	device.setExpirationDateElement(new DateTimeType(formatdate(tempdate.enddatetime)))	
    }

    if(arg1.Quantity.Value!=&apos;&apos;)
    {
    	var quantity=new Quantity();
    	quantity.setValue(arg1.Quantity.Value);
    	if(arg1.Quantity.Unit!=&apos;&apos; &amp;&amp; arg1.Quantity.Unit!=&apos;1&apos;)
    	{
    		quantity.setUnit(arg1.Quantity.Unit)
    	}

    	device.addProperty(new org.hl7.fhir.r4.model.Device.DevicePropertyComponent().addValueQuantity(quantity));
    }
    
    for(var _p=0;_p&lt;arg1.Participants.length;_p++)
    {
    	var tempparticipant=arg1.Participants[_p];
    	if(tempparticipant.TypeCode.Name==&apos;PRD&apos; || tempparticipant.TypeCode.Name==&apos;DEV&apos;)
    	{
    		var devicelist=GetMergedCodeList(tempparticipant.ParticipantRole.Device.Code);
    		for(var _d=0;_d&lt;devicelist.length;_d++)
    		{
    			var devicename=new org.hl7.fhir.r4.model.Device.DeviceDeviceNameComponent();
    			devicename.setName(devicelist[_d].DisplayName);
    			devicename.setType(Device.DeviceNameType.OTHER);
    			device.addDeviceName(devicename);

    		}

    		if(tempparticipant.ParticipantRole.Entity.Desc.Text!=&apos;&apos; || tempparticipant.ParticipantRole.Entity.Desc.Reference.TEL_URL.Value!=&apos;&apos;)
    		{
    			device.setManufacturer(tempparticipant.ParticipantRole.Entity.Desc.Text!=&apos;&apos;?tempparticipant.ParticipantRole.Entity.Desc.Text.trim():tempparticipant.ParticipantRole.Entity.Desc.Reference.TEL_URL.Value.trim())
    		}
    	}
    }

    for(var _er1=0;_er1&lt;arg1.EntryRelationships.length;_er1++)
    {
    	var er1=arg1.EntryRelationships[_er1];
    	if(er1.hasOwnProperty(&apos;Act&apos;))
    	{
    		
    		if(er1.Act.Text.Text!=&apos;&apos;)
            {
                device.addNote(new Annotation().setText(er1.Act.Text.Text.trim()))
            }
            else if(er1.Act.Text.hasOwnProperty(&apos;Reference&apos;))
            {
                if(er1.Act.Text.Reference.TEL_URL.Value!=&apos;&apos;)
                {
                    device.addNote(new Annotation().setText(er1.Act.Text.Reference.TEL_URL.Value.trim()))
                }
            }
    	}
    }

    device.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(device))));
 //   var oDevice=JSON.parse(parser.encodeResourceToString(device));
   // logger.info(&apos;DeviceResource-&gt;&apos;+parser.encodeResourceToString(device));

    return device;

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>882e0d9b-fd8a-46ad-a4aa-916686cc0763</id>
            <name>EncounterBundle</name>
            <revision>6</revision>
            <lastModified>
              <time>1669212308324</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function EncounterBundle(arg1,text,patientid,bundleId) 
{
   var enc=JSON.parse(arg1);

   if(enc.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=enc.Entries.length;
       bundle.entry=[];
   }


   //looping through entries
   for(var _e=0;_e&lt;enc.Entries.length;_e++)
   {
      var tempentry=enc.Entries[_e].Encounter;
      bundle.entry[_e]={};
      bundle.entry[_e].resource=EncounterResource(tempentry,text,patientid);

      SavefhirResource(bundle.entry[_e].resource,bundleId,enc.Code);

   }//end of entry loop

   //logger.info(&apos;EncounterBundle-&gt;&apos;+JSON.stringify(bundle));
   return clean(bundle);
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>5ff514fe-780e-4d24-a226-e0c5f7aac20a</id>
            <name>EncounterResource</name>
            <revision>50</revision>
            <lastModified>
              <time>1668945134041</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function EncounterResource(arg1,txt,patientid) 
{
    importPackage(org.hl7.fhir.r4.model);
    var encounter = new org.hl7.fhir.r4.model.Encounter();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  

    for(var _id=0;_id&lt;arg1.Ids.length;_id++)
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            encounter.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }
        
    }
   
    if(txt!=&apos;&apos; &amp;&amp; GetNarrative(txt)!=null)
    {
            encounter.setText(GetNarrative(txt))
        }
      
    encounter.setSubject(new Reference().setReference(patientid));
    

    
    encounter.setStatus(Encounter.EncounterStatus.valueOf(MapEncounterStatus(arg1.StatusCode.Code)))    
    
    var codinglist=[];
    var typelist=GetMergedCodeList(arg1.Code);
    //logger.info(&apos;EncounterResource-&gt;&apos;+typelist);
    for(var _type=0;_type&lt;typelist.length;_type++)
    {
        codinglist.push(CodeableConcept(GetCoding(typelist[_type])))
        encounter.setType(codinglist);
    }

    for(var _p=0;_p&lt;arg1.Performers.length;_p++)
    {   
        var tempperformer=arg1.Performers[_p]
        
        if(tempperformer.TypeCode.Name!=&apos;LOC&apos;)
        {
                
            var encounterparticipant=new org.hl7.fhir.r4.model.Encounter.EncounterParticipantComponent();
                
            var tempindividual=AuthortoPractictionerRole(tempperformer.AssignedEntity);
            if(tempindividual!= undefined)
            {

                encounter.addContained(tempindividual);    
            
                encounterparticipant.setIndividual(new Reference().setReference(&apos;#&apos;+new Resource(tempindividual.getId())));
            }

            var tempindividualperson=AuthortoPractictioner(tempperformer.AssignedEntity);
            if(tempindividualperson!= undefined)
            {
                encounter.addContained(tempindividualperson);
            }
            
            var tempindividualorg=AuthortoOrganization(tempperformer.AssignedEntity.Organizations[0]);
            if(tempindividualorg!= undefined)
            {
                encounter.addContained(tempindividualorg);
            }

            if(tempperformer.TypeCode.Name!=&apos;&apos;)
            {
                encounterparticipant.addType(CodeableConcept(MapParticipantType(tempperformer.TypeCode.Name)))  
            }   

            encounter.addParticipant(encounterparticipant)
        }
    }//end of performer loop

    

     
    var encdate=GetEffectiveTimeInfo(arg1);
    
    if(encdate.startdatetime!=&apos;&apos;)
    {
        encounter.setPeriod(new Period().setStartElement(new DateTimeType(formatdate(encdate.startdatetime))));
    }

    if(encdate.enddatetime!=&apos;&apos;)
    {
        encounter.setPeriod(new Period().setStart(new Date(formatdate(encdate.enddatetime))));
    }

    if(arg1.Priority.Code!=&apos;&apos;)
    {
        encounter.setPriority(CodeableConcept(GetCoding(arg1.Priority)))   
    }
      
       

    
    
    //loop through 1st entry relationship
    for(var _e_er1=0;_e_er1&lt;arg1.EntryRelationships.length;_e_er1++)
    {
        var temp_e_er1=arg1.EntryRelationships[_e_er1];

        //start of observation-reason
        if(temp_e_er1.hasOwnProperty(&apos;Observation&apos;))
        {
            encounter.addReasonCode(CodeableConcept(GetCoding(temp_e_er1.Observation.Values[0].CD)));
            
        }// end of observation-reason
         
        //Start of Act-diagnosis
        if(temp_e_er1.hasOwnProperty(&apos;Act&apos;))
        {
              
            for(var _a=0;_a&lt;temp_e_er1.Act.EntryRelationships.length;_a++)
            {
            
                var tmp_condition=temp_e_er1.Act.EntryRelationships[_a];
                var encounterdiagnosis=new org.hl7.fhir.r4.model.Encounter.DiagnosisComponent();

                var tempdiag=ConditionResource(temp_e_er1.Act,txt,patientid);
                if(tempdiag!=undefined)
                {
                    encounter.addContained(tempdiag);    
                    encounterdiagnosis.setCondition(new Reference().setReference(&apos;#&apos;+new Resource(tempdiag.getId())));
                    encounter.addDiagnosis(encounterdiagnosis);
                }
                
                
            }
            
        }// end of Act-diagnosis
        
    }//end of 1st entry relationship
    
    for(var _o=0;_o&lt;arg1.Participants.length&gt;0;_o++)
    {
        var temppart=arg1.Participants[_o];
        if(temppart.TypeCode.Name==&apos;LOC&apos;)
        {
            var tempprovider=ParticipanttoOrganization(temppart.ParticipantRole);
            if(tempprovider!=undefined)
            {
                encounter.addContained(tempprovider);    
                encounter.setServiceProvider(new Reference().setReference(&apos;#&apos;+new Resource(tempprovider.getId())));      
            }
            
        }
        
    }
      
    

    
    encounter.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(encounter))));
   // var oEncounter=JSON.parse(parser.encodeResourceToString(encounter));
    //logger.info(&apos;EncounterResource-&gt;&apos;+parser.encodeResourceToString(encounter));

    return encounter;
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>c0ff72c1-df5c-4007-a1c3-fa318bc08155</id>
            <name>ExternalDocumentReference</name>
            <revision>5</revision>
            <lastModified>
              <time>1669213834374</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function ExternalDocumentReference(arg1,patientid,authenticator,custodian) 
{
    importPackage(org.hl7.fhir.r4.model);
    var documentreference = new org.hl7.fhir.r4.model.DocumentReference();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  
   
    for(var _id=0;_id&lt;arg1.ExternalDocument.Ids.length;_id++)
    {
        if(arg1.ExternalDocument.Ids[_id].Extension!=&apos;&apos;)
        {
            documentreference.addIdentifier().setSystem(GetSystem(arg1.ExternalDocument.Ids[_id].Root)).setValue(arg1.ExternalDocument.Ids[_id].Extension);   
        }  
    }

    documentreference.setStatus(Enumerations.DocumentReferenceStatus.CURRENT)

    var documentcomponent=new org.hl7.fhir.r4.model.DocumentReference.DocumentReferenceContentComponent();

    if(arg1.ExternalDocument.Text.Text!=&apos;&apos;)
    {
        var attachment=new org.hl7.fhir.r4.model.Attachment();
        attachment.setTitle(arg1.ExternalDocument.Text.Text);
    
        if(arg1.ExternalDocument.Text.MediaType!=&apos;&apos;)
        {
            attachment.setContentType(arg1.ExternalDocument.Text.MediaType)    
        }    
    
        documentcomponent.setAttachment(attachment);
        documentreference.addContent(documentcomponent)
    }
    else if(arg1.ExternalDocument.Text.Reference.hasOwnProperty(&apos;TEL_URL&apos;))
    {
            if(arg1.ExternalDocument.Text.Reference.TEL_URL.Value!=&apos;&apos;)
        {
            var attachment=new org.hl7.fhir.r4.model.Attachment();
            attachment.setTitle(arg1.ExternalDocument.Text.Reference.TEL_URL.Value);
    
            if(arg1.ExternalDocument.Text.MediaType!=&apos;&apos;)
            {
                attachment.setContentType(arg1.ExternalDocument.Text.MediaType)    
            }    
    
            documentcomponent.setAttachment(attachment);
            documentreference.addContent(documentcomponent)
    
        }
    }
    

    if(authenticator!=&apos;&apos; &amp;&amp; authenticator!=undefined)
    {
        documentreference.setAuthenticator(new Reference().setReference(authenticator));
    }

    if(custodian!=&apos;&apos; &amp;&amp; custodian!=undefined)
    {
        documentreference.setCustodian(new Reference().setReference(custodian));
    }

    documentreference.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(documentreference))));
    //var oDocumentReference=JSON.parse(parser.encodeResourceToString(documentreference));
    
    
    if(countkey(parser.encodeResourceToString(documentreference))&gt;2)
    {
        return documentreference
    }
         
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>cfce7c21-3f6d-4158-95bc-59c076b803c9</id>
            <name>FamilyMemberHistoryBundle</name>
            <revision>5</revision>
            <lastModified>
              <time>1669212309013</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function FamilyMemberHistoryBundle(arg1,text,patientid,bundleId) 
{
   
    
   var obj=JSON.parse(arg1);
   
   if(obj.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=obj.Entries.length;
       bundle.entry=[];
   }
   

   //looping through entries
   for(var _a=0;_a&lt;obj.Entries.length;_a++)
   {
        var tempentry=obj.Entries[_a].Organizer;
        bundle.entry[_a]={}
        bundle.entry[_a].resource=FamilyMemberHistoryResource(tempentry,text,patientid)

        SavefhirResource(bundle.entry[_a].resource,bundleId,obj.Code);
   }  

   //logger.info(JSON.stringify(bundle)) 
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>e0ca4962-1177-45e9-82c7-b572515f7fbe</id>
            <name>FamilyMemberHistoryResource</name>
            <revision>10</revision>
            <lastModified>
              <time>1668243296846</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
function FamilyMemberHistoryResource(arg1,txt,patientid)
{
    importPackage(org.hl7.fhir.r4.model);
    var familyhistory = new org.hl7.fhir.r4.model.FamilyMemberHistory();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  

    for(var _id=0;_id&lt;arg1.Ids.length;_id++)
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            familyhistory.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }
    }

    if(txt!=&apos;&apos; &amp;&amp; GetNarrative(txt)!=null)
    {
        familyhistory.setText(GetNarrative(txt))
    }

    familyhistory.setStatus(FamilyMemberHistory.FamilyHistoryStatus.COMPLETED);
    familyhistory.setPatient(new Reference().setReference(patientid));  
    familyhistory.setRelationship(CodeableConcept(GetCoding(arg1.Subject.RelatedSubject.Code)));

    var sex=GetMergedCodeList(arg1.Subject.RelatedSubject.SubjectPerson.AdministrativeGenderCode);
    if(sex.length&gt;0)
    {
        familyhistory.setSex(CodeableConcept(GetCoding(sex[0])));    
    }

    if(arg1.Subject.RelatedSubject.SubjectPerson.BirthTime.Value!=&apos;&apos;)
    {
        familyhistory.setBorn(new StringType(arg1.Subject.RelatedSubject.SubjectPerson.BirthTime.Value));    
    }

    if(arg1.Subject.RelatedSubject.SubjectPerson.DeceasedTime.Value!=&apos;&apos;)
    {
        familyhistory.setDeceased(new StringType(arg1.Subject.RelatedSubject.SubjectPerson.DeceasedTime.Value));    
    }
    
    for(var _c=0;_c&lt;arg1.Components.length&gt;0;_c++)
    {
        var tempcondition=arg1.Components[_c].Observation

        var conditioncomponent=new org.hl7.fhir.r4.model.FamilyMemberHistory.FamilyMemberHistoryConditionComponent();
        conditioncomponent.setCode(CodeableConcept(GetCoding(tempcondition.Values[0].CD)));

        for(var _er1=0;_er1&lt;tempcondition.EntryRelationships.length&gt;0;_er1++)
        {
            var er1=tempcondition.EntryRelationships[_er1];
            if(er1.TypeCode.Name==&apos;CAUS&apos;)
            {   
                var outcome=GetMergedCodeList(er1.Observation.Values[0].CD);
                if(outcome.length&gt;0)
                {
                    conditioncomponent.setOutcome(CodeableConcept(GetCoding(outcome[0])));    
                }
            }

            if(er1.TypeCode.Name==&apos;SUBJ&apos;)
            {   
                
                if(er1.Observation.Code.Code==&apos;397659008&apos;)
                {
                	if(er1.Observation.Values[0].PQ.Value!=&apos;&apos;)
                	{
                		conditioncomponent.setOnset(new Age().setValue(er1.Observation.Values[0].PQ.Value).setCode(er1.Observation.Values[0].PQ.Unit));
                	}
                    
                }
            }    
        }
        

        familyhistory.addCondition(conditioncomponent);
    }
    familyhistory.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(familyhistory))));
    //var oFamilyHistory=JSON.parse(parser.encodeResourceToString(familyhistory));
    
    //logger.info(&apos;familyhistory-&gt;&apos;+parser.encodeResourceToString(familyhistory));
    if(countkey(parser.encodeResourceToString(familyhistory))&gt;2)
    {
        return familyhistory
    }
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>240d7479-ebde-49c9-a93b-1921271cae56</id>
            <name>FunctionalStatusBundle</name>
            <revision>6</revision>
            <lastModified>
              <time>1669212310408</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function FunctionalStatusBundle(arg1,text,patientid,bundleId) 
{
   
    
   var obj=JSON.parse(arg1);
   
   if(obj.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=obj.Entries.length;
       bundle.entry=[];
   }
   

   //looping through entries
   for(var _a=0;_a&lt;obj.Entries.length;_a++)
   {
      if(obj.Entries[_a].hasOwnProperty(&apos;Observation&apos;))
      {
        var temp={};
        temp.resource=ObservationResource(obj.Entries[_a].Observation,text,patientid,obj.Code);
        SavefhirResource(temp.resource,bundleId,obj.Code);
        bundle.entry.push(temp)
      }
   }  

   //logger.info(&apos;FunctionalStatusBundle-&gt;&apos;+JSON.stringify(bundle)) 
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>ae30683e-1323-42ed-83a9-19a52f2d6404</id>
            <name>GetCoding</name>
            <revision>18</revision>
            <lastModified>
              <time>1668444199999</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetCoding(arg1)
{
	//logger.info(&apos;GetCoding-&gt;&apos;+JSON.stringify(arg1));
    	importPackage(org.hl7.fhir.r4.model);

    var coding=new Coding();

    if(arg1.CodeSystem!=&apos;&apos;)
    {
    		if(arg1.CodeSystem.split(&quot;.&quot;).length - 1&gt;2)
    		{
    			coding.setSystem(&quot;urn:oid:&quot;+arg1.CodeSystem);		
    		}
    		else
    		{
    			coding.setSystem(arg1.CodeSystem);		
    		}
      
    }

    if(arg1.Code!=&apos;&apos;)
    {
      coding.setCode(arg1.Code);
    }

   	if(arg1.DisplayName!=&apos;&apos;)
	{
	    coding.setDisplay(arg1.DisplayName);
	}
	else if(arg1.hasOwnProperty(&apos;OriginalText&apos;))
	{
	    if(arg1.OriginalText.hasOwnProperty(&apos;Text&apos;))
	    {
	        if(arg1.OriginalText.Text!=&apos;&apos;)
	        {
	            coding.setDisplay(arg1.OriginalText.Text.trim());
	        }
	    }
	
	}

    return coding;
             
}  </code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>ea0cd7de-ee71-42ab-b414-2ceb8c9a2826</id>
            <name>GetCodingList</name>
            <revision>13</revision>
            <lastModified>
              <time>1667841787378</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
function GetCodingList(arg1)
{
    //logger.info(&apos;GetCodingList-&gt;&apos;+JSON.stringify(arg1))
    importPackage(org.hl7.fhir.r4.model);
	arg1=GetMergedCodeList(arg1);
	//logger.info(&apos;GetCodingList-&gt;&apos;+JSON.stringify(arg1))
    var result=[];

    for(var _c=0;_c&lt;arg1.length&gt;0;_c++)
    {
        var temp=arg1[_c];

        var coding=new Coding();
        if(temp.CodeSystem!=&apos;&apos;)
        {
            if(temp.CodeSystem.split(&quot;.&quot;).length - 1&gt;2)
            {
                coding.setSystem(&quot;urn:oid:&quot;+temp.CodeSystem);       
            }
            else
            {
                coding.setSystem(temp.CodeSystem);      
            }
        }

        if(temp.Code!=&apos;&apos;)
        {
          coding.setCode(temp.Code);
        }

        if(temp.DisplayName!=&apos;&apos;)
        {
            
            coding.setDisplay(temp.DisplayName);
        }
        else if(temp.hasOwnProperty(&apos;OriginalText&apos;))
        {
            if(temp.OriginalText.Text!=&apos;&apos;)
            {
                coding.setDisplay(temp.OriginalText.Text);
            }
        }

        result.push(coding)
    }
    

    
    return result;
             
}  </code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>8e6365bf-e95e-41d3-930a-9d759b248966</id>
            <name>GetMergedCodeList</name>
            <revision>19</revision>
            <lastModified>
              <time>1667836482114</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetMergedCodeList(arg1)
{
	var log=0;
   var obj=[];
   var referencetext=&apos;&apos;;
   if(log==1)
   {
   	logger.info(&apos;GetMergedCodeList in-&gt;&apos;+JSON.stringify(arg1));
   }

   if(arg1.hasOwnProperty(&apos;Code&apos;) &amp;&amp; arg1.hasOwnProperty(&apos;DisplayName&apos;))
   {
   		if(arg1.hasOwnProperty(&apos;OriginalText&apos;))
		{
			if(arg1.OriginalText.hasOwnProperty(&apos;Reference&apos;))
			{
				if(arg1.OriginalText.Reference.hasOwnProperty(&apos;TEL_URL&apos;))
				{
					if(arg1.OriginalText.Reference.TEL_URL.Value!=&apos;&apos;)
					{
						referencetext=arg1.OriginalText.Reference.TEL_URL.Value
						 if(log==1)
   						{	
							logger.info(&apos;GetMergedCodeList:referencetext-&gt;&apos;+	referencetext)
   						}
					}
				}
			}
		}
    
    	if(arg1.Code!=&apos;&apos; || arg1.DisplayName!=&apos;&apos; || referencetext!=&apos;&apos;)
    	{
    		var res={};
    		
        	res.Code=arg1.Code;
        	res.CodeSystem=arg1.CodeSystem;
        	res.CodeSystemName=arg1.CodeSystemName;
        	res.DisplayName=arg1.DisplayName;
        	if(log==1)
   		{
        		logger.info(&apos;GetMergedCodeList DisplayName-&gt;&apos;+res.DisplayName);
        		logger.info(&apos;GetMergedCodeList referencetext-&gt;&apos;+referencetext);
   		}

		if(referencetext!=&apos;&apos; &amp;&amp; res.DisplayName==&apos;&apos;)
		{
			res.DisplayName=referencetext;
		}
		
		if(log==1)
   		{
            logger.info(&apos;GetMergedCodeList main-&gt;&apos;+JSON.stringify(res));
   		}
          obj.push(res);

        }
        
   	}

   if(arg1.hasOwnProperty(&apos;Translations&apos;))
   {
        for(var _t=0;_t&lt;arg1.Translations.length;_t++)
        {
            var res={};

            res.Code=arg1.Translations[_t].Code;
            res.CodeSystem=arg1.Translations[_t].CodeSystem;
            res.CodeSystemName=arg1.Translations[_t].CodeSystemName;
            res.DisplayName=arg1.Translations[_t].DisplayName!=&apos;&apos;?arg1.Translations[_t].DisplayName:arg1.Translations[_t].OriginalText.Text;
            if(log==1)
   		  {
            	logger.info(&apos;GetMergedCodeList Translations-&gt;&apos;+JSON.stringify(res));
   		  }
            obj.push(res)
        }
   }

    if(log==1)
   {
	logger.info(&apos;GetMergedCodeList out-&gt;&apos;+JSON.stringify(obj));
   }
   return obj;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>212dd230-1a0e-4820-93f6-236ffd9e59d5</id>
            <name>GetNarrative</name>
            <revision>6</revision>
            <lastModified>
              <time>1668243065730</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetNarrative(arg1) {
	// TODO: Enter code here
	importPackage(org.hl7.fhir.r4.model);
	var narrative=new Narrative();
	narrative.setStatus(Narrative.NarrativeStatus.GENERATED);
	narrative.setDivAsString(String(arg1)); 
	//return narrative;
	return null;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>4ae44f57-065a-40e6-9f60-eac670162cc8</id>
            <name>GetPatientResource_hapi</name>
            <revision>69</revision>
            <lastModified>
              <time>1668945251757</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetPatientResource_hapi(_recordTargets,bundleId) 
{
    importPackage(org.hl7.fhir.r4.model);
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();
    channelMap.put(&apos;_recordTargets&apos;, JSON.stringify(_recordTargets));
    if (_recordTargets != null) 
    {
        var _recordTargetsSize = _recordTargets.length;
        var _count = 0;
        if (_recordTargetsSize &gt; 0) 
        {
            //initializing Patient resource
            var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();

            var patient = new org.hl7.fhir.r4.model.Patient();

            
            for (; _count &lt; _recordTargetsSize; _count++) 
            {

                //initializing Patient identifier
                var _patientIds = _recordTargets[_count].PatientRole.Ids;
                if (_patientIds != null) 
                {
                    var _patientIdsSize = _patientIds.length;
                    var _i = 0;
                    
                    for (; _i &lt; _patientIdsSize; _i++) 
                    {
                        patient.addIdentifier().setSystem(&quot;urn:oid:&quot;+_patientIds[_i].Root).setValue(_patientIds[_i].Extension);

                    }

                     //Name structure
                    var _patientnamedetails = _recordTargets[_count].PatientRole.Patient.Names;
                    if (_patientnamedetails != null) 
                    {
                        var _patientnamedetailsSize = _patientnamedetails.length;
                        var _l = 0;
                        if (_patientnamedetailsSize &gt; 0) 
                        {
                        
                            for (; _l &lt; _patientnamedetailsSize; _l++) 
                            {
                                var pname=patient.addName();
                                pname.setFamily(_patientnamedetails[_l].Families[0].ENXP_ST)
                                pname.addGiven(_patientnamedetails[_l].Givens[0].ENXP_ST)
                                
                                if(_patientnamedetails[_l].Givens[1] != null &amp;&amp; _patientnamedetails[_l].Givens[1] != undefined) 
                                {
                                    pname.addGiven(_patientnamedetails[_l].Givens[1].ENXP_ST);
                                }

                                if(_patientnamedetails[_l].EntityNameUses[0].Name!=&apos;&apos;)
                                {
                                    pname.setUse(HumanName.NameUse.valueOf(MapEntityNameUse(_patientnamedetails[_l].EntityNameUses[0].Name)));  
                                }
                            }
                        }
                    }
                }

                //Telecom

                var _patientcontacts = _recordTargets[_count].PatientRole.Telecoms;
                if (_patientcontacts != null) 
                {
                    var _patientcontactsSize = _patientcontacts.length;
                    var _k = 0;
                    if (_patientcontactsSize &gt; 0) 
                    {
                        
                        for (; _k &lt; _patientcontactsSize; _k++) 
                        {

                                    var pcontact=patient.addTelecom()
                                    if(_patientcontacts[_k].TEL_URL.Value!=&apos;&apos;)
                                    {
                                        pcontact.setValue(_patientcontacts[_k].TEL_URL.Value)
                                    }
                                if(_patientcontacts[_k].TelecomAddress[0].Name!=&apos;&apos;)
                                {
                                        pcontact.setSystem(ContactPoint.ContactPointSystem.valueOf(MapTelecomSystem(_patientcontacts[_k].TelecomAddress[0].Name)));
                                }
                                if(_patientcontacts[_k].TelecomAddress[0].Name!=&apos;&apos;)
                                {
                                        pcontact.setUse(ContactPoint.ContactPointUse.valueOf(MapTelecomUse(_patientcontacts[_k].TelecomAddress[0].Name)));
                                }
                           
                            

                        }
                    }
                }

                var gender=GetMergedCodeList(_recordTargets[_count].PatientRole.Patient.AdministrativeGenderCode);
                if(gender.length&gt;0)
                {
                    //logger.info(&apos;PatientResource-&gt;&apos;+gender[0].Code)
                    patient.setGender(Enumerations.AdministrativeGender.valueOf(MapGender(gender[0].Code))) 
                }



                if(_recordTargets[_count].PatientRole.Patient.BirthTime.Value!=&apos;&apos;)
                {
                    patient.setBirthDate(new Date(parseCCDBirthDate(_recordTargets[_count].PatientRole.Patient.BirthTime.Value)));  
                }

                
                
    
                
                patient.setAddress(AddAddressNode(_recordTargets[_count].PatientRole.Address))

                var maritalstatus=GetMergedCodeList(_recordTargets[_count].PatientRole.Patient.MaritalStatusCode);

                //marital
                if (maritalstatus.length&gt;0) 
                {
                    
                    var maritalcoding=new Coding();

                    if(maritalstatus[0].CodeSystem!=&apos;&apos;)
                    {
                        maritalcoding.setSystem(&quot;urn:oid:&quot;+maritalstatus[0].CodeSystem) 
                    }

                    if(maritalstatus[0].Code!=&apos;&apos;)
                    {
                        maritalcoding.setCode(maritalstatus[0].Code)    
                    }

                    if(maritalstatus[0].DisplayName!=&apos;&apos;)
                    {
                        maritalcoding.setDisplay(maritalstatus[0].DisplayName)  
                    }
                    

                    patient.setMaritalStatus(CodeableConcept(maritalcoding))
                    
                }


                //ethnicity
                if (_recordTargets[_count].PatientRole.Patient.EthnicGroupCode.DisplayName != &apos;&apos; || _recordTargets[_count].PatientRole.Patient.EthnicGroupCode.Code != &apos;&apos;) 
                {

                    var ethnicity = patient.addExtension();
                    ethnicity.setUrl(&apos;http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity&apos;);


                    var ombCoding = new Coding();

                    ombCoding.setSystem(&quot;urn:oid:&quot;+_recordTargets[_count].PatientRole.Patient.EthnicGroupCode.CodeSystem);
                    ombCoding.setCode(_recordTargets[_count].PatientRole.Patient.EthnicGroupCode.Code);
                    ombCoding.setDisplay(_recordTargets[_count].PatientRole.Patient.EthnicGroupCode.DisplayName);

                     // Add category to ethnicity extension
                    var ombCategory = ethnicity.addExtension();

                    ombCategory.setUrl(&quot;ombCategory&quot;);
                    ombCategory.setValue(ombCoding);


                    // Add text display to ethnicity extension
                    var ethnicityText = ethnicity.addExtension();
                    ethnicityText.setUrl(&quot;text&quot;);
                    ethnicityText.setValue(new StringType(_recordTargets[_count].PatientRole.Patient.EthnicGroupCode.DisplayName));

 

                }
                
                
                //religion
                var religiousaffiliation=GetMergedCodeList(_recordTargets[_count].PatientRole.Patient.ReligiousAffiliationCode);
                if (religiousaffiliation.length&gt;0) 
                {
                    var religion = patient.addExtension();
                    religion.setUrl(&apos;http://hl7.org/fhir/StructureDefinition/patient-religion&apos;);


                    //Assign Coding
                    var religioncoding = new Coding();
                    religioncoding.setSystem(&quot;urn:oid:&quot;+religiousaffiliation[0].CodeSystem);
                    religioncoding.setCode(religiousaffiliation[0].Code);
                    religioncoding.setDisplay(religiousaffiliation[0].DisplayName);

                    //Assign Codeable COncept
                    religion.setValue(new CodeableConcept(religioncoding));

                    
                }
                

                var racelist=GetMergedCodeList(_recordTargets[_count].PatientRole.Patient.RaceCode);
                //race
                if (racelist.length&gt;0) 
                {
                    
                    var race = patient.addExtension();
                    race.setUrl(&apos;http://hl7.org/fhir/us/core/StructureDefinition/us-core-race&apos;);


                    var ombCoding = new Coding();

                    ombCoding.setSystem(&quot;urn:oid:&quot;+racelist[0].CodeSystem);
                    ombCoding.setCode(racelist[0].Code);
                    ombCoding.setDisplay(racelist[0].DisplayName);

                     // Add category to ethnicity extension
                    var ombCategory = race.addExtension();

                    ombCategory.setUrl(&quot;ombCategory&quot;);
                    ombCategory.setValue(ombCoding);


                    // Add text display to ethnicity extension
                    var raceText = race.addExtension();
                    raceText.setUrl(&quot;text&quot;);
                    raceText.setValue(new StringType(racelist[0].DisplayName));

                    

                }


                var temporg=OrganizationResource(_recordTargets[_count].PatientRole.Organization);
                 if(temporg!=undefined &amp;&amp; temporg!=null)
                 {
                    patient.setManagingOrganization(new Reference().setReference(&apos;#&apos;+new Resource(temporg.getId())));
                    patient.addContained(temporg);  
                 }
                 

                var _patientLanguageCommunications = _recordTargets[_count].PatientRole.Patient.LanguageCommunications;
                if (_patientLanguageCommunications != null) 
                {
                    var _patientLanguageCommunicationsSize = _patientLanguageCommunications.length;
                    var _i = 0;
                    if (_patientLanguageCommunicationsSize &gt; 0) 
                    {
                        for (; _i &lt; _patientLanguageCommunicationsSize; _i++)
                        {
                            var patientlanguage=new Coding();

                            var olanguage=Maplanguage(_patientLanguageCommunications[_i].LanguageCode);

                            if(olanguage.code!=&apos;&apos;)
                            {
                                patientlanguage.setCode(olanguage.code);
                            }

                            if(olanguage.display!=&apos;&apos;)
                            {
                                patientlanguage.setDisplay(olanguage.display);
                            }

                            if(olanguage.system!=&apos;&apos;)
                            {
                                patientlanguage.setSystem(olanguage.system);
                            }
                            
                            var languagecomponent= new org.hl7.fhir.r4.model.Patient.PatientCommunicationComponent();
                            languagecomponent.setLanguage(CodeableConcept(patientlanguage));
                            
                        if(_patientLanguageCommunications[_i].hasOwnProperty(&apos;PreferenceInd&apos;))
                        {
                            if(_patientLanguageCommunications[_i].PreferenceInd.Value!=&apos;&apos;)
                                 {
                                    languagecomponent.setPreferredElement(new BooleanType(_patientLanguageCommunications[_i].PreferenceInd.Value)); 
                                 }  
                        }
                            
                            
                            patient.addCommunication(languagecomponent)


                        }
                    }
                }


     

                var _patientGuardians = _recordTargets[_count].PatientRole.Patient.Guardians;
                if (_patientGuardians != null) 
                {
                    var _patientGuardiansSize = _patientGuardians.length;
                    channelMap.put(&apos;_patientGuardiansSize&apos;, _patientGuardiansSize);
                    var _i = 0;
                    if (_patientGuardiansSize &gt; 0 &amp;&amp; _patientGuardians[_i].Person.Names[0].Givens[0].ENXP_ST!=&apos;&apos;) 
                    {
                        var patientcontact=patient.addContact();
                        var _c=0;
                        for (; _c &lt; _patientGuardiansSize; _c++) 
                        {
                            
                            

                            if (_patientGuardians[_i].Code.DisplayName != &apos;&apos; &amp;&amp; _patientGuardians[_i].Code.Code != &apos;&apos;) 
                            {
                                patientcontact.addRelationship().addCoding().setCode(_patientGuardians[_i].Code.Code).setDisplay(_patientGuardians[_i].Code.DisplayName).setSystem(_patientGuardians[_i].Code.CodeSystemName)
                            }

                            if (_patientGuardians[_i].Person.Names.length &gt; 0) 
                            {

                                if(_patientGuardians[_i].Person.Names[0].Givens.length&gt;1)
                                {
                                    patientcontact.setName(new HumanName().setFamily(_patientGuardians[_i].Person.Names[0].Families[0].ENXP_ST).addGiven(_patientGuardians[_i].Person.Names[0].Givens[0].ENXP_ST).addGiven(_patientGuardians[_i].Person.Names[0].Givens[1].ENXP_ST));    
                                }
                                else
                                {
                                    patientcontact.setName(new HumanName().setFamily(_patientGuardians[_i].Person.Names[0].Families[0].ENXP_ST).addGiven(_patientGuardians[_i].Person.Names[0].Givens[0].ENXP_ST));    
                                }

                            }

                            if (_patientGuardians[_i].Telecoms.length &gt; 0) 
                            {
                                for (var _t = 0; _t &lt; _patientGuardians[_i].Telecoms.length; _t++) 
                                {
                                    var ptelecom=patientcontact.addTelecom()
                                    ptelecom.setValue(_patientGuardians[_i].Telecoms[_t].TEL_URL.Value)
                                    if(_patientGuardians[_i].Telecoms[_t].TelecomAddress[0].Name!=&apos;&apos;)
                                    {
                                        ptelecom.setSystem(ContactPoint.ContactPointSystem.valueOf(MapTelecomSystem(_patientGuardians[_i].Telecoms[_t].TelecomAddress[0].Name)));
                                        ptelecom.setUse(ContactPoint.ContactPointUse.valueOf(MapTelecomUse(_patientGuardians[_i].Telecoms[_t].TelecomAddress[0].Name)));
                                    }

                                }

                            }

                            if (_patientGuardians[_i].Address.length &gt; 0) 
                            {

                                var pcontactaddress=new Address();

                                

                                if(_patientGuardians[_i].Address[0].UsablePeriods[0].Value!=&apos;&apos;)
                                {
                                    pcontactaddress.setUse(Address.AddressUse.valueOf(MapAddressUse(_patientGuardians[_i].Address[0].PostalAddress[0].Value)))
                                }
                                
                                if(_patientGuardians[_i].Address[0].StreetAddressLines[0].ADXP_ST!=&apos;&apos;)
                                {
                                    pcontactaddress.addLine(_patientGuardians[_i].Address[0].StreetAddressLines[0].ADXP_ST);
                                }

                                if(_patientGuardians[_i].Address[0].Cities[0].ADXP_ST!=&apos;&apos;)
                                {
                                    pcontactaddress.setCity(_patientGuardians[_i].Address[0].Cities[0].ADXP_ST)
                                }

                                if(_patientGuardians[_i].Address[0].States[0].ADXP_ST!=&apos;&apos;)
                                {
                                    pcontactaddress.setState(_patientGuardians[_i].Address[0].States[0].ADXP_ST);
                                }
                                
                                if(_patientGuardians[_i].Address[0].Countries[0].ADXP_ST!=&apos;&apos;)
                                {
                                    pcontactaddress.setPostalCode(_patientGuardians[_i].Address[0].Countries[0].ADXP_ST);
                                }

                                if(_patientGuardians[_i].Address[0].Countries[0].ADXP_ST!=&apos;&apos;)
                                {
                                    pcontactaddress.setCountry(_patientGuardians[_i].Address[0].Countries[0].ADXP_ST);
                                }
                                
                                
                                patientcontact.setAddress(pcontactaddress);
                            }
                        }
                    }
                }
            }


        }
        patient.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(patient))));
        var oPatient=JSON.parse(parser.encodeResourceToString(patient));
        //logger.info(patient.getId())
        channelMap.put(&apos;patientid&apos;,&apos;Patient/&apos;+patient.getId());

        SavefhirResource(patient,bundleId,null);
        
    }
    return oPatient;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>e207ba31-5c06-4972-b4e3-ad33a1ffbf29</id>
            <name>GetQuantity</name>
            <revision>2</revision>
            <lastModified>
              <time>1667233481631</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
function GetQuantity(arg1)
{
    importPackage(org.hl7.fhir.r4.model);
    
    var qty=new Quantity()
    if(arg1.hasOwnProperty(&apos;PQ&apos;))
    {
    		if(arg1.PQ.Value!=&apos;&apos;)
	    {
	        qty.setValue(arg1.PQ.Value);
	    }
	
	    if(arg1.PQ.Value!=&apos;&apos;)
	    {
	        qty.setUnit(arg1.PQ.Unit);
	    }	
    }
    else
    {
    		if(arg1.Value!=&apos;&apos;)
	    {
	        qty.setValue(arg1.Value);
	    }
	
	    if(arg1.Value!=&apos;&apos;)
	    {
	        qty.setUnit(arg1.Unit);
	    }
    }
    
         
    return qty
             
}  </code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>e734e320-3e08-476d-b441-7fdf07f17d8b</id>
            <name>GetResourcefromDb</name>
            <revision>3</revision>
            <lastModified>
              <time>1668098719768</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetResourcefromDb(_fhirresourcedataid)
{
   var _dbConn;

   try 
   {
      _dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.cj.jdbc.Driver&apos;,&apos;jdbc:mysql://localhost:3306/genzeon&apos;,&apos;root&apos;,&apos;test&apos;);

      var sql=&quot;select resourceType,ResourceData,resourceId from fhirresourcedata where fhirresourcedataid=&apos;&quot;+_fhirresourcedataid+&quot;&apos;&quot;;
      _result = _dbConn.executeCachedQuery(sql);

      var _oResult={};
      while(_result.next())
      {
         _oResult.resourceType=_result.getString(&quot;resourceType&quot;);
         _oResult.ResourceData=_result.getString(&quot;ResourceData&quot;);
         _oResult.resourceId=_result.getString(&quot;resourceId&quot;);
      } 
      
      return _oResult;
   } 
   finally 
   {
      if (_dbConn) 
      { 
         _dbConn.close();
      }
   }

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>c36adfb3-f706-427f-89b9-c20de3391925</id>
            <name>GetSystem</name>
            <revision>2</revision>
            <lastModified>
              <time>1666607287703</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetSystem(arg1) {
	// TODO: Enter code here
	if(arg1!=&apos;&apos;)
    {
    	if(arg1.split(&quot;.&quot;).length - 1&gt;2)
    	{
    		var value=&quot;urn:oid:&quot;+arg1;		
    	}
    	else
    	{
    		var value=arg1;		
    	}
      
    }
     return value
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>6b6fcf23-2f72-42b3-825c-8ef2f100aa64</id>
            <name>GetValueNode</name>
            <revision>4</revision>
            <lastModified>
              <time>1667119362522</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function GetValueNode(arg1)
{
   importPackage(org.hl7.fhir.r4.model);
   
   //logger.info(&apos;GetValueNode-&gt;&apos;+JSON.stringify(arg1));

   if(arg1!=undefined &amp;&amp; arg1!=null)
   {
      //logger.info(&apos;GetValueNode-&gt;CD&apos;+JSON.stringify(GetCodingList(arg1.CD)));
      if(GetCodingList(arg1.CD).length&gt;0)
      {
         return new CodeableConcept().setCoding(GetCodingList(arg1.CD));
      }
      else if(GetCodingList(arg1.CE).length&gt;0)
      {
         return new CodeableConcept().setCoding(GetCodingList(arg1.CE));
      }
      else if(arg1.PQ.Value!=&apos;&apos;)
      {
         return GetQuantity(arg1.PQ);
      }
      else if(arg1.IVL_PQ.Low.PQ.Value!=&apos;&apos; &amp;&amp; arg1.IVL_PQ.High.PQ.Value!=&apos;&apos;)
      {
         var valuerange=new Range();
         valuerange.setLow(GetQuantity(arg1.IVL_PQ.Low.PQ));
         valuerange.setHigh(GetQuantity(arg1.IVL_PQ.High.PQ));
         return valuerange;

      }
      else if(arg1.IVL_PQ.Low.PQ.Value!=&apos;&apos;)
      {
         return GetQuantity(arg1.IVL_PQ.Low.PQ);
      }
      else if(arg1.IVL_PQ.High.PQ.Value!=&apos;&apos;)
      {
         return GetQuantity(arg1.IVL_PQ.High.PQ);
      }
      else if(arg1.IVL_PQ.SXCM_PQ.PQ.Value!=&apos;&apos;)
      {
         return GetQuantity(arg1.IVL_PQ.SXCM_PQ.PQ);
      }
      else if(arg1.REAL.Value!=&apos;&apos;)
      {
         return new StringType(arg1.REAL.Value);
      }
      else if(arg1.hasOwnProperty(&apos;ST&apos;))
      {
         if(arg1.hasOwnProperty(&apos;Value&apos;))
         {
            if(arg1.ST.Value!=&apos;&apos;)
            {
               return new StringType(arg1.ST.Value);
            }
         }
         else
         {
            if(arg1.ST!=&apos;&apos;)
            {
               return new StringType(arg1.ST);
            }
         }
         
      }
   }
   
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>02801c95-edca-4aa1-a7ab-cc14ad7cb707</id>
            <name>ImmunizationBundle</name>
            <revision>7</revision>
            <lastModified>
              <time>1669212311186</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function ImmunizationBundle(arg1,text,patientid,bundleId) 
{
   
    
   var obj=JSON.parse(arg1);
   
   if(obj.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=obj.Entries.length;
       bundle.entry=[];
   }
   

   //looping through entries
   for(var _a=0;_a&lt;obj.Entries.length;_a++)
   {
        var temp={};
        temp.resource=ImmunizationResource(obj.Entries[_a].SubstanceAdministration,text,patientid);

        SavefhirResource(temp.resource,bundleId,obj.Code);
      
   }  

   //logger.info(&apos;Immunization Bundle-&gt;&apos;+JSON.stringify(bundle)) 
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>160024f7-3c07-446b-b49e-c682becff8ca</id>
            <name>ImmunizationResource</name>
            <revision>13</revision>
            <lastModified>
              <time>1668945458223</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
function ImmunizationResource(arg1,txt,patientid)
{
    importPackage(org.hl7.fhir.r4.model);
    var immunization = new org.hl7.fhir.r4.model.Immunization();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  

    for(var _id=0;_id&lt;arg1.Ids.length;_id++)
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            immunization.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }  
    }

    if(txt!=&apos;&apos; &amp;&amp; GetNarrative(txt)!=null)
    {
        immunization.setText(GetNarrative(txt))
    }

    immunization.setStatus(Immunization.ImmunizationStatus.valueOf(MapImmunizationStatus(arg1.StatusCode.Code,arg1.NegationIndicator)))
    immunization.setVaccineCode(new CodeableConcept().setCoding(GetCodingList(arg1.Consumable.ManufacturedProduct.Material.Code)))
    immunization.setPatient(new Reference().setReference(patientid));  

    var tempdate=GetEffectiveTimeInfo(arg1);
    immunization.setOccurrence(new DateTimeType(formatdate(tempdate.startdatetime)))
    
    if(arg1.Authors[0].Time.Value!=&apos;&apos;)
    {
        immunization.setRecordedElement(new DateTimeType(formatdate(arg1.Authors[0].Time.Value)))
    }

    var tempmanufacturer=OrganizationResource(arg1.Consumable.ManufacturedProduct.Organization);
    if(tempmanufacturer!=undefined)
    {
        immunization.addContained(tempmanufacturer);
        immunization.setManufacturer(new Reference(&apos;#&apos;+new Resource(tempmanufacturer.getId())));    
    }
    

    if(arg1.Consumable.ManufacturedProduct.Material.LotNumberText!=&apos;&apos;)
    {
        immunization.setLotNumber(arg1.Consumable.ManufacturedProduct.Material.LotNumberText);    
    }
    
    if(arg1.ApproachSiteCodes!=null)
    {
        immunization.setSite(new CodeableConcept().setCoding(GetCodingList(arg1.ApproachSiteCodes)))    
    }

    if(arg1.RouteCode!=null)
    {
        immunization.setRoute(new CodeableConcept().setCoding(GetCodingList(arg1.RouteCode)))    
    }

    if(arg1.DoseQuantity.SXCM_PQ.PQ.Value!=&apos;&apos;)
    {
        immunization.setDoseQuantity(GetQuantity(arg1.DoseQuantity.SXCM_PQ))
    }
    
    if(arg1.Performers.length&gt;0)
    {
        if(arg1.Performers[0].TypeCode.Name==&apos;PRF&apos;)
        {
            var performer=new org.hl7.fhir.r4.model.Immunization.ImmunizationPerformerComponent();
        
            var tempactor=AuthortoPractictionerRole(arg1.Performers[0].AssignedEntity);
            if(tempactor!= undefined)
            {
                immunization.addContained(tempactor);    
                performer.setActor(new Reference().setReference(&apos;#&apos;+new Resource(tempactor.getId())));
            }

            var tempactorperson=AuthortoPractictioner(arg1.Performers[0].AssignedEntity);
            if(tempactorperson!= undefined)
            {
                immunization.addContained(tempactorperson);
            }

            var tempactororg=AuthortoOrganization(arg1.Performers[0].AssignedEntity.Organizations[0]);
                
            if(tempactororg!= undefined)
            {
                immunization.addContained(tempactororg);
            }

            immunization.addPerformer(performer);
        }
    }

    if(arg1.MoodCode.Name==&apos;EVN&apos;)
    {
        if(arg1.RepeatNumber.Value.Value!=&apos;&apos;)
        {
            var dose=new org.hl7.fhir.r4.model.Immunization.ImmunizationProtocolAppliedComponent();
            dose.setDoseNumber(new StringType(arg1.RepeatNumber.Value.Value))
            immunization.addProtocolApplied(dose)
        }
    }
    else if(arg1.MoodCode.Name==&apos;INT&apos;)
    {
        if(arg1.RepeatNumber.Value.Value!=&apos;&apos;)
        {
            var series=new org.hl7.fhir.r4.model.Immunization.ImmunizationProtocolAppliedComponent();
            series.setSeriesDoses(new StringType(arg1.RepeatNumber.Value.Value))
            immunization.addProtocolApplied(series)
        }
    }


    for(var _i=0;_i&lt;arg1.EntryRelationships.length;_i++)
    {
        var er1=arg1.EntryRelationships[_i];
        if(er1.hasOwnProperty(&apos;Observation&apos;))
        {
            if(er1.TypeCode.Name==&apos;RSON&apos; &amp;&amp; er1.Observation.TemplateIds==&apos;2.16.840.1.113883.10.20.22.4.19&apos;)
            {
                immunization.addReasonCode(new CodeableConcept().setCoding(GetCodingList(er1.Observation.Values[0].CD)));
            }

            if(er1.TypeCode.Name==&apos;RSON&apos; &amp;&amp; er1.Observation.TemplateIds==&apos;2.16.840.1.113883.10.20.22.4.53&apos;)
            {
                immunization.setStatusReason(new CodeableConcept().setCoding(GetCodingList(er1.Observation.Code)));
            }

            if(er1.TypeCode.Name==&apos;CAUS&apos;)
            {
                var reaction=new org.hl7.fhir.r4.model.Immunization.ImmunizationReactionComponent();
                var tempreaction=ObservationResource(er1.Observation);
                if(tempreaction!=undefined)
                {
                    reaction.setDetail(new Reference().setReference(&apos;#&apos;+new Resource(tempreaction.getId())))
                    immunization.addContained(tempreaction);
                    immunization.addReaction(reaction)    
                }
                
            }
        }

        if(er1.hasOwnProperty(&apos;Act&apos;))
        {
            if(er1.Act.Text.Text!=&apos;&apos;)
            {
                immunization.addNote(new Annotation().setText(er1.Act.Text.Text.trim()))
            }
            else if(er1.Act.Text.hasOwnProperty(&apos;Reference&apos;))
            {
                if(er1.Act.Text.Reference.TEL_URL.Value!=&apos;&apos;)
                {
                    immunization.addNote(new Annotation().setText(er1.Act.Text.Reference.TEL_URL.Value.trim()))
                }
            }
        }
    }

    immunization.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(immunization))));
  //  var oImmunization=JSON.parse(parser.encodeResourceToString(immunization));
//    logger.info(&apos;ImmunizationResource-&gt;&apos;+parser.encodeResourceToString(immunization));

    return immunization;
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>94f1dc3a-4690-4479-9615-e0dad5571862</id>
            <name>LocationResource</name>
            <revision>8</revision>
            <lastModified>
              <time>1668247059944</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function LocationResource(arg1)
{
   //Takes Participant.ParticipantRole Node as argument
   importPackage(org.hl7.fhir.r4.model);
   var location = new org.hl7.fhir.r4.model.Location();
   var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
   var parser = ctx.newJsonParser();  

   for(var _id=0;_id&lt;arg1.Ids.length;_id++)
   {
      if(arg1.Ids[_id].Extension!=&apos;&apos;)
      {
         location.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
      }
   }
      
   if(arg1.PlayingEntity.Names[0].Text!=&apos;&apos;)
   {
      location.setName(arg1.PlayingEntity.Names[0].Text.trim())
   }

   var address=AddAddressNode(arg1.Addrs)
   if(address.length&gt;0)
   {
      location.setAddress(address[0]);   
   }
   
   location.setTelecom(AddTelecomNode(arg1.Telecoms));

   location.addType(new CodeableConcept().setCoding(GetCodingList(arg1.Code)))

   location.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(location))));
   

   
   if(countkey(parser.encodeResourceToString(location))&gt;2)
   {
      
      return location
   }
        
   
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>401bbcac-caaa-43e6-92b8-a8c1ffb50e38</id>
            <name>MapAddressUse</name>
            <revision>7</revision>
            <lastModified>
              <time>1669221619984</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function MapAddressUse(arg1)
{
    switch(String(arg1)) 
    {
        case &quot;BAD&quot;:
            return &apos;OLD&apos;
            break;
        case &quot;DIR&quot;:
            
            return &apos;HOME&apos;
            break;
        case &quot;H&quot;:
            return &apos;HOME&apos;
            break;
        case &quot;HP&quot;:
            return &apos;HOME&apos;
            break;
        case &quot;HV&quot;:
            return &apos;HOME&apos;
            break;
        case &quot;PHYS&quot;:
            return &apos;HOME&apos;
            break;
        case &quot;PST&quot;:
            return &apos;HOME&apos;
            break;
        case &quot;PST&quot;:
            return &apos;TEMP&apos;
            break;
        case &quot;TMP&quot;:
            return &apos;TEMP&apos;
            break;
        case &quot;WP&quot;:
            return &apos;WORK&apos;
            break;
         default:
         	  return &apos;NULL&apos;
       
    }

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>a9ce05ca-b47e-4d1e-9bfe-bf79cf66354d</id>
            <name>MapAllergyClinicalStatus</name>
            <revision>2</revision>
            <lastModified>
              <time>1666678310184</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function MapAllergyClinicalStatus(str)
{
    var obj={};

    if(str.Code=&apos;413322009&apos;)
    {
        obj.Code=&apos;resolved&apos;;
        obj.CodeSystem=&apos;2.16.840.1.113883.4.642.3.1372&apos;;
        obj.DisplayName=&apos;Resolved&apos;
    }
    else if(str.Code=&apos;73425007&apos;)
    {
        obj.Code=&apos;inactive&apos;;
        obj.CodeSystem=&apos;2.16.840.1.113883.4.642.3.1372&apos;;
        obj.DisplayName=&apos;Inactive&apos;
    }
    else
    {
        obj.Code=&apos;active&apos;;
        obj.CodeSystem=&apos;2.16.840.1.113883.4.642.3.1372&apos;;
        obj.DisplayName=&apos;Active&apos;
    }

    return obj;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>e248439c-a54d-43f6-b394-ceec78112acb</id>
            <name>MapAllergyCriticality</name>
            <revision>1</revision>
            <lastModified>
              <time>1666537357592</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function MapAllergyCriticality(str)
{
    var Code;

    if(str.Code==&apos;CRITH&apos; || str.Code==&apos;High&apos;)
    {
        Code=&apos;HIGH&apos;
    }
    else if(str.Code==&apos;CRITL&apos; || str.Code==&apos;CRITL&apos;)
    {
       Code=&apos;LOW&apos;
    }
    else if(str.Code==&apos;CRITU&apos; || str.Code==&apos;CRITU&apos;)
    {
       Code=&apos;UNABLETOASSESS&apos;
    }
    else
    {
        Code=&apos;NULL&apos;
    }

    return Code;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>75ced236-950b-4d92-9e7d-1619f019d654</id>
            <name>MapAllergySeverity</name>
            <revision>12</revision>
            <lastModified>
              <time>1669218363650</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
function MapAllergySeverity(str)
{
    var Code;
    //logger.info(&apos;MapAllergySeverity&apos;+JSON.stringify(str))

    if(str.Code==&apos;24484000&apos; || str.Code==&apos;SV&apos;)
    {
        Code=&apos;SEVERE&apos;
    }
    else if(str.Code==&apos;255604002&apos; || str.Code==&apos;MI&apos;)
    {
       Code=&apos;MILD&apos;
    }
    else if(str.Code==&apos;6736007&apos; || str.Code==&apos;MO&apos;)
    {
       Code=&apos;MODERATE&apos;
    }
    else if(str.Code==&apos;371924009&apos;)
    {
       Code=&apos;MODERATE&apos;
    }
    else
    {
        Code=&apos;NULL&apos;
    }

    return Code;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>c2bea5f1-287b-4899-836b-7647e07f6d95</id>
            <name>MapAllergyType</name>
            <revision>1</revision>
            <lastModified>
              <time>1666532412469</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function MapAllergyType(str)
{
    
    var test;
    switch (String(str))
    {
        case &quot;419199007&quot;:
            test=&apos;ALLERGY&apos;
            break;
        case &quot;416098002&quot;:
            test=&apos;ALLERGY&apos;
            break;
        case &quot;59037007&quot;:
            test=&apos;INTOLERANCE&apos;;
            break;
        case &quot;414285001&quot;:
            test=&apos;ALLERGY&apos;
            break;
        case &quot;235719002&quot;:
            test=&apos;INTOLERANCE&apos;
            break;
        case &quot;419511003&quot;:
            test=&apos;ALLERGY&apos;
            break;
        case &quot;420134006&quot;:
            test=&apos;ALLERGY&apos;
            break;
        case &quot;418471000&quot;:
            test=&apos;ALLERGY&apos;
            break;
        case &quot;418038007&quot;:
            test=&apos;ALLERGY&apos;
            break;
        case &quot;418038007&quot;:
            test=&apos;ALLERGY&apos;
            break;
        case &quot;232347008&quot;:
            test=&apos;ALLERGY&apos;
            break;
        case &quot;426232007&quot;:
            test=&apos;ALLERGY&apos;
            break;
        default:
            test=&apos;ALLERGY&apos;;
    }

   return test;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>a20a1fa1-52a7-47b2-a875-161dc81060d4</id>
            <name>MapCareplanIntent</name>
            <revision>1</revision>
            <lastModified>
              <time>1668522133053</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function MapCareplanIntent(arg1)
{
   switch(String(arg1))
   {
      case &quot;INT&quot;:
         return &apos;PLAN&apos;;
         break;
      case &quot;PRMS&quot;:
         return &apos;PLAN&apos;;
         break; 
      case &quot;PRP&quot;:
         return &apos;PROPOSAL&apos;;
         break; 
      case &quot;RQO&quot;:
         return &apos;ORDER&apos;;
         break; 
      
      default:
         return &apos;NULL&apos;;
   }   
   
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>c12d9778-0179-456b-82f0-b8bba4b01a63</id>
            <name>MapCareplanStatus</name>
            <revision>1</revision>
            <lastModified>
              <time>1668524877816</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function MapCareplanStatus(arg1)
{
   switch(String(arg1))
   {
      case &quot;active&quot;:
         return &apos;INPROGRESS&apos;;
         break;
      case &quot;completed&quot;:
         return &apos;COMPLETED&apos;;
         break; 
      
      
      default:
         return &apos;UNKNOWN&apos;;
   }   
   
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>b4c702ab-b378-476f-8a76-c2e07e47dff1</id>
            <name>MapConditionClinicalStatus</name>
            <revision>1</revision>
            <lastModified>
              <time>1666786324128</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function MapConditionClinicalStatus(str)
{
    var obj={};

    if(str.Code=&apos;413322009&apos;)
    {
        obj.Code=&apos;resolved&apos;;
        obj.CodeSystem=&apos;2.16.840.1.113883.4.642.3.1372&apos;;
        obj.DisplayName=&apos;Resolved&apos;
    }
    else if(str.Code=&apos;73425007&apos;)
    {
        obj.Code=&apos;inactive&apos;;
        obj.CodeSystem=&apos;2.16.840.1.113883.4.642.3.1372&apos;;
        obj.DisplayName=&apos;Inactive&apos;
    }
    else
    {
        obj.Code=&apos;active&apos;;
        obj.CodeSystem=&apos;2.16.840.1.113883.4.642.3.1372&apos;;
        obj.DisplayName=&apos;Active&apos;
    }

    return obj;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>c920014e-d6a5-4159-ad1c-0aa55c5adf4e</id>
            <name>MapConfidentiality</name>
            <revision>1</revision>
            <lastModified>
              <time>1668179329716</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function MapConfidentiality(arg1)
{
    switch(String(arg1)) 
    {
        case &quot;N&quot;:
            return &apos;N&apos;
            break;
        case &quot;R&quot;:
            
            return &apos;R&apos;
            break;
        case &quot;V&quot;:
            return &apos;V&apos;
            break;
        default:
            return &apos;NULL&apos;
            break;
    }

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>90d774a7-fed4-43a4-aef7-84c201e260ba</id>
            <name>MapDeviceStatus</name>
            <revision>1</revision>
            <lastModified>
              <time>1667148490472</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function MapDeviceStatus(arg1)
{
   switch(String(arg1))
   {
      case &quot;completed&quot;:
         return &apos;ACTIVE&apos;;
         break;
      case &quot;aborted&quot;:
         return &apos;INACTIVE&apos;;
         break; 
      case &quot;active&quot;:
         return &apos;ACTIVE&apos;;
         break; 
      case &quot;cancelled&quot;:
         return &apos;INACTIVE&apos;;
         break;
      case &quot;nullified&quot;:
         return &apos;NULL&apos;;
         break;         
      default:
         return &apos;UNKNOWN&apos;;
   }   
   
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>dd458c42-1b6a-4f51-86d3-93ccd5f3e7b1</id>
            <name>MapEncounterStatus</name>
            <revision>1</revision>
            <lastModified>
              <time>1666691273087</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function MapEncounterStatus(arg1)
{
    var test;
    switch (String(arg1))
    {
        case &apos;aborted&apos;:
            test=&apos;CANCELLED&apos;;
            break;
        case &apos;cancelled&apos;:
            test=&apos;CANCELLED&apos;;
            break;
        case &apos;active&apos;:
            test=&apos;INPROGRESS&apos;;
            break;
        case &apos;completed&apos;:
            test=&apos;FINISHED&apos;;
            break;
        default:
            test=&apos;UNKNOWN&apos;

    }


    return test;
             
}     
            
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>04e20d18-56ed-4eb3-a7b4-af475cfc8b54</id>
            <name>MapEntityNameUse</name>
            <revision>15</revision>
            <lastModified>
              <time>1666451092524</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function MapEntityNameUse(nuse)
{
	
    switch(String(nuse)) 
    {
        case &apos;L&apos;:
        	 
            return &apos;OFFICIAL&apos;
            break;
            
        case &quot;ASGN&quot;:
            return &apos;ANONYMOUS&apos;
            break;
        case &quot;C&quot;:
        		
            return &apos;OFFICIAL&apos;
            break;
        case &quot;P&quot;:
       
            return &apos;USUAL&apos;
            break;
        case &quot;A&quot;:
            return &apos;ANONYMOUS&apos;
            break;
         default:
            return &apos;ANONYMOUS&apos;
         
    }

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>7683b0be-750a-456d-b5b7-a990d907d743</id>
            <name>MapGender</name>
            <revision>3</revision>
            <lastModified>
              <time>1666805174016</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function MapGender(arg1)
{
    switch(String(arg1)) 
    {
        case &quot;F&quot;:
            return &apos;FEMALE&apos;
            break;
        case &quot;M&quot;:
            
            return &apos;MALE&apos;
            break;
        case &quot;UN&quot;:
            return &apos;OTHER&apos;
            break;
        default:
            return &apos;UNKNOWN&apos;
            break;
    }

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>d80f3ca9-b9a5-4b1d-bf65-5545ac3aba40</id>
            <name>MapImmunizationStatus</name>
            <revision>2</revision>
            <lastModified>
              <time>1669216770274</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function MapImmunizationStatus(arg1,negind)
{
   if(negind==true)
   {
       return &apos;NOTDONE&apos;;
   }
   else
   {
      switch(String(arg1))
      {
         case &quot;completed&quot;:
            return &apos;COMPLETED&apos;;
            break;
         case &quot;aborted&quot;:
            return &apos;NOTDONE&apos;;
            break; 
         case &quot;active&quot;:
            return &apos;COMPLETED&apos;;
            break; 
         case &quot;cancelled&quot;:
            return &apos;NOTDONE&apos;;
            break;
         case &quot;nullified&quot;:
            return &apos;NULL&apos;;
            break;         
         default:
            return &apos;COMPLETED&apos;;

      }   
   }
   
   
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>377293b9-c4c1-4986-b83e-745d0288d836</id>
            <name>Maplanguage</name>
            <revision>5</revision>
            <lastModified>
              <time>1668520272238</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function Maplanguage(str)
{
    var obj={};

    obj.system=&apos;http://hl7.org/fhir/ValueSet/languages&apos;;

    switch(String(str.Code.toLowerCase()))
    {
        case &quot;eng&quot;:
            obj.code=&apos;en&apos;;
            obj.display=&apos;English&apos;;
            break
        case &quot;en&quot;:
            obj.code=&apos;en&apos;;
            obj.display=&apos;English&apos;;
            break
        default:
            obj.code=str.Code;
            obj.display=str.DisplayName;
            obj.system=&apos;&apos;;


    }

    return obj;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>23f947a0-7542-47f2-ac6f-d32f97613b77</id>
            <name>MapMedicationStatus</name>
            <revision>2</revision>
            <lastModified>
              <time>1667321219160</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function MapMedicationStatus(arg1)
{
   switch(String(arg1))
   {
      case &quot;aborted&quot;:
         return &apos;CANCELLED&apos;;
         break;
      case &quot;active&quot;:
         return &apos;ACTIVE&apos;;
         break; 
      case &quot;Active&quot;:
         return &apos;ACTIVE&apos;;
         break; 
      case &quot;completed&quot;:
         return &apos;COMPLETED&apos;;
         break; 
      case &quot;nullified&quot;:
         return &apos;CANCELLED&apos;;
         break;
      case &quot;suspended&quot;:
         return &apos;ONHOLD&apos;;
         break;         
      default:
         return &apos;UNKNOWN&apos;;
   }   
   
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>3bc11ed5-8ac5-46e5-b65a-af486cc2a9db</id>
            <name>MapParticipantType</name>
            <revision>3</revision>
            <lastModified>
              <time>1666708901548</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function MapParticipantType(arg1)
{

	importPackage(org.hl7.fhir.r4.model);
	var coding=new Coding();
	switch (String(arg1))
    	{
        case &apos;PRF&apos;:
            coding.setCode(&apos;PPRF&apos;);
            coding.setSystem(&apos;http://terminology.hl7.org/CodeSystem/v3-ParticipationType&apos;);
            coding.setDisplay(&apos;primary performer&apos;);
            break;
       
        default:
        	 coding.setCode(&apos;PART&apos;);
           coding.setSystem(&apos;http://terminology.hl7.org/CodeSystem/v3-ParticipationType&apos;);
           coding.setDisplay(&apos;Participation&apos;);
        		
            

    }


    return coding;
             
}     
            
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>243b25d5-16de-4536-a4a6-0ea63a06e91b</id>
            <name>MapPeriodUnit</name>
            <revision>3</revision>
            <lastModified>
              <time>1668442679309</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function MapPeriodUnit(arg1)
{
    switch(String(arg1)) 
    {
        case &quot;hours&quot;:
            return &apos;H&apos;
            break;
        case &quot;h&quot;:
            return &apos;H&apos;
            break;
        case &quot;seconds&quot;:
            
            return &apos;S&apos;
            break;
        case &quot;minute&quot;:
            return &apos;MIN&apos;
            break;
        case &quot;week&quot;:
            return &apos;WK&apos;
            break;
        case &quot;month&quot;:
            return &apos;MO&apos;
            break;
        case &quot;day&quot;:
            return &apos;D&apos;
            break;
         case &quot;d&quot;:
            return &apos;D&apos;
            break;
        case &quot;year&quot;:
            return &apos;A&apos;
            break;
        default:
            return &apos;NULL&apos;
            break;
    }

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>cd8ad885-3321-4beb-917e-bc08b48db952</id>
            <name>MapProcedureStatus</name>
            <revision>3</revision>
            <lastModified>
              <time>1669221620053</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function MapProcedureStatus(arg1)
{
   switch(String(arg1))
   {
      case &quot;aborted&quot;:
         return &apos;STOPPED&apos;;
         break;
      case &quot;active&quot;:
         return &apos;INPROGRESS&apos;;
         break; 
      case &quot;cancelled&quot;:
         return &apos;STOPPED&apos;;
         break; 
      case &quot;completed&quot;:
         return &apos;COMPLETED&apos;;
         break;
      
      default:
         return &apos;NULL&apos;;
   }   
   
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>ae893c08-7a5a-4148-9b55-66c071c10b75</id>
            <name>MapResultStatus</name>
            <revision>2</revision>
            <lastModified>
              <time>1668002730833</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function MapResultStatus(arg1)
{
   switch(String(arg1))
      {
         case &quot;aborted&quot;:
            return &apos;CANCELLED&apos;;
            break;
         case &quot;active&quot;:
            return &apos;FINAL&apos;;
            break; 
         case &quot;cancelled&quot;:
            return &apos;CANCELLED&apos;;
            break; 
         case &quot;completed&quot;:
            return &apos;FINAL&apos;;
            break;
         case &quot;held&quot;:
            return &apos;UNKNOWN&apos;;
            break; 
         case &quot;suspended&quot;:
            return &apos;UNKNOWN&apos;;
            break;   
         case &quot;F&quot;:
            return &apos;FINAL&apos;;
            break;       
         default:
            return &apos;NULL&apos;;

      }   
   
   
   
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>810bb519-ed0b-4cd0-b01c-d4d5992640f8</id>
            <name>MapTelecomSystem</name>
            <revision>4</revision>
            <lastModified>
              <time>1666805186410</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function MapTelecomSystem(arg1)
{
    switch(String(arg1)) 
    {
        case &quot;HP&quot;:
            return &apos;PHONE&apos;
            break;
        case &quot;HV&quot;:
             return &apos;PHONE&apos;
            break;
        case &quot;MC&quot;:
            return &apos;PHONE&apos;
            break;
        case &quot;WP&quot;:
            return &apos;PHONE&apos;
            break;
        default:
            return &apos;OTHER&apos; 
            break;
        
    }



}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>1a69a8b6-535b-48e4-a72a-2d90ee4dd50d</id>
            <name>MapTelecomUse</name>
            <revision>5</revision>
            <lastModified>
              <time>1667132763211</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function MapTelecomUse(arg1)
{
	//logger.info(&apos;MapTelecomUse-&gt;&apos;+arg1)
    switch(String(arg1)) 
    {
        case &quot;HP&quot;:
            return &apos;HOME&apos;
            break;
        case &quot;HV&quot;:
             return &apos;HOME&apos;
            break;
        case &quot;MC&quot;:
            return &apos;MOBILE&apos;
            break;
        case &quot;WP&quot;:
            return &apos;WORK&apos;
            break;
        default:
        	return &apos;NULL&apos;
        	
        
        
    }



}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>b59fcd34-79b3-4b80-a350-0d12ab3681d4</id>
            <name>MapVerificationStatus</name>
            <revision>3</revision>
            <lastModified>
              <time>1666545653657</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function MapVerificationStatus(str)
{
    var obj={};

    if(str.Code==&apos;completed&apos;)
    {
        obj.Code=&apos;confirmed&apos;;
        obj.CodeSystem=&apos;http://terminology.hl7.org/CodeSystem/allergyintolerance-verification&apos;;
        obj.DisplayName=&apos;Confirmed&apos;
    }
    else
    {
        obj.Code=&apos;unconfirmed&apos;;
        obj.CodeSystem=&apos;http://terminology.hl7.org/CodeSystem/allergyintolerance-verification&apos;;
        obj.DisplayName=&apos;Unconfirmed&apos;
    }
	return obj
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>58046a9c-7c2d-4dcc-ac91-f634af031869</id>
            <name>MedicalEquipmentBundle</name>
            <revision>5</revision>
            <lastModified>
              <time>1669212311877</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function MedicalEquipmentBundle(arg1,text,patientid,bundleId) 
{
   
    
   var obj=JSON.parse(arg1);
   
   if(obj.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=obj.Entries.length;
       bundle.entry=[];
   }
   

   //looping through entries
   for(var _a=0;_a&lt;obj.Entries.length;_a++)
   {
        var record=obj.Entries[_a]
        var temp={};
        if(record.Supply!=null)
        {
            temp.resource=DeviceResource(record.Supply,text,patientid);

            SavefhirResource(temp.resource,bundleId,obj.Code);
        }
        
      
   }  

   //logger.info(&apos;MedicalEquipment Bundle-&gt;&apos;+JSON.stringify(bundle)) 
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>03578d34-162b-4f1e-844a-ec5602024454</id>
            <name>MedicationBundle</name>
            <revision>5</revision>
            <lastModified>
              <time>1669212313233</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function MedicationBundle(arg1,text,patientid,bundleId) 
{
   
    
   var obj=JSON.parse(arg1);
   
   if(obj.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=obj.Entries.length;
       bundle.entry=[];
   }
   

   //looping through entries
   for(var _a=0;_a&lt;obj.Entries.length;_a++)
   {
        var record=obj.Entries[_a]
        var temp={};
        temp.resource=MedicationRequestResource(record.SubstanceAdministration,text,patientid);

       SavefhirResource(temp.resource,bundleId,obj.Code);
        bundle.entry.push(temp)
   }  

   //logger.info(&apos;MedicationBundle-&gt;&apos;+JSON.stringify(bundle)) 
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>0e9f7405-8c6e-4b93-bbf2-046fcbd6eb58</id>
            <name>MedicationRequestResource</name>
            <revision>34</revision>
            <lastModified>
              <time>1668945960843</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @param {Any} text - 
    @param {Any} patientid - 
    @return {String} return description
*/
function MedicationRequestResource(arg1,text,patientid)
{
   importPackage(org.hl7.fhir.r4.model);
   var medicationrequest = new org.hl7.fhir.r4.model.MedicationRequest();
   var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
   var parser = ctx.newJsonParser();
   var dosage=new Dosage();
   var dispense=new org.hl7.fhir.r4.model.MedicationRequest.MedicationRequestDispenseRequestComponent();
   var doseandrate=new org.hl7.fhir.r4.model.Dosage.DosageDoseAndRateComponent();


   for(var _id=0;_id&lt;arg1.Ids.length;_id++)
   {
      if(arg1.Ids[_id].Extension!=&apos;&apos;)
      {
         medicationrequest.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
      }
        
   }

   medicationrequest.setStatus(MedicationRequest.MedicationRequestStatus.valueOf(MapMedicationStatus(arg1.StatusCode.Code)))

   if(text!=&apos;&apos; &amp;&amp; GetNarrative(text)!=null)
   {
     medicationrequest.setText(GetNarrative(text))
   }
      
   medicationrequest.setSubject(new Reference().setReference(patientid));

   if(arg1.MoodCode.Name==&apos;EVN&apos;)
   {
      medicationrequest.setIntent(MedicationRequest.MedicationRequestIntent.PLAN);   
   }
   else
   {
      medicationrequest.setIntent(MedicationRequest.MedicationRequestIntent.ORDER);
   }
   

   medicationrequest.setMedication(new CodeableConcept().setCoding(GetCodingList(arg1.Consumable.ManufacturedProduct.Material.Code)));

   if(arg1.hasOwnProperty(&apos;Informants&apos;))
   {
      /Informant Block Start/
      var tempreported=AuthortoPractictionerRole(arg1.Informants[0].AssignedEntity);
      if(tempreported!= undefined)
      {
         medicationrequest.addContained(tempreported);    
         medicationrequest.setReported(new Reference().setReference(&apos;#&apos;+new Resource(tempreported.getId())));
      }

      var tempreportedperson=AuthortoPractictioner(arg1.Informants[0].AssignedEntity);
      if(tempreportedperson!= undefined)
      {
           medicationrequest.addContained(tempreportedperson);
      }
              
        var tempreportedorg= AuthortoOrganization(arg1.Informants[0].AssignedEntity.Organizations[0])
      if(tempreportedorg!= undefined)
      {
         medicationrequest.addContained(tempreportedorg);
      }

      /Informant Block End/

   }
   
   if(arg1.Authors[0].Time.Value!=&apos;&apos;)
   {
      medicationrequest.setAuthoredOn(new DateTimeType(formatdate(arg1.Authors[0].Time.Value)))
   }

   /Author Block Start/
   var temprecorder=AuthortoPractictionerRole(arg1.Authors[0].AssignedAuthor);
   if(temprecorder!= undefined)
   {
      medicationrequest.addContained(temprecorder);    
      medicationrequest.setRecorder(new Reference().setReference(&apos;#&apos;+new Resource(temprecorder.getId())));
   }


   var temprecorderperson=AuthortoPractictioner(arg1.Authors[0].AssignedAuthor);
   if(temprecorderperson!= undefined)
   {
      medicationrequest.addContained(temprecorderperson);
   }
           
    var temprecorderorg= AuthortoOrganization(arg1.Authors[0].AssignedAuthor.Organization);
   if(temprecorderorg!= undefined)
   {
      medicationrequest.addContained(temprecorderorg);
   }

   /Author Block End/

   var tempdate=GetEffectiveTimeInfo(arg1);

   if(tempdate.startdatetime!=&apos;&apos; &amp;&amp; tempdate.enddatetime!=&apos;&apos;)
   {
      var period=new Period();
      period.setStartElement(new DateTimeType(formatdate(tempdate.startdatetime)));
      period.setEndElement(new DateTimeType(formatdate(tempdate.enddatetime)));
      dispense.setValidityPeriod(period)
   }
   

   if(tempdate.frequency!=&apos;&apos;)
   {
      dosage.setTiming(new Timing().setRepeat(new org.hl7.fhir.r4.model.Timing.TimingRepeatComponent().setPeriod(tempdate.frequency).setPeriodUnit(Timing.UnitsOfTime.valueOf(MapPeriodUnit(tempdate.frequencyunit)))));
   }

   if(arg1.hasOwnProperty(&apos;DoseQuantity&apos;))
   {
      if(arg1.DoseQuantity.SXCM_PQ.Value!=&apos;&apos;)
      {
         doseandrate.setDose(GetQuantity(arg1.DoseQuantity.SXCM_PQ))
         
      }
   }

   if(arg1.hasOwnProperty(&apos;AdministrationCode&apos;))
   {
      if(arg1.AdministrationCode.Code!=&apos;&apos; || arg1.AdministrationCode.DisplayName!=&apos;&apos;)
      {
         dosage.setMethod(new CodeableConcept().setCoding(GetCodingList(arg1.AdministrationCode)));   
      }
   }

   if(arg1.hasOwnProperty(&apos;RouteCode&apos;))
   {
      if(arg1.RouteCode.Code!=&apos;&apos; || arg1.RouteCode.DisplayName!=&apos;&apos;)
      {
         dosage.setRoute(new CodeableConcept().setCoding(GetCodingList(arg1.RouteCode)));   
      }
   }

   if(arg1.hasOwnProperty(&apos;RateQuantity&apos;))
   {
      if(arg1.RateQuantity.SXCM_PQ.PQ.Value!=&apos;&apos;)
      {
         doseandrate.setRate(GetQuantity(arg1.RateQuantity.SXCM_PQ));
      }
   }

   for(var _perf=0;_perf&lt;arg1.Performers.length;_perf++)
   {
        var tempperformer=arg1.Performers[_perf];

        /Performer Block Start/
        var tempsupport=AuthortoPractictionerRole(tempperformer.AssignedEntity);
        if(tempsupport!= undefined)
        {
            medicationrequest.addContained(tempsupport);    
            medicationrequest.addSupportingInformation(new Reference().setReference(&apos;#&apos;+new Resource(tempsupport.getId())));
        }

        var tempsupportperson=AuthortoPractictioner(tempperformer.AssignedEntity);
       if(tempsupportperson!= undefined)
       {
          medicationrequest.addContained(tempsupportperson);
       }
                
        var tempsupportorg=AuthortoOrganization(tempperformer.AssignedEntity.Organizations[0]);
       if(tempsupportorg!= undefined)
       {
          medicationrequest.addContained(tempsupportorg);
       }

       /Performer Block End/
        
   }
   

   for(var _i=0;_i&lt;arg1.Participants.length;_i++)
   {
      var tempparticipant1=arg1.Participants[_i];
      if(tempparticipant1.TypeCode.Name==&apos;CSM&apos;)
      {
         if(tempparticipant1.ParticipantRole.PlayingEntity.Code.Code!=&apos;&apos; || tempparticipant1.ParticipantRole.PlayingEntity.Code.DisplayName!=&apos;&apos;)
         {
            medicationrequest.addExtension().setUrl(&apos;http://hl7.org/fhir/us/core/StructureDefinition/drug-vehicle&apos;).setValue(new CodeableConcept().setCoding(GetCodingList(tempparticipant1.ParticipantRole.PlayingEntity.Code)));
         }
      }
   }


   for(var _er1=0;_er1&lt;arg1.EntryRelationships.length&gt;0;_er1++)
    {
        var er1=arg1.EntryRelationships[_er1];

        if(er1.hasOwnProperty(&apos;Observation&apos;))
        {
            if(er1.TypeCode.Name==&apos;RSON&apos;)
            {
                medicationrequest.addReasonCode(new CodeableConcept().setCoding(GetCodingList(er1.Observation.Values[0].CD)))
            }

            if(er1.TypeCode.Name==&apos;REFR&apos;)
            {
               if(er1.Observation.Values[0].DisplayName!=&apos;&apos; &amp;&amp; er1.Observation.Code.Code==&apos;33999-4&apos;)
               {
                  medicationrequest.setStatus(MedicationRequest.MedicationRequestStatus.valueOf(MapMedicationStatus(er1.Observation.Values[0].CD.DisplayName)))
               }
               
            }
        }

        if(er1.hasOwnProperty(&apos;encounter&apos;))
        {
             if(er1.TypeCode.Name==&apos;COMP&apos;)
            {
                if(er1.encounter.Ids[0].Extension!=&apos;&apos;)
                {
                    medicationrequest.setEncounter(new Reference().setReference(&apos;/Encounter?identifier=&apos;+er1.encounter.Ids[0].Extension));    
                }
                
            }
        }

        if(er1.hasOwnProperty(&apos;substanceAdministration&apos;))
        {
            if(er1.substanceAdministration.Code.Code==&apos;76662-6&apos;)
            {
                if(er1.substanceAdministration.Text!=&apos;&apos;)
                {
                   dosage.setText(er1.substanceAdministration.Text.trim()); 
                   
                }
                else if(er1.substanceAdministration.Text.Reference.TEL_URL.Value!=&apos;&apos;)
                {
                   dosage.setText(er1.substanceAdministration.Text.Reference.TEL_URL.Value.trim()); 
                   
                }
            }
        }

        if(er1.hasOwnProperty(&apos;Act&apos;))
        {
            //Patient Instruction
            if(er1.TypeCode.Name==&apos;SUBJ&apos;)
            {
                if(er1.Act.Text.Text!=&apos;&apos;)
                {
                   dosage.setPatientInstruction(er1.Act.Text.Text.trim());   
                   medicationrequest.addNote().setText(er1.Act.Text.Text.trim()) ;
                }
                else if(er1.Act.Text.Reference.TEL_URL.Value!=&apos;&apos;)
                {
                   dosage.setPatientInstruction(er1.Act.Text.Reference.TEL_URL.Value.trim()); 
                   medicationrequest.addNote().setText(er1.Act.Text.Reference.TEL_URL.Value.trim()) ;
                }
            }
        }


        if(er1.hasOwnProperty(&apos;supply&apos;))
        {
            if(er1.TypeCode.Name==&apos;REFR&apos; &amp;&amp; er1.supply.MoodCode.Name==&apos;INT&apos;)
            {
               if(er1.supply.RepeatNumber.Value.Value!=&apos;&apos;)
               {
                  dispense.setNumberOfRepeatsAllowed(er1.supply.RepeatNumber.Value.Value);
               }

               if(er1.supply.hasOwnProperty(&apos;Quantity&apos;))
               {
                  if(er1.supply.Quantity.Value!=&apos;&apos;)
                  {
                     doseandrate.setDose(GetQuantity(er1.supply.Quantity));
                  }   
               }

               for(var _er2=0;_er2&lt;er1.supply.EntryRelationships.length;_er2++)
               {
                  var er2=er1.supply.EntryRelationships[_er2];
                  if(er2.hasOwnProperty(&apos;Act&apos;))
                  {
                     if(er2.Act.hasOwnProperty(&apos;Text&apos;))
                     {
                        if(er2.Act.Text.Text!=&apos;&apos;)
                        {
                           medicationrequest.addNote().setText(er2.Act.Text.Text.trim()) ;   
                        }   
                     }
                     
                     
                  }
               }
               
            }

            if(er1.TypeCode.Name==&apos;REFR&apos; &amp;&amp; er1.supply.MoodCode.Name==&apos;EVN&apos;)
            {
               if(er1.supply.hasOwnProperty(&apos;Quantity&apos;))
               {
                  if(er1.supply.Quantity.Value!=&apos;&apos;)
                  {
                     dispense.setQuantity(GetQuantity(er1.supply.Quantity));
                  }   
               }

               if(er1.supply.RepeatNumber.Value.Value!=&apos;&apos;)
               {
                  dosage.setSequence(er1.supply.RepeatNumber.Value.Value);
               }

               if(er1.supply.hasOwnProperty(&apos;Participants&apos;))
               {
                  for(var _p=0;_p&lt;er1.supply.Participants.length;_p++)
                  {
                     var tempparticipant=er1.supply.Participants[_p];

                     if(tempparticipant.TypeCode.Name==&apos;LOC&apos;)
                     {
                        var tempperf=ParticipanttoOrganization(tempparticipant.ParticipantRole);
                        if(tempperf!=undefined &amp;&amp; tempperf!=null)
                        {
                           medicationrequest.addContained(tempperf)
                           dispense.setPerformer(new Reference().setReference(&apos;#&apos;+new Resource(tempperf.getId())))   
                        }
                        
                     }
                  }

               }

               for(var _perf1=0;_perf1&lt;er1.supply.Performers.length;_perf1++)
               {
                  var tempperformer1=er1.supply.Performers[_perf1];

                  /Performer Block Start/
                  var tempsupportinfo=AuthortoPractictionerRole(tempperformer1.AssignedEntity);
                  if(tempsupportinfo!= undefined)
                  {
                     medicationrequest.addContained(tempsupportinfo);    
                     medicationrequest.addSupportingInformation(new Reference().setReference(&apos;#&apos;+new Resource(tempsupportinfo.getId())));
                  }


                    var tempsupportinfoperson=AuthortoPractictioner(tempperformer1.AssignedEntity);
                  if(tempsupportinfoperson!= undefined)
                  {
                     medicationrequest.addContained(tempsupportinfoperson);
                  }
                            
                    var tempsupportinfoorg=AuthortoOrganization(tempperformer1.AssignedEntity.Organizations[0]);
                  if(tempsupportinfoorg!= undefined)
                  {
                     medicationrequest.addContained(tempsupportinfoorg);
                  }

                   /Performer Block End/
                    
                }

               /Author Block Start/

               var tempperf1=AuthortoPractictionerRole(er1.supply.Authors[0].AssignedAuthor);
               if(tempperf1!= undefined)
               {
                  medicationrequest.addContained(tempperf1);    
                  medicationrequest.setPerformer(new Reference().setReference(&apos;#&apos;+new Resource(tempperf1.getId())));
               }

               var tempperf1person=AuthortoPractictioner(er1.supply.Authors[0].AssignedAuthor);
               if(tempperf1person!= undefined)
               {
                  medicationrequest.addContained(tempperf1person);
               }
                           
                var tempperf1org=AuthortoOrganization(er1.supply.Authors[0].AssignedAuthor.Organization);
               if(tempperf1org!= undefined)
               {
                  medicationrequest.addContained(tempperf1org);
               }
               /Author Block End/
            }


        }
   }

   for(var _c=0;_c&lt;arg1.Preconditions.length;_c++)
   {
      var precondition=arg1.Preconditions[_c];

      if(precondition.Criterion.hasOwnProperty(&apos;Value&apos;))
      {
         if(precondition.Criterion.Value.CD.Code!=&apos;&apos; || precondition.Criterion.Value.CD.DisplayName!=&apos;&apos;)
         {
            medicationrequest.addExtension().setUrl(&apos;http://hl7.org/fhir/StructureDefinition/observation-precondition&apos;).setValue(new CodeableConcept().setCoding(GetCodingList(precondition.Criterion.Value.CD)));
         }   
      }
      
      

   }

   dosage.addDoseAndRate(doseandrate);
   medicationrequest.addDosageInstruction(dosage);
   medicationrequest.setDispenseRequest(dispense);

   medicationrequest.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(medicationrequest))));
 //  var oMedicationRequest=JSON.parse(parser.encodeResourceToString(medicationrequest));
   //logger.info(&apos;MedicationRequest Resource-&gt;&apos;+parser.encodeResourceToString(medicationrequest));

   return medicationrequest;
   
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>e308220f-8718-4728-902a-0948acd2c530</id>
            <name>ObservationResource</name>
            <revision>23</revision>
            <lastModified>
              <time>1668946395418</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function ObservationResource(arg1,txt,patientid,category)
{
   importPackage(org.hl7.fhir.r4.model);
    var observation = new org.hl7.fhir.r4.model.Observation();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  
   
      for(var _id=0;_id&lt;arg1.Ids.length;_id++)
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            observation.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }  
    }

    if(txt!=&apos;&apos; &amp;&amp; GetNarrative(txt)!=null)
    {
        observation.setText(GetNarrative(txt))
    }

   observation.setStatus(Observation.ObservationStatus.FINAL);

   //logger.info(&apos;ObservationResource 1&apos;);
   observation.addCategory(new CodeableConcept().setCoding(GetCodingList(category)));
   
   //logger.info(&apos;ObservationResource 2&apos;);
   observation.setCode(new CodeableConcept().setCoding(GetCodingList(arg1.Code)));
   observation.setSubject(new Reference().setReference(patientid));    

   var tempdate=GetEffectiveTimeInfo(arg1);
   if(tempdate.startdatetime!=&apos;&apos; &amp;&amp; tempdate.enddatetime!=&apos;&apos;)
   {
      observation.setEffective(new Period().setStartElement(new DateTimeType(formatdate(tempdate.startdatetime))).setEndElement(new DateTimeType(formatdate(tempdate.enddatetime))))
   }
   else if(tempdate.startdatetime!=&apos;&apos;)
    {
        observation.setEffective(new DateTimeType(formatdate(tempdate.startdatetime)));
    }


   if(arg1.hasOwnProperty(&apos;Values&apos;)) 
   {
      for(var _v=0;_v&lt;arg1.Values.length;_v++)
      {
        //logger.info(&apos;ObservationResource-&gt;&apos;+GetValueNode(arg1.Values[_v]))
        if(GetValueNode(arg1.Values[_v])!=undefined)
        {
            observation.setValue(GetValueNode(arg1.Values[_v]));          
        }
        
      }
      
   }
   
   
   if(arg1.hasOwnProperty(&apos;Participants&apos;))
   {
      for(var _p=0;_p&lt;arg1.Participants.length&gt;0;_p++)
      {
         var participant=arg1.Participants[_p];
         if(participant.TypeCode.Name==&apos;PRF&apos;)
         {

            var tempauthenticator=ParticipanttoPractictioner(participant.ParticipantRole);
            if(tempauthenticator!=undefined)
            {
                var authenticator=&apos;#&apos;+new Resource(tempauthenticator.getId());
                observation.addContained(tempauthenticator);    
            }
            
         }

         if(participant.TypeCode.Name==&apos;CST&apos;)
         {
            var tempcustodian=ParticipanttoPractictioner(participant.ParticipantRole);
            if(tempcustodian!=undefined)
            {
                var custodian=&apos;#&apos;+new Resource(tempcustodian.getId());
                observation.addContained(tempcustodian);  
            }
              
         }

         if(participant.TypeCode.Name==&apos;PRF&apos;)
         {
            var temp_perf=ParticipanttoPractictioner(participant.ParticipantRole);
            if(temp_perf!=undefined)
            {
                var performer=&apos;#&apos;+new Resource(temp_perf.getId());
                observation.addContained(temp_perf);
                observation.addPerformer().setReference(performer);
            }
            
         }
      }

   }
   
   if(arg1.hasOwnProperty(&apos;References&apos;))
   {
      for(var _r=0;_r&lt;arg1.References.length;_r++)
      {
         var tempreference=arg1.References[_r];

         var tempdocument=ExternalDocumentReference(tempreference,patientid,authenticator,custodian);
         if(tempdocument!=undefined)
         {
            observation.addDerivedFrom(new Reference().setReference(&apos;#&apos;+new Resource(tempdocument.getId())));
            observation.addContained(tempdocument);    
         }
         
         
      }  
   }
      


   for(var _comp=0;_comp&lt;arg1.EntryRelationships.length&gt;0;_comp++)
   {
      var tempcomp=arg1.EntryRelationships[_comp];
      if(tempcomp.hasOwnProperty(&apos;Observation&apos;))
      {
         var component=org.hl7.fhir.r4.model.Observation.ObservationComponentComponent();
         //logger.info(&apos;ObservationResource 3&apos;);
         component.setCode(new CodeableConcept().setCoding(GetCodingList(tempcomp.Observation.Code)));   
         

         component.setValue(GetValueNode(tempcomp.Observation.Values[0]));

         if(tempcomp.Observation.hasOwnProperty(&apos;InterpretationCode&apos;))
         {
            for(var _i=0;_i&lt;tempcomp.Observation.InterpretationCode.length;_i++)
            {
               var tempinterpretation=tempcomp.Observation.InterpretationCode[_i];
               //logger.info(&apos;ObservationResource 4&apos;);
               if(GetCodingList(tempinterpretation).length&gt;0)
               {
                    //logger.info(&apos;ObservationResource 5&apos;);
                  component.addInterpretation(new CodeableConcept().setCoding(GetCodingList(tempinterpretation)))
               }
            }
            
         }

         if(tempcomp.Observation.hasOwnProperty(&apos;RefrenceRanges&apos;))
         {  
            for(var_r=0;_r&lt;tempcomp.Observation.RefrenceRanges.length;_r++)
            {
               var temprefrange=tempcomp.Observation.RefrenceRanges[_r];
               var referencerange=new org.hl7.fhir.r4.model.Observation.ObservationReferenceRangeComponent();

               if(temprefrange.ObservationRange.hasOwnProperty(&apos;Text&apos;))
               {
                  if(temprefrange.ObservationRange.Text.Text!=&apos;&apos;)
                  {
                     referencerange.setText(temprefrange.ObservationRange.Text.Text.trim());  
                  }
                  else if(temprefrange.ObservationRange.Text.hasOwnProperty(&apos;Reference&apos;))
                   {
                     if(temprefrange.ObservationRange.Text.Reference.TEL_URL.Value!=&apos;&apos;)
                     {
                        referencerange.setText(temprefrange.ObservationRange.Text.Reference.TEL_URL.Value.trim());
                     }
                   }

                   referencerange.setLow(GetQuantity(temprefrange.ObservationRange.ANY.IVL_PQ.Low.PQ));
                   referencerange.setHigh(GetQuantity(temprefrange.ObservationRange.ANY.IVL_PQ.High.PQ));
                  
               }

            }
         }
            
      }

      observation.addComponent(component);
 
   }


   observation.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(observation))));
    //var oObservation=JSON.parse(parser.encodeResourceToString(observation));
    ////logger.info(&apos;ObservationResource-&gt;&apos;+parser.encodeResourceToString(observation));

    return observation;
   

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>a55ffa53-02c9-4831-9fa4-0632768095e7</id>
            <name>OrganizationResource</name>
            <revision>20</revision>
            <lastModified>
              <time>1668249464971</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function OrganizationResource(arg1)
{
	//logger.info(&apos;OrganizationResource-&gt;&apos;+JSON.stringify(arg1))
    importPackage(org.hl7.fhir.r4.model);
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();
    
   
      var organization = new org.hl7.fhir.r4.model.Organization();
      if(arg1.Names.length&gt;0)
      {
         if(arg1.Names[0].Text!=&apos;&apos;)
      {
         
            for (var _id = 0; _id &lt; arg1.Ids.length; _id++) 
            {
               if(arg1.Ids[_id].Extension!=&apos;&apos;)
               {
                  organization.addIdentifier().setSystem(&quot;urn:oid:&quot;+arg1.Ids[_id].Root).setValue(arg1.Ids[_id].Extension);   
               }
               
            }
   
            for (var _n = 0; _n &lt; arg1.Names.length; _n++) 
            {
   
               if(arg1.Names[_n].Text!=&apos;&apos; &amp;&amp; arg1.Names[_n].Text!=&apos;&quot;&quot;&apos;)
               {
                  organization.setName(arg1.Names[_n].Text.trim())
               }
            }
   
            
   
            for (var _ot = 0; _ot &lt; arg1.Telecoms.length; _ot++) 
            {
               
               var orgtelecom=organization.addTelecom()
               if(arg1.Telecoms[_ot].TEL_URL.Value!=&apos;&apos;)
               {
               	orgtelecom.setValue(arg1.Telecoms[_ot].TEL_URL.Value)	
               }

               if(arg1.Telecoms[_ot].TelecomAddress[0].Name!=&apos;&apos;)
               {&#xd;               	orgtelecom.setSystem(ContactPoint.ContactPointSystem.valueOf(MapTelecomSystem(arg1.Telecoms[_ot].TelecomAddress[0].Name)));	
               }

               if(arg1.Telecoms[_ot].TelecomAddress[0].Name!=&apos;&apos;)
               {&#xd;               	orgtelecom.setUse(ContactPoint.ContactPointUse.valueOf(MapTelecomUse(arg1.Telecoms[_ot].TelecomAddress[0].Name)));	&#xd;               }&#xd;               
   
            }
   
            for (var _oa = 0; _oa &lt; arg1.Address.length; _oa++) 
            {
               orgaddr=organization.addAddress();
   
               if(arg1.Address[_oa].Cities[0].Name!=&apos;&apos; &amp;&amp; MapAddressUse(arg1.Address[_oa].Cities[0].Name)!=null)
               {
                  orgaddr.setUse(Address.AddressUse.valueOf(MapAddressUse(arg1.Address[_oa].Cities[0].Name)))
               }
                               
               if(arg1.Address[_oa].StreetAddressLines[0].ADXP_ST!=&apos;&apos;)
               {
                  orgaddr.addLine(arg1.Address[_oa].StreetAddressLines[0].ADXP_ST.trim());
               }
   
               if(arg1.Address[_oa].Cities[0].ADXP_ST!=&apos;&apos;)
               {
                  orgaddr.setCity(arg1.Address[_oa].Cities[0].ADXP_ST)
               }
   
               if(arg1.Address[_oa].States[0].ADXP_ST!=&apos;&apos;)
               {
                  orgaddr.setState(arg1.Address[_oa].States[0].ADXP_ST);
               }
                               
               if(arg1.Address[_oa].PostalCodes[0].ADXP_ST!=&apos;&apos;)
               {
                  orgaddr.setPostalCode(arg1.Address[_oa].PostalCodes[0].ADXP_ST);
               }
   
               if(arg1.Address[_oa].Countries[0].ADXP_ST!=&apos;&apos;)
               {
                  orgaddr.setCountry(arg1.Address[_oa].Countries[0].ADXP_ST);
               }
   
            }
         
         }

      }
      
   
   organization.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(organization))));
     
   if(countkey(parser.encodeResourceToString(organization))&gt;2)
   {
   	return organization
   }
         
}     
            
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>869e6f0b-b7f7-4adc-a1c3-4ec737046b20</id>
            <name>ParticipanttoOrganization</name>
            <revision>10</revision>
            <lastModified>
              <time>1668252304134</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function ParticipanttoOrganization(arg1)
{
	//Takes input from Particpants.ParticpantRole
    importPackage(org.hl7.fhir.r4.model);
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();
    
   
    var organization = new org.hl7.fhir.r4.model.Organization();
    
    for (var _id = 0; _id &lt; arg1.Ids.length; _id++) 
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            organization.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }
    }

    if(arg1.hasOwnProperty(&apos;Code&apos;))
    {
    		var orgtype=GetMergedCodeList(arg1.Code);
	    for(var _t=0;_t&lt;orgtype.length;_t++)
	    {
	        organization.addType(CodeableConcept(GetCoding(orgtype[_t])));
	    }	
    }
              
    if(arg1.hasOwnProperty(&apos;Addrs&apos;))
    {
    	organization.setAddress(AddAddressNode(arg1.Addrs));	
    }
    else if(arg1.hasOwnProperty(&apos;Address&apos;))
    {
    		var address=[];
    		address.push(arg1.Address)
    		organization.setAddress(AddAddressNode(address));	
    }

    if(arg1.hasOwnProperty(&apos;Telecoms&apos;))
    {
    	organization.setTelecom(AddTelecomNode(arg1.Telecoms));	
    }
    else if(arg1.hasOwnProperty(&apos;Telecom&apos;))
    {
    	organization.setTelecom(AddTelecomNode(arg1.Telecom));	
    }
    

   	if(arg1.hasOwnProperty(&apos;PlayingEntity&apos;))
   	{
   		
   		for (var _n = 0; _n &lt; arg1.PlayingEntity.Names.length; _n++) 
	    {
	        if(arg1.PlayingEntity.Names[_n].Text!=&apos;&apos;)
	        {
	            organization.setName(arg1.PlayingEntity.Names[_n].Text.trim())
	        }
	    }
   	}
   	else if(arg1.hasOwnProperty(&apos;Names&apos;))
   	{
   		for (var _n = 0; _n &lt; arg1.Names.length; _n++) 
	    {
	        if(arg1.Names[_n].Text!=&apos;&apos;)
	        {
	            organization.setName(arg1.Names[_n].Text.trim())
	        }
	    }
   	}
   	
    

   organization.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(organization))));
     
   
   if(countkey(parser.encodeResourceToString(organization))&gt;2)
   {
   	return organization
   }
         
}     
            
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>dfb876ba-fba0-4978-8d4c-eefbf02ffd8e</id>
            <name>ParticipanttoPatient</name>
            <revision>4</revision>
            <lastModified>
              <time>1667470613628</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function ParticipanttoPatient(arg1)
{
   //takes Participant.ParticipantRole node as input

   importPackage(org.hl7.fhir.r4.model);
   var patient = new org.hl7.fhir.r4.model.Patient();
   var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
   var parser = ctx.newJsonParser();
   


   for(var _id=0;_id&lt;arg1.Ids.length;_id++)
   {
      if(arg1.Ids[_id].Extension!=&apos;&apos;)
      {
         patient.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
      }
        
   }

   
   patient.setAddress(AddAddressNode(arg1.Addrs));
   patient.setTelecom(AddTelecomNode(arg1.Telecoms));

   patient.setName(AddNameNode(arg1.PlayingEntity.Names));
   if(arg1.PlayingEntity.SDTCBirthTime!=null)
   {
      if(arg1.PlayingEntity.SDTCBirthTime.Value!=&apos;&apos;)
      {
         patient.setBirthDate(new Date(parseCCDBirthDate(String(arg1.PlayingEntity.SDTCBirthTime.Value))));  
      }
      
   }
   
   
   patient.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(patient))));
   

   if(countkey(parser.encodeResourceToString(patient))&gt;2)
   {
      
      return patient
   }
   
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>68e8f16a-02bf-4bf6-853a-91b362a7f274</id>
            <name>ParticipanttoPractictioner</name>
            <revision>2</revision>
            <lastModified>
              <time>1667043608864</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function ParticipanttoPractictioner(arg1)
{
   //takes Participants.ParticipantRole node as input


   importPackage(org.hl7.fhir.r4.model);
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();

    var practitioner = new org.hl7.fhir.r4.model.Practitioner();

    for (var _id = 0; _id &lt; arg1.Ids.length; _id++) 
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            practitioner.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }
    }

   practitioner.setAddress(AddAddressNode(arg1.Addrs));
   practitioner.setTelecom(AddTelecomNode(arg1.Telecoms));

   practitioner.setName(AddNameNode(arg1.PlayingEntity.Names));
   
   
   
   practitioner.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(practitioner))));
   

   
   if(countkey(parser.encodeResourceToString(practitioner))&gt;2)
   {
      
      return practitioner
   }
 
   
   

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>20acf23d-05fb-4b65-8730-f012d3cf6a76</id>
            <name>ParticipanttoRelatedPerson</name>
            <revision>4</revision>
            <lastModified>
              <time>1667488232221</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function ParticipanttoRelatedPerson(arg1,patientid)
{
   //takes Participant.ParticipantRole node as input

   importPackage(org.hl7.fhir.r4.model);
   var relatedperson = new org.hl7.fhir.r4.model.RelatedPerson();
   var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
   var parser = ctx.newJsonParser();
   


   for(var _id=0;_id&lt;arg1.Ids.length;_id++)
   {
      if(arg1.Ids[_id].Extension!=&apos;&apos;)
      {
         relatedperson.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
      }
        
   }

   relatedperson.setPatient(new Reference().setReference(patientid));

   if(arg1.hasOwnProperty(&apos;Addrs&apos;))
   {
   	relatedperson.setAddress(AddAddressNode(arg1.Addrs));	
   }
   else if(arg1.hasOwnProperty(&apos;Address&apos;))
   {
   	relatedperson.setAddress(AddAddressNode(arg1.Address));	
   }
   
   relatedperson.setTelecom(AddTelecomNode(arg1.Telecoms));

   if(arg1.hasOwnProperty(&apos;PlayingEntity&apos;))
   {
   	relatedperson.setName(AddNameNode(arg1.PlayingEntity.Names));
   }
   else if(arg1.hasOwnProperty(&apos;Person&apos;))
   {
   	relatedperson.setName(AddNameNode(arg1.Person.Names));
   }
   
   relatedperson.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(relatedperson))));
   

   if(countkey(parser.encodeResourceToString(relatedperson))&gt;3)
   {
      
      return relatedperson
   }
   
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>dbd9787b-a3e1-4a32-acac-4a6e76720e3a</id>
            <name>PayorBundle</name>
            <revision>4</revision>
            <lastModified>
              <time>1669138049361</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function PayorBundle(arg1,text,patientid,bundleId) 
{
   
    
   var obj=JSON.parse(arg1);
   
   if(obj.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=obj.Entries.length;
       bundle.entry=[];
   }
   

   //looping through entries
   for(var _a=0;_a&lt;obj.Entries.length;_a++)
   {
        var record=obj.Entries[_a]
        var temp={};
        
        temp.resource=CoverageResource(record.Act,text,patientid);
		//SavefhirResource(temp.resource,bundleId,obj.Code);
        bundle.entry.push(temp)
   }  

   //logger.info(&apos;PayorBundle-&gt;&apos;+JSON.stringify(bundle)) 
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>c00dda34-9bfe-4d03-acf4-3dca421317a8</id>
            <name>ProcedureBundle</name>
            <revision>9</revision>
            <lastModified>
              <time>1669212315037</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function ProcedureBundle(arg1,text,patientid,bundleId) 
{
   
    
   var obj=JSON.parse(arg1);
   
   if(obj.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=obj.Entries.length;
       bundle.entry=[];
   }
   

   //looping through entries
   for(var _a=0;_a&lt;obj.Entries.length;_a++)
   {
        var record=obj.Entries[_a]
        var temp={};
        
        if(countkey(JSON.stringify(record.Act))&gt;0)
        {
            temp.resource=ProcedureResource(record.Act,text,patientid);    
        }
        else if(countkey(JSON.stringify(record.Procedure))&gt;0)
        {
            temp.resource=ProcedureResource(record.Procedure,text,patientid);    
        }
        else if(countkey(JSON.stringify(record.Observation))&gt;0)
        {
            temp.resource=ProcedureResource(record.Observation,text,patientid);    
        }

        SavefhirResource(temp.resource,bundleId,obj.Code);

        bundle.entry.push(temp)
   }  

   //logger.info(&apos;ProcedureBundle-&gt;&apos;+JSON.stringify(bundle)) 
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>b9b28fe5-409d-4012-9e9b-d9d9b6980433</id>
            <name>ProcedureResource</name>
            <revision>16</revision>
            <lastModified>
              <time>1668953632685</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
function ProcedureResource(arg1,text,patientid)
{
    
    importPackage(org.hl7.fhir.r4.model);
    var procedure = new org.hl7.fhir.r4.model.Procedure();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  

    //logger.info(&apos;ProcedureResource-&gt;&apos;+JSON.stringify(arg1));

    for(var _id=0;_id&lt;arg1.Ids.length;_id++)
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            procedure.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }
        
    }

    if(text!=&apos;&apos; &amp;&amp; GetNarrative(text)!=null)
    {
        procedure.setText(GetNarrative(text))
    }

    procedure.setStatus(Procedure.ProcedureStatus.valueOf(MapProcedureStatus(arg1.StatusCode.Code)))
    
    procedure.setCode(new CodeableConcept().setCoding(GetCodingList(arg1.Code)));
    procedure.setSubject(new Reference().setReference(patientid));    

    var tempdate=GetEffectiveTimeInfo(arg1);

    if(tempdate.startdatetime!=&apos;&apos; &amp;&amp; tempdate.enddatetime!=&apos;&apos;)
    {
      var period=new Period();
      period.setStartElement(new DateTimeType(formatdate(tempdate.startdatetime)));
      period.setEndElement(new DateTimeType(formatdate(tempdate.enddatetime)));
      procedure.setPerformed(period)
    }  
    else if(tempdate.startdatetime!=&apos;&apos;)
    {
        procedure.setPerformed(new DateTimeType(formatdate(tempdate.startdatetime)))
    }

    /Author Block Start/
    var temprecorder=AuthortoPractictionerRole(arg1.Authors[0].AssignedAuthor);
    if(temprecorder!= undefined)
    {
        procedure.addContained(temprecorder);    
        procedure.setRecorder(new Reference().setReference(&apos;#&apos;+new Resource(temprecorder.getId())));
    }

   
    var temprecorderperson=AuthortoPractictioner(arg1.Authors[0].AssignedAuthor);
    if(temprecorderperson!= undefined)
    {
        procedure.addContained(temprecorderperson);
    }
            
    var temprecorderorg=AuthortoOrganization(arg1.Authors[0].AssignedAuthor.Organization);
    if(temprecorderorg!= undefined)
    {
        procedure.addContained(temprecorderorg);
    }

    /Author Block End/


    if(arg1.hasOwnProperty(&apos;Informants&apos;))
    {
        /Informant Block Start/
        var tempasserter=AuthortoPractictionerRole(arg1.Informants[0].AssignedEntity);
        if(tempasserter!= undefined)
        {
            procedure.addContained(tempasserter);    
            procedure.setAsserter(new Reference().setType(&apos;Practitioner&apos;).setReference(&apos;#&apos;+new Resource(tempasserter.getId())));

        }

      
        var tempasserterperson=AuthortoPractictioner(arg1.Informants[0].AssignedEntity);
        if(tempasserterperson!= undefined)
        {
            procedure.addContained(tempasserterperson);
        }
               
        var tempasserterorg=AuthortoOrganization(arg1.Informants[0].AssignedEntity.Organizations[0]);
        if(tempasserterorg!= undefined)
        {
            procedure.addContained(tempasserterorg);
        }
        /Informant Block End/

   }

   if(arg1.hasOwnProperty(&apos;TargetSiteCodes&apos;))
   {
        for(var _t=0;_t&lt;arg1.TargetSiteCodes.length;_t++)
        {
            var target=arg1.TargetSiteCodes[_t];
            procedure.addBodySite(new CodeableConcept().setCoding(GetCodingList(target)));
        }

   }
   

   if(arg1.hasOwnProperty(&apos;Specimens&apos;))
   {
        for(var _s=0;_s&lt;arg1.Specimens.length;_s++)
       {
            var specimen=arg1.Specimens[_s];

            procedure.addExtension().setUrl(&apos;http://hl7.org/fhir/us/core/StructureDefinition/extension-procedure-specimen&apos;).setValue(new CodeableConcept().setCoding(GetCodingList(specimen.SpecimenRole.SpecimenPlayingEntity.Code)));

       }
   }
   

   if(arg1.hasOwnProperty(&apos;MethodCodes&apos;))
   {
        for(var _m=0;_m&lt;arg1.MethodCodes.length;_m++)
        {
            var method=arg1.MethodCodes[_m];
            procedure.addExtension().setUrl(&apos;https://www.hl7.org/fhir/extension-procedure-method.html&apos;).setValue(new CodeableConcept().setCoding(GetCodingList(method)));
        }
   }

   if(arg1.hasOwnProperty(&apos;PriorityCode&apos;))
   {
        procedure.addExtension().setUrl(&apos;https://www.hl7.org/fhir/extension-procedure-priority.html&apos;).setValue(new CodeableConcept().setCoding(GetCodingList(arg1.PriorityCode)));
        
   }
   


    for(var _perf=0;_perf&lt;arg1.Performers.length;_perf++)
    {
        var tempperformer=arg1.Performers[_perf];

        /Performer Block Start/
        var _tempperformer=AuthortoPractictionerRole(tempperformer.AssignedEntity);
        if(_tempperformer!= undefined)
        {
            procedure.addContained(_tempperformer);    
            procedure.addPerformer(new org.hl7.fhir.r4.model.Procedure.ProcedurePerformerComponent().setActor(new Reference().setType(&apos;Practitioner&apos;).setReference(&apos;#&apos;+new Resource(_tempperformer.getId()))));

            
        }

        
        var tempperformerperson=AuthortoPractictioner(tempperformer.AssignedEntity);
        if(tempperformerperson!= undefined)
        {
            procedure.addContained(tempperformerperson);
        }
                
        var tempperformerorg=AuthortoOrganization(tempperformer.AssignedEntity.Organizations[0]);
        if(tempperformerorg!= undefined)
        {
            procedure.addContained(tempperformerorg);
        }

        /Performer Block End/
        
   }

    for(var _i=0;_i&lt;arg1.Participants.length;_i++)
    {
        var tempparticipant1=arg1.Participants[_i];
        if(tempparticipant1.TypeCode.Name==&apos;LOC&apos; &amp;&amp; (tempparticipant1.ParticipantRole.RoleClassRoot.Name==&apos;SDLOC&apos; || tempparticipant1.ParticipantRole.RoleClassRoot.Name==&apos;PLC&apos;))
        {
            var templocation=LocationResource(tempparticipant1.ParticipantRole);
            if(templocation!=undefined)
            {
                procedure.setLocation(new Reference().setType(&apos;Location&apos;).setReference(&apos;#&apos;+new Resource(templocation.getId())));
                procedure.addContained(templocation)
            }
        }

        if(tempparticipant1.TypeCode.Name==&apos;DEV&apos; &amp;&amp; tempparticipant1.ParticipantRole.RoleClassRoot.Name==&apos;MANU&apos;)
        {
            var tempdevice=DeviceResource(tempparticipant1.ParticipantRole,null,patientid);
            if(tempdevice!=undefined)
            {
                procedure.addFocalDevice(new org.hl7.fhir.r4.model.Procedure.ProcedureFocalDeviceComponent().setManipulated(&apos;#&apos;+new Resource(tempdevice.getId())));
                procedure.addContained(tempdevice)
            }
        }
    }




    for(var _er1=0;_er1&lt;arg1.EntryRelationships.length;_er1++)
    {
        er1=arg1.EntryRelationships[_er1];


        if(er1.hasOwnProperty(&apos;Act&apos;))
        {
            if(er1.TypeCode.Name==&apos;SUBJ&apos; &amp;&amp; er1.Act.MoodCode.Name==&apos;INT&apos;)
            {
                if(er1.Act.Text.Text!=&apos;&apos;)
                {
                    procedure.addNote().setText(er1.Act.Text.Text.trim()) ;
                }
                else if(er1.Act.Text.Reference.TEL_URL.Value!=&apos;&apos;)
                {
                    procedure.addNote().setText(er1.Act.Text.Reference.TEL_URL.Value.trim()) ;
                }
            }
        }

        if(er1.hasOwnProperty(&apos;encounter&apos;))
        {
             if(er1.TypeCode.Name==&apos;COMP&apos;)
            {
                if(er1.encounter.Ids[0].Extension!=&apos;&apos;)
                {
                    procedure.setEncounter(new Reference().setReference(&apos;//Encounter?identifier=&apos;+er1.encounter.Ids[0].Extension));    
                }
                
            }
        }

        if(er1.hasOwnProperty(&apos;Observation&apos;))
        {
            if(er1.TypeCode.Name==&apos;RSON&apos;)
            {
                procedure.addReasonCode(new CodeableConcept().setCoding(GetCodingList(er1.Observation.Values[0].CD)))
            }

            if(er1.TypeCode.Name==&apos;COMP&apos;)
            {
                procedure.addComplication(new CodeableConcept().setCoding(GetCodingList(er1.Observation.Values[0].CD)))
            }
        }
    }

    procedure.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(procedure))));
 //   var oProcedure=JSON.parse(parser.encodeResourceToString(procedure));
    //logger.info(&apos;procedureResource-&gt;&apos;+parser.encodeResourceToString(procedure));
   


    return procedure;
    

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>623e1bf0-dc1b-4402-8dc2-3c71563551ab</id>
            <name>ResultBundle</name>
            <revision>7</revision>
            <lastModified>
              <time>1669212315736</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function ResultBundle(arg1,text,patientid,bundleId) 
{
   
    
   var obj=JSON.parse(arg1);
   
   if(obj.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=obj.Entries.length;
       bundle.entry=[];
   }
   

   //looping through entries
   for(var _a=0;_a&lt;obj.Entries.length;_a++)
   {
        var record=obj.Entries[_a]
        var temp={};
        if(record.hasOwnProperty(&apos;Organizer&apos;))
        {
        	if(record.Organizer!=null)
        	{&#xd;        		temp.resource=ResultResource(record.Organizer,text,patientid,obj.Code);    	
        		bundle.entry.push(temp)	;

        		SavefhirResource(temp.resource,bundleId,obj.Code);
        	}&#xd;        	
        }
        
        
   }  

//   logger.info(&apos;ResultBundle-&gt;&apos;+JSON.stringify(bundle)) 

   return bundle;
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>bb55803a-fefe-4bb1-b9dc-aabbd5db0033</id>
            <name>ResultResource</name>
            <revision>16</revision>
            <lastModified>
              <time>1669135774912</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function ResultResource(arg1,txt,patientid)
{
    importPackage(org.hl7.fhir.r4.model);
    var diagnosticreport = new org.hl7.fhir.r4.model.DiagnosticReport();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  
   
    for(var _id=0;_id&lt;arg1.Ids.length;_id++)
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            diagnosticreport.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }  
    }

    /*
    if(txt!=&apos;&apos; &amp;&amp; GetNarrative(txt)!=null)
    {
        diagnosticreport.setText(GetNarrative(txt))
    }
*/
    diagnosticreport.setStatus(DiagnosticReport.DiagnosticReportStatus.valueOf(MapResultStatus(arg1.StatusCode.Code)));

    diagnosticreport.setCode(new CodeableConcept().setCoding(GetCodingList(arg1.Code)));
    diagnosticreport.setSubject(new Reference().setReference(patientid));    

    var tempdate=GetEffectiveTimeInfo(arg1);
    if(tempdate.startdatetime!=&apos;&apos; &amp;&amp; tempdate.enddatetime!=&apos;&apos;)
    {
        diagnosticreport.setEffective(new Period().setStartElement(new DateTimeType(formatdate(tempdate.startdatetime))).setEndElement(new DateTimeType(formatdate(tempdate.enddatetime))))
    }
    else if(tempdate.startdatetime!=&apos;&apos;)
    {
        diagnosticreport.setEffective(new DateTimeType(formatdate(tempdate.startdatetime)));
    }

    if(arg1.hasOwnProperty(&apos;Specimens&apos;))
    {
        for(var _s=0;_s&lt;arg1.Specimens.length;_s++)
        {
            var tempspecimen=arg1.Specimens[_s];

            var tempspecimen=SpecimenResource(tempspecimen.SpecimenRole);
            if(tempspecimen!=undefined)
            {
                diagnosticreport.addSpecimen(new Reference().setReference(&apos;#&apos;+new Resource(tempspecimen.getId())));  
                diagnosticreport.addContained(tempspecimen)

            }
            
        }    
    }

    if(arg1.hasOwnProperty(&apos;Informants&apos;))
    {
      if(arg1.Informants[0].AssignedEntity.Organizations.length&gt;0)
      {
        if(arg1.Informants[0].AssignedEntity.Organizations[0].Names.length&gt;0)
        {
            if(arg1.Informants[0].AssignedEntity.Organizations[0].Names[0].Text!=&apos;&apos;)
            {
                diagnosticreport.addPerformer(new Reference().setDisplay(arg1.Informants[0].AssignedEntity.Organizations[0].Names[0].Text.trim()))
            }
        }
      }

    }

    
   
   if(arg1.hasOwnProperty(&apos;Components&apos;))
   {
        for(var _comp=0;_comp&lt;arg1.Components.length&gt;0;_comp++)
       {
          var tempcomp=arg1.Components[_comp];
          if(tempcomp.hasOwnProperty(&apos;Observation&apos;))
          {
           
            var tempcomponent=VitalComponent(tempcomp.Observation,patientid);
            if(tempcomponent!=undefined)
            {

                var observationid=new Reference(&apos;#&apos;+new Resource(tempcomponent.getId()));
                diagnosticreport.addResult(observationid);
                diagnosticreport.addContained(tempcomponent)    
            } 
            
          }
          
     
       }

 
   }
   
    	diagnosticreport.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(diagnosticreport))));
 //   var oDiagnosticReport=JSON.parse(parser.encodeResourceToString(diagnosticreport));
    //logger.info(&apos;Result Resource-&gt;&apos;+parser.encodeResourceToString(diagnosticreport));

    if(countkey(parser.encodeResourceToString(diagnosticreport))&gt;4)
    {
        //SavefhirResource(diagnosticreport,bundleid,section)    ;
        return diagnosticreport;
    }
    
//    return diagnosticreport;
      

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>3643de2d-d60d-40d4-90a4-f282f3f1dff2</id>
            <name>SavefhirResource</name>
            <revision>53</revision>
            <lastModified>
              <time>1668251838755</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function SavefhirResource(resource,bundleId,section)
{
	
	var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    	var parser = ctx.newJsonParser();  
   	var savedbConn;

	var resourceType=resource.getResourceType();
	var resourceId=resource.getId();
	
	//var resource=parser.encodeResourceToString(resource);
	//logger.info(&apos;SavefhirResource-:resource-&gt;&apos;+resource);
	
	var resource=JSON.parse(JSON.stringify(parser.encodeResourceToString(resource)).replace(/&apos;/g,&quot;\\\\&apos;&quot;));
	//logger.info(&apos;SavefhirResource-:resource-&gt;&apos;+resource);
	
	

   try 
   {
        savedbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.cj.jdbc.Driver&apos;,&apos;jdbc:mysql://localhost:3306/genzeon&apos;,&apos;root&apos;,&apos;test&apos;);

       // var sql=&quot;insert into fhirresourcedata(ResourceData,resourceType,resourceId,SourceDataId) values(&apos;&quot;+resource+&quot;&apos;,&apos;&quot;+resourceType+&quot;&apos;,&apos;&quot;+resourceId+&quot;&apos;,(select distinct SourceDataId from sourcedata join requestinfo on requestinfo.requestinfoid=sourcedata.requestinfoid where bundleId=&apos;&quot;+bundleId+&quot;&apos;))&quot;;
        var sql=&quot;insert into fhirresourcedata(ResourceData,resourceType,resourceId,SourceDataId) values(&apos;&quot;+resource+&quot;&apos;,&apos;&quot;+resourceType+&quot;&apos;,&apos;&quot;+resourceId+&quot;&apos;,(select distinct SourceDataId from sourcedata join requestinfo on requestinfo.requestinfoid=sourcedata.requestinfoid where bundleId=&apos;&quot;+bundleId+&quot;&apos;)) ON DUPLICATE KEY UPDATE ResourceData = &apos;&quot;+resource+&quot;&apos;;&quot; 
       // logger.info(&apos;SavefhirResource-:sql-&gt;&apos;+sql);
        var result = savedbConn.executeUpdateAndGetGeneratedKeys(sql);
        
        while(result.next())
        {
        	
        	var _fhirresourcedataid=result.getInt(1)
        }
        //

      if(section!=undefined &amp;&amp; section!=null &amp;&amp; _fhirresourcedataid!=undefined)
      {
        var sql=&quot;insert IGNORE into ccdsection(fhirresourcedataid,display,code,codesystem,codesystemname) values(&apos;&quot;+_fhirresourcedataid+&quot;&apos;,&apos;&quot;+section.DisplayName+&quot;&apos;,&apos;&quot;+section.Code+&quot;&apos;,&apos;&quot;+section.CodeSystem+&quot;&apos;,&apos;&quot;+section.CodeSystemName+&quot;&apos;)&quot;;
     //   logger.info(&apos;SavefhirResource-:sql-&gt;&apos;+sql);
        result = savedbConn.executeUpdate(sql);        
      }

   } 
   finally 
   {
      if (savedbConn) 
      { 
         savedbConn.close();
      }
   }

}

 </code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>08314791-42c0-458f-8b5a-cc49019f8bf2</id>
            <name>SocialHistoryBundle</name>
            <revision>9</revision>
            <lastModified>
              <time>1669212316470</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function SocialHistoryBundle(arg1,text,patientid,bundleid) 
{
   
    
   var obj=JSON.parse(arg1);
   
   if(obj.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=obj.Entries.length;
       bundle.entry=[];
   }
   

   //looping through entries
   for(var _a=0;_a&lt;obj.Entries.length;_a++)
   {
        var record=obj.Entries[_a]
        var temp={};
        
        temp.resource=ObservationResource(record.Observation,text,patientid,obj.Code);    
        
       SavefhirResource(temp.resource,bundleid,obj.Code);

        bundle.entry.push(temp)
   }  

   //logger.info(&apos;SocialHistoryBundle-&gt;&apos;+JSON.stringify(bundle)) 
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>49c09f37-1021-4fba-91cf-b2831e762f84</id>
            <name>SpecimenResource</name>
            <revision>2</revision>
            <lastModified>
              <time>1667996678924</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function SpecimenResource(arg1)
{
   //Takes input from SpecimenRole Node
   importPackage(org.hl7.fhir.r4.model);
   var specimen = new org.hl7.fhir.r4.model.Specimen();
   var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
   var parser = ctx.newJsonParser();

   for(var _id=0;_id&lt;arg1.Ids.length;_id++)
   {
      if(arg1.Ids[_id].Extension!=&apos;&apos;)
      {
         specimen.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
      }
   }

   if(GetCodingList(arg1.SpecimenPlayingEntity.Code).length&gt;0)
   {
      specimen.setType(new CodeableConcept().setCoding(GetCodingList(arg1.SpecimenPlayingEntity.Code)));   
   }
   

   if(arg1.SpecimenPlayingEntity.hasOwnProperty(&apos;Quantities&apos;))
   {
      if(arg1.SpecimenPlayingEntity.Quantities.length&gt;0)
      {
         if(arg1.SpecimenPlayingEntity.Quantities[0].Value!=&apos;&apos;)
         {
            specimen.setCollection(new org.hl7.fhir.r4.model.Specimen.SpecimenCollectionComponent().setQuantity(GetQuantity(arg1.SpecimenPlayingEntity.Quantities[0])));         
         }
      }
   }

   specimen.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(specimen))));
   
   
   if(countkey(parser.encodeResourceToString(specimen))&gt;2)
   {
      return specimen
   }
   
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>7604e8c3-d46c-461e-949c-82f992cf0c3b</id>
            <name>VitalBundle</name>
            <revision>8</revision>
            <lastModified>
              <time>1669212317837</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
    Modify the description here. Modify the function name and parameters as needed. One function per
    template is recommended; create a new code template for each new function.

    @param {String} arg1 - arg1 description
    @return {String} return description
*/
/**
   Modify the description here. Modify the function name and parameters as needed. One function per
   template is recommended; create a new code template for each new function.

   @param {String} arg1 - arg1 description
   @return {String} return description
*/
function VitalBundle(arg1,text,patientid,bundleId) 
{
   
    
   var obj=JSON.parse(arg1);
   
   if(obj.Entries.length&gt;0)
   {
      var bundle={};
       bundle.resourceType=&apos;Bundle&apos;;
       bundle.type=&apos;batch&apos;;
       bundle.timestamp= DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;);
       bundle.total=obj.Entries.length;
       bundle.entry=[];
   }
   

   //looping through entries
   for(var _a=0;_a&lt;obj.Entries.length;_a++)
   {
        var record=obj.Entries[_a]
        var temp={};
        
        temp.resource=VitalResource(record.Organizer,text,patientid,obj.Code);    
        bundle.entry.push(temp);
       SavefhirResource(temp.resource,bundleId,obj.Code);
   }  

   //logger.info(&apos;VitalBundle-&gt;&apos;+JSON.stringify(bundle)) 
      
}
    
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>9eacf259-f72c-4aeb-9c1a-3d22b3c56a30</id>
            <name>VitalComponent</name>
            <revision>21</revision>
            <lastModified>
              <time>1668247095282</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function VitalComponent(arg1,patientid)
{
   importPackage(org.hl7.fhir.r4.model);
    var observation = new org.hl7.fhir.r4.model.Observation();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  
   
    for(var _id=0;_id&lt;arg1.Ids.length;_id++)
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            observation.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }  
    }

    

   observation.setStatus(Observation.ObservationStatus.FINAL);

 
   
   //logger.info(&apos;ObservationResource 2&apos;);
   observation.setCode(new CodeableConcept().setCoding(GetCodingList(arg1.Code)));
   observation.setSubject(new Reference().setReference(patientid));    

   var tempdate=GetEffectiveTimeInfo(arg1);
   //logger.info(&apos;VitalComponent-&gt;&apos;+JSON.stringify(tempdate))
   if(tempdate.startdatetime!=&apos;&apos; &amp;&amp; tempdate.enddatetime!=&apos;&apos;)
   {
      observation.setEffective(new Period().setStartElement(new DateTimeType(formatdate(tempdate.startdatetime))).setEndElement(new DateTimeType(formatdate(tempdate.enddatetime))))
   }
   else if(tempdate.startdatetime!=&apos;&apos;)
    {
        observation.setEffective(new DateTimeType(formatdate(tempdate.startdatetime)));
    }


   if(arg1.hasOwnProperty(&apos;Values&apos;)) 
   {
      for(var _v=0;_v&lt;arg1.Values.length;_v++)
      {
         observation.setValue(GetValueNode(arg1.Values[_v]));      
      }
      
   }
   
    
    var component=org.hl7.fhir.r4.model.Observation.ObservationComponentComponent();

    if(arg1.hasOwnProperty(&apos;InterpretationCode&apos;))
    {
        for(var _i=0;_i&lt;arg1.InterpretationCode.length;_i++)
        {
            var tempinterpretation=arg1.InterpretationCode[_i];
              
            if(GetCodingList(tempinterpretation).length&gt;0)
            {
                component.addInterpretation(new CodeableConcept().setCoding(GetCodingList(tempinterpretation)))
            }
        }
            
    }


    if(arg1.hasOwnProperty(&apos;RefrenceRanges&apos;))
    {  
        for(var _r=0;_r&lt;arg1.RefrenceRanges.length;_r++)
        {
            var temprefrange=arg1.RefrenceRanges[_r];
            var referencerange=new org.hl7.fhir.r4.model.Observation.ObservationReferenceRangeComponent();

            if(temprefrange.ObservationRange.hasOwnProperty(&apos;Text&apos;))
            {
                if(temprefrange.ObservationRange.Text.Text!=&apos;&apos;)
                {
                    referencerange.setText(temprefrange.ObservationRange.Text.Text.trim());  
                }
                else if(temprefrange.ObservationRange.Text.hasOwnProperty(&apos;Reference&apos;))
                {
                    if(temprefrange.ObservationRange.Text.Reference.TEL_URL.Value!=&apos;&apos;)
                    {
                        referencerange.setText(temprefrange.ObservationRange.Text.Reference.TEL_URL.Value.trim());
                    }
                }

                if(temprefrange.ObservationRange.hasOwnProperty(&apos;ANY&apos;))
                {
                    referencerange.setLow(GetQuantity(temprefrange.ObservationRange.ANY.IVL_PQ.Low.PQ));
                    referencerange.setHigh(GetQuantity(temprefrange.ObservationRange.ANY.IVL_PQ.High.PQ));    
                }
                
                  
            }

        }
    }
   
    if(arg1.hasOwnProperty(&apos;Informants&apos;))
    {
      if(arg1.Informants[0].AssignedEntity.Organizations.length&gt;0)
      {
        if(arg1.Informants[0].AssignedEntity.Organizations[0].Names.length&gt;0)
        {
            if(arg1.Informants[0].AssignedEntity.Organizations[0].Names[0].Text!=&apos;&apos;)
            {
                observation.addPerformer(new Reference().setDisplay(arg1.Informants[0].AssignedEntity.Organizations[0].Names[0].Text.trim()))
            }
        }
      }

    }


    if(component!=undefined)
    {
        observation.addComponent(component);    
    }

    if(referencerange!=undefined)
    {
        observation.addReferenceRange(referencerange);    
    }
    
    


    for(var _er1=0;_er1&lt;arg1.EntryRelationships.length;_er1++)
    {
        var er1=arg1.EntryRelationships[_er1];

         if(er1.hasOwnProperty(&apos;encounter&apos;))
         {
             if(er1.TypeCode.Name==&apos;COMP&apos;)
            {
                if(er1.encounter.Ids[0].Extension!=&apos;&apos;)
                {
                    observation.setEncounter(new Reference().setReference(&apos;//Encounter?identifier=&apos;+er1.encounter.Ids[0].Extension));    
                }
                
            }
         }

         if(er1.hasOwnProperty(&apos;Act&apos;))
         {   
            //Patient Instruction
            if(er1.TypeCode.Name==&apos;SUBJ&apos;)
            {
                if(er1.Act.Text.Text!=&apos;&apos;)
                {
                  observation.addNote().setText(er1.Act.Text.Text.trim()) ;
                }
                else if(er1.Act.Text.Reference.TEL_URL.Value!=&apos;&apos;)
                {
                  observation.addNote().setText(er1.Act.Text.Reference.TEL_URL.Value.trim()) ;
                }
            }
         }



    }
  


   observation.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(observation))));
   if(countkey(parser.encodeResourceToString(observation))&gt;2)
   {
    
        return observation
   }

}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>be554cb7-0d13-4069-ab40-4c2ac5ac4bb2</id>
            <name>VitalResource</name>
            <revision>17</revision>
            <lastModified>
              <time>1668946917191</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function VitalResource(arg1,txt,patientid)
{
    importPackage(org.hl7.fhir.r4.model);
    var observation = new org.hl7.fhir.r4.model.Observation();
    var ctx = Packages.ca.uhn.fhir.context.FhirContext.forR4();
    var parser = ctx.newJsonParser();  
   
    for(var _id=0;_id&lt;arg1.Ids.length;_id++)
    {
        if(arg1.Ids[_id].Extension!=&apos;&apos;)
        {
            observation.addIdentifier().setSystem(GetSystem(arg1.Ids[_id].Root)).setValue(arg1.Ids[_id].Extension);   
        }  
    }

    if(txt!=&apos;&apos; &amp;&amp; GetNarrative(txt)!=null)
    {
        observation.setText(GetNarrative(txt))
    }

    observation.setStatus(Observation.ObservationStatus.FINAL);

   
    observation.addCategory(new CodeableConcept().setCoding(GetCodingList(arg1.Code)));
   
   
    observation.setCode(new CodeableConcept().setCoding(GetCodingList(arg1.Code)));
    observation.setSubject(new Reference().setReference(patientid));    

    var tempdate=GetEffectiveTimeInfo(arg1);
    if(tempdate.startdatetime!=&apos;&apos; &amp;&amp; tempdate.enddatetime!=&apos;&apos;)
    {
        observation.setEffective(new Period().setStartElement(new DateTimeType(formatdate(tempdate.startdatetime))).setEndElement(new DateTimeType(formatdate(tempdate.enddatetime))))
    }
    else if(tempdate.startdatetime!=&apos;&apos;)
    {
        observation.setEffective(new DateTimeType(formatdate(tempdate.startdatetime)));
    }

   
   
   for(var _comp=0;_comp&lt;arg1.Components.length&gt;0;_comp++)
   {
      var tempcomp=arg1.Components[_comp];
      if(tempcomp.hasOwnProperty(&apos;Observation&apos;))
      {
       
        var tempcomponent=VitalComponent(tempcomp.Observation,patientid);
        if(tempcomponent!=undefined)
        {

            var observationid=new Reference(&apos;#&apos;+new Resource(tempcomponent.getId()));
            observation.addHasMember(observationid);
            observation.addContained(tempcomponent)    
        } 
        
      }
      
 
   }


    observation.setId(hex_sha256(JSON.stringify(parser.encodeResourceToString(observation))));
 //   var oObservation=JSON.parse(parser.encodeResourceToString(observation));
    //logger.info(&apos;ObservationResource-&gt;&apos;+parser.encodeResourceToString(observation));

    return observation;
   

}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="3.12.0">
        <id>2f9cc778-9130-4fdd-9f2d-b2d666268c89</id>
        <name>Library 1bbb</name>
        <revision>18</revision>
        <lastModified>
          <time>1669130240396</time>
          <timezone>Asia/Calcutta</timezone>
        </lastModified>
        <description>This library was added upon migration to version 3.3.0. It includes all pre-existing
code templates, and is set to be included on all pre-existing and new channels.

You should create your own new libraries and assign code templates to them as you
see fit. You should also link libraries to specific channels, so that you&apos;re not
necessarily including all code templates on all channels all the time.</description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>22bf3404-3d70-4f77-991c-d55987c7fceb</string>
          <string>aba9f80e-e0c2-4b14-b365-9f5f416d51e5</string>
          <string>6485566a-e026-44c1-98cf-f7c62a948022</string>
          <string>fe590af0-6de5-4498-92e7-f535c560d9fc</string>
          <string>19147717-a61f-4726-b391-306220d5fa43</string>
        </enabledChannelIds>
        <disabledChannelIds>
          <string>268c87ee-b6cc-435b-a498-3484197be2ca</string>
          <string>abf8a28b-b96e-439d-ae18-e79e27a26915</string>
          <string>efd79df6-4275-42e1-b342-4c186eb0dccc</string>
          <string>264cf267-3368-4571-87d8-c0562c3a6912</string>
          <string>cdc68cb2-21f4-447e-b7b9-a0d120a91aed</string>
          <string>40a447a8-89f7-494c-b224-5880c7e86c73</string>
          <string>617546b5-34e3-4e61-9b1d-5c40909c3787</string>
          <string>92472400-a82a-4805-b3fe-f92b5980aa2f</string>
          <string>b9b54c9b-eda4-43c9-8109-fa41bd6cc8fb</string>
          <string>601011b3-f0e9-4bbc-9cf4-dfa658c79e09</string>
          <string>dd76bbd8-85b9-4718-b8e2-bdcbb018a611</string>
          <string>8199c8b2-befa-4924-a390-526c4f3b1d31</string>
        </disabledChannelIds>
        <codeTemplates/>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="3.12.0">
        <id>285e28ea-e844-4158-97a3-d0ee577778ac</id>
        <name>utilityfunctions</name>
        <revision>26</revision>
        <lastModified>
          <time>1669130240389</time>
          <timezone>Asia/Calcutta</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>false</includeNewChannels>
        <enabledChannelIds>
          <string>268c87ee-b6cc-435b-a498-3484197be2ca</string>
          <string>abf8a28b-b96e-439d-ae18-e79e27a26915</string>
          <string>efd79df6-4275-42e1-b342-4c186eb0dccc</string>
          <string>264cf267-3368-4571-87d8-c0562c3a6912</string>
          <string>cdc68cb2-21f4-447e-b7b9-a0d120a91aed</string>
          <string>40a447a8-89f7-494c-b224-5880c7e86c73</string>
          <string>aba9f80e-e0c2-4b14-b365-9f5f416d51e5</string>
          <string>6485566a-e026-44c1-98cf-f7c62a948022</string>
          <string>617546b5-34e3-4e61-9b1d-5c40909c3787</string>
          <string>92472400-a82a-4805-b3fe-f92b5980aa2f</string>
          <string>b9b54c9b-eda4-43c9-8109-fa41bd6cc8fb</string>
          <string>601011b3-f0e9-4bbc-9cf4-dfa658c79e09</string>
          <string>dd76bbd8-85b9-4718-b8e2-bdcbb018a611</string>
          <string>8199c8b2-befa-4924-a390-526c4f3b1d31</string>
        </enabledChannelIds>
        <disabledChannelIds>
          <string>41380607-1411-4b46-a8a7-460267132a58</string>
          <string>7ce93031-5a1b-421b-bc6f-8de76ee2cba1</string>
          <string>5220c4fd-f531-43ff-b9ce-27a4cc8bfa52</string>
          <string>a8209ef7-0a7f-440b-9cdf-8cf0b7b1ab3d</string>
          <string>33599d3c-8359-4fab-b161-9d99484c8247</string>
          <string>c51960a1-1265-4d64-8c3f-5db07bb89f7c</string>
          <string>02ac2b89-fb25-4fdb-b91f-d3db2de6f3d6</string>
          <string>abdefaaf-d511-480e-9e7f-beeb9c320b63</string>
          <string>301fad6a-2981-4e1d-868c-8dc98f755f2d</string>
          <string>e77c34d0-0846-4d33-8455-6032d1c8fbc8</string>
          <string>beba7b91-73a8-4056-8d22-ecd0109d8675</string>
        </disabledChannelIds>
        <codeTemplates>
          <codeTemplate version="3.12.0">
            <id>6375dbd4-5726-444c-a676-1d70b4d79362</id>
            <name>checkdata</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998804</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function checkdata(arg1) {
	
   var chk=0;
	if(arg1!=null &amp;&amp; arg1!=&apos;&apos; &amp;&amp; arg1!= undefined)
   {
      chk=1;
   }

      return chk;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>3d9a2e3c-a565-493f-8555-6c049b744904</id>
            <name>clean</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999418</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
 
function clean(obj) 
{
  for (var propName in obj) 
  {
    if (obj[propName] === null || obj[propName] === undefined || obj[propName]==&apos;&apos;) 
    {
      delete obj[propName];
    }
  }
  return obj
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>a91ad874-adde-466e-b80f-c160fd052bf5</id>
            <name>countkey</name>
            <revision>22</revision>
            <lastModified>
              <time>1666605911309</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function countkey(arg1) {
	// TODO: Enter code here
	var count = 0;
	var str=JSON.parse(arg1)
	//logger.info(&apos;countkey-&gt;&apos;+Object.keys(str).length);
	
	

for(var _c=0;_c&lt;Object.keys(str).length;_c++) {

    // increase the count
    //logger.info(&apos;countkey-&gt;&apos;+count+&apos;:&apos;+arg1);
    ++count;
}
//logger.info(&apos;countkey-&gt;&apos;+count);

 return count;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>49812c1b-585d-4c89-a1d2-cc45a171abe4</id>
            <name>datehandler</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999526</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function datehandler(arg1)
{
	var dateobj={};
	
	
	if(arg1!=&apos;&apos;)
	{
		//logger.info(&apos;datehandler-&gt;&apos;+arg1+&apos;:&apos;+String(arg1).length);
		if(String(arg1).length&gt;=4)
		{
			//logger.info(&apos;datehandler-&gt;&apos;+arg1+&apos;:&apos;+arg1.substr(4,2)+&apos;:&apos;+arg1.substr(6,2));
			var year=arg1.substr(0,4);
			var month=arg1.substr(4,2)
			var day=arg1.substr(6,2);
			var datobj=new Date(year,month,day);
			
			
			
			if((month&lt;=12 &amp;&amp; month&gt;0)&amp;&amp;(day&gt;0 &amp;&amp; day&lt;=31))
			{
				var temp=stripTZ(arg1);
				
				dateobj.date=temp[0];
				//logger.info(&apos;datehandler stripTZ op-&gt;&apos;+dateobj.date);
				dateobj.date=zeropadding(&apos;00000000000000&apos;,dateobj.date,&apos;&apos;);
				//logger.info(&apos;Date Handler valid-&gt;&apos;+datobj+&apos;/&apos;+isValidDate(dateobj.date));
				if(isValidDate(dateobj.date))
				{
					dateobj.date=dateobj.date;	
				}
				else
				{
					dateobj.date=&apos;00000000000000&apos;;
				}
					
				dateobj.timezone=temp[1];
			}
			else
			{
				dateobj.date=&apos;00000000000000&apos;;
				dateobj.timezone=&apos;&apos;;

			}
		}
		else
		{
			dateobj.date=&apos;00000000000000&apos;;
			dateobj.timezone=&apos;&apos;;
			
		}
	}
	else
	{

		dateobj.date=&apos;00000000000000&apos;
		dateobj.timezone=&apos;&apos;;
	}

	//logger.info(&apos;datehandler-&gt;&apos;+arg1+&apos;:&apos;+JSON.stringify(dateobj));
	return dateobj;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>dd2a302e-186c-476e-a168-245acbfb0907</id>
            <name>formatdate</name>
            <revision>22</revision>
            <lastModified>
              <time>1668949535690</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function formatdate(arg1) {
	// TODO: Enter code here
	//logger.info(&apos;formatdate-&gt;&apos;+arg1);
	var arg1=String(arg1);
	if(arg1.length==19 &amp;&amp; (arg1.includes(&apos;-&apos;) || arg1.includes(&apos;+&apos;)))
	{
		var date=arg1.substr(0,8);
		
		var time=arg1.substr(8,6);
		
		var timezone=arg1.substr(15,4);

		if(arg1.includes(&apos;-&apos;))
		{
			var operation=&apos;-&apos;
		}
		else
		{
			var operation=&apos;+&apos;
		}
		
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, date)+&apos;T&apos;+DateUtil.convertDate(&quot;HHmmss&quot;, &quot;HH:mm:ss&quot;, time)+operation+DateUtil.convertDate(&quot;HHmm&quot;, &quot;HH:mm&quot;, timezone);
		
	}
	else if(arg1.length==17 &amp;&amp; (arg1.includes(&apos;-&apos;) || arg1.includes(&apos;+&apos;)))
	{
		var date=arg1.substr(0,8);
		
		var time=arg1.substr(8,4)+&apos;00&apos;;
		
		var timezone=arg1.substr(13,4);

		if(arg1.includes(&apos;-&apos;))
		{
			var operation=&apos;-&apos;
		}
		else
		{
			var operation=&apos;+&apos;
		}
		
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, date)+&apos;T&apos;+DateUtil.convertDate(&quot;HHmmss&quot;, &quot;HH:mm:ss&quot;, time)+operation+DateUtil.convertDate(&quot;HHmm&quot;, &quot;HH:mm&quot;, timezone);
		
	}
	else if(arg1.length==8)
	{
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, arg1);
	}
	else	if(arg1.length==14)
	{
		var date=arg1.substr(0,8);
		
		var time=arg1.substr(8,6);
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, date)+&apos;T&apos;+DateUtil.convertDate(&quot;HHmmss&quot;, &quot;HH:mm:ss&quot;, time);
		
	}
	else	if(arg1.length==12)
	{
		var date=arg1.substr(0,8);
		
		var time=arg1.substr(8,4);
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, date)+&apos;T&apos;+DateUtil.convertDate(&quot;HHmmss&quot;, &quot;HH:mm:ss&quot;, time+&apos;00&apos;);
		
	}
	else	if(arg1.length==6)
	{
		
		return DateUtil.convertDate(&quot;yyyyMM&quot;, &quot;yyyy-MM&quot;, arg1);
		
	}
	else	if(arg1.length==4)
	{
		
		return DateUtil.convertDate(&quot;yyyy&quot;, &quot;yyyy&quot;, arg1);
		
	}
}



function parseCCDBirthDate(str)
{
	var str=String(str);
	if(str.length&gt;=8)
	{
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, str.substr(0,8));
	}

	if(str.length&gt;5 &amp;&amp; str.length&lt;8)
	{
		return DateUtil.convertDate(&quot;yyyyMM&quot;, &quot;yyyy-MM-dd&quot;, str.substr(0,6));
	}

	if(str.length&lt;=5)
	{
		return str.substr(0,4);
	}
	
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>fe69c018-672d-4f2d-b998-b257360b8aae</id>
            <name>GetAnyTypeFeatureMap</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307994710</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetAnyTypeFeatureMap(arg1)
{
	var text2=[];
	var ct=0;
	var fmlen=arg1.AnyTypeFeatureMap.length;
	logger.info(&apos;GetAnyTypeFeatureMap ct-&gt;&apos;+ct);
	logger.info(&apos;GetAnyTypeFeatureMap text2-&gt;&apos;+text2);
	logger.info(&apos;GetAnyTypeFeatureMap fmlen-&gt;&apos;+fmlen);

	for(s=0;s&lt;fmlen;s++)
	{
		var s1=arg1.AnyTypeFeatureMap[s];
		logger.info(&apos;GetAnyTypeFeatureMap s-&gt;&apos;+s);
		if(s1.hasOwnProperty(&apos;AnyTypeFeatureMap&apos;))
		{
			if(s1.AnyTypeFeatureMap.length&gt;0)
			{
				text2[ct]=GetAnyTypeFeatureMap(s1);
				ct=ct+1;
				logger.info(&apos;In Recursive GetAnyTypeFeatureMap ct-&gt;&apos;+ct+&apos;:&apos;+s);
				logger.info(&apos;In Recursive GetAnyTypeFeatureMap text2-&gt;&apos;+text2);

			}
		}
		else if(s1.hasOwnProperty(&apos;value&apos;))
		{
			text2[ct]=s1.value;
			ct=ct+1;
			logger.info(&apos;In GetAnyTypeFeatureMap ct-&gt;&apos;+ct+&apos;:&apos;+s);
			logger.info(&apos;In GetAnyTypeFeatureMap text2-&gt;&apos;+text2);

		}
		else
		{
			//do nothing
		}
		
	}

	return text2;

}

</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>3bdf50d4-031e-4d56-a92e-fd0a7c7eb9df</id>
            <name>GetAuthorid</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996483</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetAuthorid(arg1)
{
	//logger.info(&apos;GetAuthorid-&gt;len&apos;+arg1.length)
	if(arg1.length&gt;0)
	{
		var authorid=saveauthor(JSON.stringify(arg1));
		var _auth=authorid[0];
		//logger.info(&apos;GetAuthorid1-&gt;&apos;+authorid);
		//logger.info(&apos;GetAuthorid2-&gt;&apos;+_auth);
		if(_auth==undefined)
		{
			_auth=0
		}
		//logger.info(&apos;GetAuthorid3-&gt;&apos;+_auth);
	}
	else
	{
		var _auth=0;
	}
	
	return _auth;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>acf98c74-87d0-4568-b198-740c0e2df45d</id>
            <name>Getcareteamid</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307995856</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function Getcareteamid(arg1)
{

	if(arg1.length&gt;0)
	{
		var ctid=savecareteam(arg1);
		var _ctid=ctid[0];
	}
	else
	{
		var _ctid=0;
	}
	
	return _ctid;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>2e896b30-cd62-4413-a3f6-216b603dc0b5</id>
            <name>GetClinakosId</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999997</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetClinakosId() 
{
	var filename=sourceMap.get(&apos;originalFilename&apos;);
	var n=filename.lastIndexOf(&apos;^&apos;);
	var id=filename.substring(n + 1);
	id=id.replace(&apos;xml&apos;,&apos;&apos;);

	if(id&gt;0)
	{
		return id;
	}
	else
	{
		return 0;
	}
	
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>6dfbb895-7bb6-477d-8cb5-6f24325e75dd</id>
            <name>GetEffectiveTimeInfo</name>
            <revision>3</revision>
            <lastModified>
              <time>1667155719716</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetEffectiveTimeInfo(arg1)
{
	var obj={};
	
	obj.startdatetime=&apos;&apos;;
	obj.enddatetime=&apos;&apos;;
	obj.frequency=&apos;&apos;;
	obj.frequencyunit=&apos;&apos;;
	
	if(arg1.hasOwnProperty(&apos;EffectiveTimes&apos;))
	{

		var tempdate=GetTimeandFrequency(arg1.EffectiveTimes);
		obj.startdatetime=tempdate.startdate;
		obj.enddatetime=tempdate.enddate;
		obj.frequency=tempdate.frequency;
		obj.frequencyunit=tempdate.frequencyunit;
		//logger.info(&apos;GetEffectiveTimeInfo:obj.enddatetime-&gt;&apos;+obj.enddatetime)
	}
	else if(arg1.hasOwnProperty(&apos;EffectiveTime&apos;))
	{
		if(arg1.EffectiveTime.Low.TS.Value!=&apos;&apos; || arg1.EffectiveTime.High.TS.Value!=&apos;&apos;)
		{
			obj.startdatetime=arg1.EffectiveTime.Low.TS.Value
			obj.enddatetime=arg1.EffectiveTime.High.TS.Value
		}
		else
		{
			obj.startdatetime=arg1.EffectiveTime.Value.Value;
			//logger.info(&apos;GetEffectiveTimeninfo startdatetime -&gt;&apos;+arg1.EffectiveTime.Value.Value);
		}
	}

	return obj;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>d2a8b181-1e38-4b4d-846e-51cc8c680280</id>
            <name>GetHashValue</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996279</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>

function GetHashValue(data)
{
	var hashingFunction = function(string) {
	    return hex_sha256(string); // You can use this one: http://pajhome.org.uk/crypt/md5/
	};
	var hash = jsonHash(
	    data, 
	    hashingFunction,
	    {
	        sortObject: true,          // Sort Maps before hashing, defaults to true 
	        sortArrays: false,         // Sort Arrays before hashing, defaults to false
	        normalizeKeyCasing: false  // Convert all keys to lower case before hashing, defaults to false
	    }
	);
	logger.info(hash);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>7d69c70e-48ae-45a2-9c54-ffaa0b4188e6</id>
            <name>GetOrganizationid</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996557</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetOrganizationid(arg1)
{
	var id=0;	
	if(arg1.length&gt;0)
	{
		if(Object.keys(arg1[0]).length&gt;0)
		{
			id=saveorg(arg1[0]);
			
		}
	}

	if(id==undefined || id == null)
	{
		id=0;
	}
	
	
	return id;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>c3391887-f0a1-465d-9d53-d03adc5dc986</id>
            <name>GetPerformerid</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996294</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetPerformerid(arg1)
{
	var id=0;
	if(arg1.length&gt;0)
	{
	
		if(Object.keys(arg1[0]).length&gt;0)
		{
			id=savepractitionerrole(arg1[0]);
			
		}

		if(id==undefined)
		{
			id=0
		}
	}
	else if(Object.keys(arg1).length&gt;0)
	{
	
		id=savepractitionerrole(arg1);
			
		
		if(id==undefined)
		{
			id=0
		}
	}
	
	
	return id;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>ef2f4bb3-57c0-4a11-8bdf-9ecd220cabde</id>
            <name>GetRelatedPersonid</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307995721</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetRelatedPersonid(arg1,ptid)
{

	if(arg1.length&gt;0)
	{
		var id=saverelatedperson(arg1,ptid);
		
	}
	if(id==undefined || id==null || id==&apos;&apos;)
	{
		var id=0;
	}
	
	return id;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>516ddb75-54fd-433d-b332-c47ac0452f83</id>
            <name>GetSupplyid</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307997464</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetSupplyid(arg1)
{

	if(arg1.length&gt;0)
	{
		var supplyid=savesupply(arg1);
		var _supply=supplyid[0];
	}
	else
	{
		var _supply=0;
	}
	
	return _supply;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>205f445b-5445-42c9-bcca-13578383e0d2</id>
            <name>GetTextValue</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999800</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function GetTextValue(arg1)
{
	var text1=[];
	var ct1=0;
	//logger.info(&apos;GetTextValue ct1-&gt;&apos;+ct1);
	//logger.info(&apos;GetTextValue text1-&gt;&apos;+text1);

	var len=arg1.FeatureMap.length;
	//logger.info(&apos;GetTextValue len-&gt;&apos;+len);

	for(t=0;t&lt;len;t++)
	{
		t1=arg1.FeatureMap[t];
		if(t1.hasOwnProperty(&apos;AnyTypeFeatureMap&apos;))
		{
			if(t1.AnyTypeFeatureMap.length&gt;0)
			{
				var len1=t1.AnyTypeFeatureMap.length
				for(z=0;z&lt;len1;z++)
				{
					var t2=t1.AnyTypeFeatureMap[z];
					if(t2.hasOwnProperty(&apos;AnyTypeFeatureMap&apos;))
					{
						if(t2.AnyTypeFeatureMap.length&gt;0)
						{
							if(t2.AnyTypeFeatureMap[0].hasOwnProperty(&apos;value&apos;))
							{
								text1[ct1]=t2.AnyTypeFeatureMap[0].value;
								ct1=ct1+1;
							}
						}
					}
					else
					{
						text1[ct1]=t2.value;
						ct1=ct1+1;
					}
					

				}
			}
		}
		else if(t1.hasOwnProperty(&apos;value&apos;))
		{
			if(t1.value!=&apos;&apos;)
			{
				text1[ct1]=t1.value;
				ct1=ct1+1;
				//logger.info(&apos;In FeatureMap Value GetTextValue ct1-&gt;&apos;+ct1+&apos;:&apos;+t);
				//logger.info(&apos;In FeatureMap Value GetTextValue text1-&gt;&apos;+text1);

			}
		}
		else
		{
			//do nothing
		}

		
	}
	//logger.info(&apos;GetTextValue text1-&gt;&apos;+text1.join());
	return text1.join();
}


</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>37f27afc-e5ea-476b-919a-21f74da9c906</id>
            <name>GetTimeandFrequency</name>
            <revision>14</revision>
            <lastModified>
              <time>1667155742157</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetTimeandFrequency(arg1)
{
	//logger.info(&apos;GetTimeandFrequency in-&gt;&apos;+JSON.stringify(arg1));
	var len=arg1.length;
	var obj={};
	obj.startdate=&apos;&apos;;
	obj.enddate=&apos;&apos;;
	obj.frequency=&apos;&apos;;
	obj.frequencyunit=&apos;&apos;

	for(_e=0;_e&lt;len;_e++)
	{
		if(arg1[_e].hasOwnProperty(&apos;Operator&apos;))
		{
			if(arg1[_e].Operator.Name==&apos;A&apos;)
			{
				////logger.info(&apos;GetTimenFreq-&gt;&apos;+arg1[_e].PIVL_TS.hasOwnProperty(&apos;Period&apos;))
				if(arg1[_e].PIVL_TS.hasOwnProperty(&apos;Period&apos;) &amp;&amp; obj.frequency==&apos;&apos;)
				{
					if(arg1[_e].PIVL_TS.Period.IVL_PQ.Low.PQ.Value!=&apos;&apos;)
					{
						obj.frequency=arg1[_e].PIVL_TS.Period.IVL_PQ.Low.PQ.Value
						obj.frequencyunit=arg1[_e].PIVL_TS.Period.IVL_PQ.Low.PQ.Unit
					}
					else if(arg1[_e].PIVL_TS.Period.PQ.Value!=&apos;&apos; &amp;&amp; obj.frequency==&apos;&apos;)
					{
						obj.frequency=arg1[_e].PIVL_TS.Period.PQ.Value;
						obj.frequencyunit=arg1[_e].PIVL_TS.Period.PQ.Unit;
					}
					else
					{
						//do nothing
					}
				}
				else if (arg1[_e].EIVL_TS.length&gt;0)
				{
					//do nothing
				}
				else
				{
					//do nothing
				}
			}
			else
			{
				
				if(arg1[_e].hasOwnProperty(&apos;IVL_TS&apos;))
				{
					if(arg1[_e].IVL_TS.hasOwnProperty(&apos;Low&apos;) &amp;&amp; obj.startdate==&apos;&apos;)
					{
						obj.startdate=arg1[_e].IVL_TS.Low.TS.Value;
						obj.enddate=arg1[_e].IVL_TS.High.TS.Value;
						if(obj.enddate==&apos;&apos; &amp;&amp; arg1[_e].IVL_TS.Center.Value!=&apos;&apos;)
						{
							obj.enddate=arg1[_e].IVL_TS.Center.Value;
						}
						//logger.info(&apos;GetTimeandFrequency endate-&gt;&apos;+obj.enddate);
					}
				}
				else if(arg1[_e].hasOwnProperty(&apos;Value&apos;))
				{
					if(arg1[_e].Value.hasOwnProperty(&apos;Value&apos;))
					{
						obj.startdate=arg1[_e].Value.Value;
						obj.enddate=&apos;&apos;;
					}
					else
					{
						obj.startdate=arg1[_e].Value;
						obj.enddate=&apos;&apos;;
					}
				}
				else
				{
					//do nothing
				}
			}
			
		}
		//SK - 27022022 adding logic to read time if its out of operator
		if(arg1[_e].hasOwnProperty(&apos;IVL_TS&apos;) &amp;&amp; obj.startdate==&apos;&apos;)
		{
			if(arg1[_e].IVL_TS.hasOwnProperty(&apos;Low&apos;) &amp;&amp; obj.startdate==&apos;&apos;)
			{
				obj.startdate=arg1[_e].IVL_TS.Low.TS.Value;
				obj.enddate=arg1[_e].IVL_TS.High.TS.Value;
				if(obj.enddate==&apos;&apos; &amp;&amp; arg1[_e].IVL_TS.Center.Value!=&apos;&apos;)
				{
					obj.enddate=arg1[_e].IVL_TS.Center.Value;
				}
				//logger.info(&apos;GetTimeandFrequency endate-&gt;&apos;+obj.enddate);
			}
		}
		if(arg1[_e].hasOwnProperty(&apos;Value&apos;) &amp;&amp; obj.startdate==&apos;&apos; &amp;&amp; obj.enddate==&apos;&apos;)
		{
			if(arg1[_e].Value.hasOwnProperty(&apos;Value&apos;))
			{
				obj.startdate=arg1[_e].Value.Value;
				obj.enddate=&apos;&apos;;
			}
			else
			{
				obj.startdate=arg1[_e].Value;
				obj.enddate=&apos;&apos;;
			}
		}
	}
	//logger.info(&apos;GetTimeandFrequency out-&gt;&apos;+JSON.stringify(obj));
	return obj;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>70ada147-f4bf-4b4d-822e-b0485cd69700</id>
            <name>getvaluenunit</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307996373</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getvaluenunit(arg1)
{
	var valobj={};

	if(arg1!=undefined &amp;&amp; arg1!=null)
	{

		if(arg1.CD.DisplayName!=&apos;&apos;)
		{
			valobj.value=arg1.CD.DisplayName;
			valobj.unit=&apos;&apos;;
			valobj.code=arg1.CD.Code;
		}
		else if(arg1.CE.DisplayName!=&apos;&apos;)
		{
			valobj.value=arg1.CE.DisplayName;
			valobj.unit=&apos;&apos;;
			valobj.code=arg1.CE.Code;
		}
		else if(arg1.PQ.Value!=&apos;&apos;)
		{
			valobj.value=arg1.PQ.Value;
			valobj.unit=arg1.PQ.Unit;
			valobj.code=&apos;&apos;;
		}
			else if(arg1.IVL_PQ.Low.PQ.Value!=&apos;&apos;)
		{
			valobj.value=arg1.IVL_PQ.Low.PQ.Value;
			valobj.unit=arg1.IVL_PQ.Low.PQ.Unit;
			valobj.code=&apos;&apos;;
		}
			else if(arg1.IVL_PQ.High.PQ.Value!=&apos;&apos;)
		{
			valobj.value=arg1.IVL_PQ.High.PQ.Value;
			valobj.unit=arg1.IVL_PQ.High.PQ.Unit;
			valobj.code=&apos;&apos;;
		}
			else if(arg1.IVL_PQ.SXCM_PQ.PQ.Value!=&apos;&apos;)
		{
			valobj.value=arg1.IVL_PQ.SXCM_PQ.PQ.Value;
			valobj.unit=arg1.IVL_PQ.SXCM_PQ.PQ.Unit;
			valobj.code=&apos;&apos;;
		}
		else if(arg1.REAL.Value!=&apos;&apos;)
		{
			valobj.value=arg1.REAL.Value;
			valobj.unit=&apos;&apos;;
			valobj.code=&apos;&apos;;
		}
		else if(arg1.hasOwnProperty(&apos;ST&apos;))
		{
			if(arg1.hasOwnProperty(&apos;Value&apos;))
			{
				if(arg1.ST.Value!=&apos;&apos;)
				{
					valobj.value=arg1.ST.Value;
					valobj.unit=&apos;&apos;;
					valobj.code=&apos;&apos;;
				}
			}
			else
			{
				if(arg1.ST!=&apos;&apos;)
				{
					valobj.value=arg1.ST;
					valobj.unit=&apos;&apos;
					valobj.code=&apos;&apos;;
				}
			}
			
		}
		
		else
		{
			valobj.value=&apos;&apos;
			valobj.unit=&apos;&apos;
			valobj.code=&apos;&apos;;
		}
	}
	else
	{
		valobj.value=&apos;&apos;
		valobj.unit=&apos;&apos;
		valobj.code=&apos;&apos;;
		
	}
	return valobj;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>e213fa58-0428-4ee1-9ca1-64568065ab93</id>
            <name>Hash</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307999020</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2 Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 * Also http://anmar.eu.org/projects/jssha2/
 */

/*
 * Configurable variables. You may need to tweak these to be compatible with
 * the server-side, but the defaults work in most cases.
 */
var hexcase = 0;  /* hex output format. 0 - lowercase; 1 - uppercase        */
var b64pad  = &quot;&quot;; /* base-64 pad character. &quot;=&quot; for strict RFC compliance   */

/*
 * These are the functions you&apos;ll usually want to call
 * They take string arguments and return either hex or base-64 encoded strings
 */
function hex_sha256(s)    { return rstr2hex(rstr_sha256(str2rstr_utf8(s))); }
function b64_sha256(s)    { return rstr2b64(rstr_sha256(str2rstr_utf8(s))); }
function any_sha256(s, e) { return rstr2any(rstr_sha256(str2rstr_utf8(s)), e); }
function hex_hmac_sha256(k, d)
  { return rstr2hex(rstr_hmac_sha256(str2rstr_utf8(k), str2rstr_utf8(d))); }
function b64_hmac_sha256(k, d)
  { return rstr2b64(rstr_hmac_sha256(str2rstr_utf8(k), str2rstr_utf8(d))); }
function any_hmac_sha256(k, d, e)
  { return rstr2any(rstr_hmac_sha256(str2rstr_utf8(k), str2rstr_utf8(d)), e); }

/*
 * Perform a simple self-test to see if the VM is working
 */
function sha256_vm_test()
{
  return hex_sha256(&quot;abc&quot;).toLowerCase() ==
            &quot;ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad&quot;;
}

/*
 * Calculate the sha256 of a raw string
 */
function rstr_sha256(s)
{
  return binb2rstr(binb_sha256(rstr2binb(s), s.length * 8));
}

/*
 * Calculate the HMAC-sha256 of a key and some data (raw strings)
 */
function rstr_hmac_sha256(key, data)
{
  var bkey = rstr2binb(key);
  if(bkey.length &gt; 16) bkey = binb_sha256(bkey, key.length * 8);

  var ipad = Array(16), opad = Array(16);
  for(var i = 0; i &lt; 16; i++)
  {
    ipad[i] = bkey[i] ^ 0x36363636;
    opad[i] = bkey[i] ^ 0x5C5C5C5C;
  }

  var hash = binb_sha256(ipad.concat(rstr2binb(data)), 512 + data.length * 8);
  return binb2rstr(binb_sha256(opad.concat(hash), 512 + 256));
}

/*
 * Convert a raw string to a hex string
 */
function rstr2hex(input)
{
  try { hexcase } catch(e) { hexcase=0; }
  var hex_tab = hexcase ? &quot;0123456789ABCDEF&quot; : &quot;0123456789abcdef&quot;;
  var output = &quot;&quot;;
  var x;
  for(var i = 0; i &lt; input.length; i++)
  {
    x = input.charCodeAt(i);
    output += hex_tab.charAt((x &gt;&gt;&gt; 4) &amp; 0x0F)
           +  hex_tab.charAt( x        &amp; 0x0F);
  }
  return output;
}

/*
 * Convert a raw string to a base-64 string
 */
function rstr2b64(input)
{
  try { b64pad } catch(e) { b64pad=&apos;&apos;; }
  var tab = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;;
  var output = &quot;&quot;;
  var len = input.length;
  for(var i = 0; i &lt; len; i += 3)
  {
    var triplet = (input.charCodeAt(i) &lt;&lt; 16)
                | (i + 1 &lt; len ? input.charCodeAt(i+1) &lt;&lt; 8 : 0)
                | (i + 2 &lt; len ? input.charCodeAt(i+2)      : 0);
    for(var j = 0; j &lt; 4; j++)
    {
      if(i * 8 + j * 6 &gt; input.length * 8) output += b64pad;
      else output += tab.charAt((triplet &gt;&gt;&gt; 6*(3-j)) &amp; 0x3F);
    }
  }
  return output;
}

/*
 * Convert a raw string to an arbitrary string encoding
 */
function rstr2any(input, encoding)
{
  var divisor = encoding.length;
  var remainders = Array();
  var i, q, x, quotient;

  /* Convert to an array of 16-bit big-endian values, forming the dividend */
  var dividend = Array(Math.ceil(input.length / 2));
  for(i = 0; i &lt; dividend.length; i++)
  {
    dividend[i] = (input.charCodeAt(i * 2) &lt;&lt; 8) | input.charCodeAt(i * 2 + 1);
  }

  /*
   * Repeatedly perform a long division. The binary array forms the dividend,
   * the length of the encoding is the divisor. Once computed, the quotient
   * forms the dividend for the next step. We stop when the dividend is zero.
   * All remainders are stored for later use.
   */
  while(dividend.length &gt; 0)
  {
    quotient = Array();
    x = 0;
    for(i = 0; i &lt; dividend.length; i++)
    {
      x = (x &lt;&lt; 16) + dividend[i];
      q = Math.floor(x / divisor);
      x -= q * divisor;
      if(quotient.length &gt; 0 || q &gt; 0)
        quotient[quotient.length] = q;
    }
    remainders[remainders.length] = x;
    dividend = quotient;
  }

  /* Convert the remainders to the output string */
  var output = &quot;&quot;;
  for(i = remainders.length - 1; i &gt;= 0; i--)
    output += encoding.charAt(remainders[i]);

  /* Append leading zero equivalents */
  var full_length = Math.ceil(input.length * 8 /
                                    (Math.log(encoding.length) / Math.log(2)))
  for(i = output.length; i &lt; full_length; i++)
    output = encoding[0] + output;

  return output;
}

/*
 * Encode a string as utf-8.
 * For efficiency, this assumes the input is valid utf-16.
 */
function str2rstr_utf8(input)
{
  var output = &quot;&quot;;
  var i = -1;
  var x, y;

  while(++i &lt; input.length)
  {
    /* Decode utf-16 surrogate pairs */
    x = input.charCodeAt(i);
    y = i + 1 &lt; input.length ? input.charCodeAt(i + 1) : 0;
    if(0xD800 &lt;= x &amp;&amp; x &lt;= 0xDBFF &amp;&amp; 0xDC00 &lt;= y &amp;&amp; y &lt;= 0xDFFF)
    {
      x = 0x10000 + ((x &amp; 0x03FF) &lt;&lt; 10) + (y &amp; 0x03FF);
      i++;
    }

    /* Encode output as utf-8 */
    if(x &lt;= 0x7F)
      output += String.fromCharCode(x);
    else if(x &lt;= 0x7FF)
      output += String.fromCharCode(0xC0 | ((x &gt;&gt;&gt; 6 ) &amp; 0x1F),
                                    0x80 | ( x         &amp; 0x3F));
    else if(x &lt;= 0xFFFF)
      output += String.fromCharCode(0xE0 | ((x &gt;&gt;&gt; 12) &amp; 0x0F),
                                    0x80 | ((x &gt;&gt;&gt; 6 ) &amp; 0x3F),
                                    0x80 | ( x         &amp; 0x3F));
    else if(x &lt;= 0x1FFFFF)
      output += String.fromCharCode(0xF0 | ((x &gt;&gt;&gt; 18) &amp; 0x07),
                                    0x80 | ((x &gt;&gt;&gt; 12) &amp; 0x3F),
                                    0x80 | ((x &gt;&gt;&gt; 6 ) &amp; 0x3F),
                                    0x80 | ( x         &amp; 0x3F));
  }
  return output;
}

/*
 * Encode a string as utf-16
 */
function str2rstr_utf16le(input)
{
  var output = &quot;&quot;;
  for(var i = 0; i &lt; input.length; i++)
    output += String.fromCharCode( input.charCodeAt(i)        &amp; 0xFF,
                                  (input.charCodeAt(i) &gt;&gt;&gt; 8) &amp; 0xFF);
  return output;
}

function str2rstr_utf16be(input)
{
  var output = &quot;&quot;;
  for(var i = 0; i &lt; input.length; i++)
    output += String.fromCharCode((input.charCodeAt(i) &gt;&gt;&gt; 8) &amp; 0xFF,
                                   input.charCodeAt(i)        &amp; 0xFF);
  return output;
}

/*
 * Convert a raw string to an array of big-endian words
 * Characters &gt;255 have their high-byte silently ignored.
 */
function rstr2binb(input)
{
  var output = Array(input.length &gt;&gt; 2);
  for(var i = 0; i &lt; output.length; i++)
    output[i] = 0;
  for(var i = 0; i &lt; input.length * 8; i += 8)
    output[i&gt;&gt;5] |= (input.charCodeAt(i / 8) &amp; 0xFF) &lt;&lt; (24 - i % 32);
  return output;
}

/*
 * Convert an array of big-endian words to a string
 */
function binb2rstr(input)
{
  var output = &quot;&quot;;
  for(var i = 0; i &lt; input.length * 32; i += 8)
    output += String.fromCharCode((input[i&gt;&gt;5] &gt;&gt;&gt; (24 - i % 32)) &amp; 0xFF);
  return output;
}

/*
 * Main sha256 function, with its support functions
 */
function sha256_S (X, n) {return ( X &gt;&gt;&gt; n ) | (X &lt;&lt; (32 - n));}
function sha256_R (X, n) {return ( X &gt;&gt;&gt; n );}
function sha256_Ch(x, y, z) {return ((x &amp; y) ^ ((~x) &amp; z));}
function sha256_Maj(x, y, z) {return ((x &amp; y) ^ (x &amp; z) ^ (y &amp; z));}
function sha256_Sigma0256(x) {return (sha256_S(x, 2) ^ sha256_S(x, 13) ^ sha256_S(x, 22));}
function sha256_Sigma1256(x) {return (sha256_S(x, 6) ^ sha256_S(x, 11) ^ sha256_S(x, 25));}
function sha256_Gamma0256(x) {return (sha256_S(x, 7) ^ sha256_S(x, 18) ^ sha256_R(x, 3));}
function sha256_Gamma1256(x) {return (sha256_S(x, 17) ^ sha256_S(x, 19) ^ sha256_R(x, 10));}
function sha256_Sigma0512(x) {return (sha256_S(x, 28) ^ sha256_S(x, 34) ^ sha256_S(x, 39));}
function sha256_Sigma1512(x) {return (sha256_S(x, 14) ^ sha256_S(x, 18) ^ sha256_S(x, 41));}
function sha256_Gamma0512(x) {return (sha256_S(x, 1)  ^ sha256_S(x, 8) ^ sha256_R(x, 7));}
function sha256_Gamma1512(x) {return (sha256_S(x, 19) ^ sha256_S(x, 61) ^ sha256_R(x, 6));}

var sha256_K = new Array
(
  1116352408, 1899447441, -1245643825, -373957723, 961987163, 1508970993,
  -1841331548, -1424204075, -670586216, 310598401, 607225278, 1426881987,
  1925078388, -2132889090, -1680079193, -1046744716, -459576895, -272742522,
  264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986,
  -1740746414, -1473132947, -1341970488, -1084653625, -958395405, -710438585,
  113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291,
  1695183700, 1986661051, -2117940946, -1838011259, -1564481375, -1474664885,
  -1035236496, -949202525, -778901479, -694614492, -200395387, 275423344,
  430227734, 506948616, 659060556, 883997877, 958139571, 1322822218,
  1537002063, 1747873779, 1955562222, 2024104815, -2067236844, -1933114872,
  -1866530822, -1538233109, -1090935817, -965641998
);

function binb_sha256(m, l)
{
  var HASH = new Array(1779033703, -1150833019, 1013904242, -1521486534,
                       1359893119, -1694144372, 528734635, 1541459225);
  var W = new Array(64);
  var a, b, c, d, e, f, g, h;
  var i, j, T1, T2;

  /* append padding */
  m[l &gt;&gt; 5] |= 0x80 &lt;&lt; (24 - l % 32);
  m[((l + 64 &gt;&gt; 9) &lt;&lt; 4) + 15] = l;

  for(i = 0; i &lt; m.length; i += 16)
  {
    a = HASH[0];
    b = HASH[1];
    c = HASH[2];
    d = HASH[3];
    e = HASH[4];
    f = HASH[5];
    g = HASH[6];
    h = HASH[7];

    for(j = 0; j &lt; 64; j++)
    {
      if (j &lt; 16) W[j] = m[j + i];
      else W[j] = safe_add(safe_add(safe_add(sha256_Gamma1256(W[j - 2]), W[j - 7]),
                                            sha256_Gamma0256(W[j - 15])), W[j - 16]);

      T1 = safe_add(safe_add(safe_add(safe_add(h, sha256_Sigma1256(e)), sha256_Ch(e, f, g)),
                                                          sha256_K[j]), W[j]);
      T2 = safe_add(sha256_Sigma0256(a), sha256_Maj(a, b, c));
      h = g;
      g = f;
      f = e;
      e = safe_add(d, T1);
      d = c;
      c = b;
      b = a;
      a = safe_add(T1, T2);
    }

    HASH[0] = safe_add(a, HASH[0]);
    HASH[1] = safe_add(b, HASH[1]);
    HASH[2] = safe_add(c, HASH[2]);
    HASH[3] = safe_add(d, HASH[3]);
    HASH[4] = safe_add(e, HASH[4]);
    HASH[5] = safe_add(f, HASH[5]);
    HASH[6] = safe_add(g, HASH[6]);
    HASH[7] = safe_add(h, HASH[7]);
  }
  return HASH;
}

function safe_add (x, y)
{
  var lsw = (x &amp; 0xFFFF) + (y &amp; 0xFFFF);
  var msw = (x &gt;&gt; 16) + (y &gt;&gt; 16) + (lsw &gt;&gt; 16);
  return (msw &lt;&lt; 16) | (lsw &amp; 0xFFFF);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>86902e57-648a-44b0-a2dd-c986568d670c</id>
            <name>mysql_real_escape_string</name>
            <revision>2</revision>
            <lastModified>
              <time>1668227607111</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function mysql_real_escape_string (str) {
    
    if (typeof str != &apos;string&apos;)
    {
        return str;
    }
    else
    {
    		str=str.replace(/&apos;/g,&apos;\\\&apos;&apos;);
    		str=str.normalize(&quot;NFD&quot;).replace(/[\u0300-\u036f]/g, &quot;&quot;);
    		
    		return str;
    }
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>93053acc-50a3-43e0-aa6c-2add56fe4c77</id>
            <name>removeDuplicates</name>
            <revision>1</revision>
            <lastModified>
              <time>1666865463645</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function removeDuplicates(arr) {
        var unique = [];
        arr.forEach(element =&gt; {
            if (!unique.includes(element)) {
                unique.push(element);
            }
        });
        return unique;
    }</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>db6d69d5-6dd4-4b95-89c1-385965fede6a</id>
            <name>replaceDiacritics</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998297</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function replaceDiacritics(str){

  var diacritics = [
    {char: &apos;A&apos;, base: /[\300-\306]/g},
    {char: &apos;a&apos;, base: /[\340-\346]/g},
    {char: &apos;E&apos;, base: /[\310-\313]/g},
    {char: &apos;e&apos;, base: /[\350-\353]/g},
    {char: &apos;I&apos;, base: /[\314-\317]/g},
    {char: &apos;i&apos;, base: /[\354-\357]/g},
    {char: &apos;O&apos;, base: /[\322-\330]/g},
    {char: &apos;o&apos;, base: /[\362-\370]/g},
    {char: &apos;U&apos;, base: /[\331-\334]/g},
    {char: &apos;u&apos;, base: /[\371-\374]/g},
    {char: &apos;N&apos;, base: /[\321]/g},
    {char: &apos;n&apos;, base: /[\361]/g},
    {char: &apos;C&apos;, base: /[\307]/g},
    {char: &apos;c&apos;, base: /[\347]/g}
  ]

  diacritics.forEach(function(letter){
    str = str.replace(letter.base, letter.char);
  });

  return str;
};</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>6a1a34e2-0e1c-468d-bb81-934899a243ca</id>
            <name>stripTZ</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998252</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function stripTZ(arg1) {
	// TODO: Enter code here
	
	var tz_arr=[];
	var pos;
	
	if(arg1!=undefined)
	{
		
		if(arg1.indexOf(&quot;-&quot;)&gt;0)
		{
		//	logger.info(&apos;stripTZ-&gt;pos-&apos;);
			tz_arr=arg1.split(&quot;-&quot;);
							
		}
		else if(arg1.indexOf(&quot;+&quot;)&gt;0)
		{
		//	logger.info(&apos;stripTZ-&gt;pos+&apos;);
			tz_arr=arg1.split(&quot;\\+&quot;);
		}
		else
		{
			tz_arr[0]=arg1;
			tz_arr[1]=&apos;&apos;;
		}
	}
	return tz_arr;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.12.0">
            <id>6542e181-6982-4c28-b475-de4b5f35ccd5</id>
            <name>zeropadding</name>
            <revision>1</revision>
            <lastModified>
              <time>1665307998942</time>
              <timezone>Asia/Calcutta</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function zeropadding(pad, user_str, pad_pos)
{
  if (typeof user_str === &apos;undefined&apos;) 
    return pad;
  if (pad_pos == &apos;l&apos;)
     {
     return (pad + user_str).slice(-pad.length);
     }
  else 
    {
    return (user_str + pad).substring(0, pad.length);
    }
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
    </codeTemplateLibraries>
  </exportData>
</channel>